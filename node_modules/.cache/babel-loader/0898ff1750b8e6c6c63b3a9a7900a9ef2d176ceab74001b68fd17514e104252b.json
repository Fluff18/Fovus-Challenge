{"ast":null,"code":"/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar helpers = require('./helpers');\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction core_sha1(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << 24 - len % 32;\n  x[(len + 64 >> 9 << 4) + 15] = len;\n  var w = Array(80);\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n  var e = -1009589776;\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    var olde = e;\n    for (var j = 0; j < 80; j++) {\n      if (j < 16) w[j] = x[i + j];else w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = rol(b, 30);\n      b = a;\n      a = t;\n    }\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n  return Array(a, b, c, d, e);\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft(t, b, c, d) {\n  if (t < 20) return b & c | ~b & d;\n  if (t < 40) return b ^ c ^ d;\n  if (t < 60) return b & c | b & d | c & d;\n  return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t) {\n  return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y) {\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xFFFF;\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction rol(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\nmodule.exports = function sha1(buf) {\n  return helpers.hash(buf, core_sha1, 20, true);\n};","map":{"version":3,"names":["helpers","require","core_sha1","x","len","w","Array","a","b","c","d","e","i","length","olda","oldb","oldc","oldd","olde","j","rol","t","safe_add","sha1_ft","sha1_kt","y","lsw","msw","num","cnt","module","exports","sha1","buf","hash"],"sources":["/Users/luminosity/Desktop/Fovus/node_modules/crypto-browserify/sha.js"],"sourcesContent":["/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar helpers = require('./helpers');\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction core_sha1(x, len)\n{\n  /* append padding */\n  x[len >> 5] |= 0x80 << (24 - len % 32);\n  x[((len + 64 >> 9) << 4) + 15] = len;\n\n  var w = Array(80);\n  var a =  1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d =  271733878;\n  var e = -1009589776;\n\n  for(var i = 0; i < x.length; i += 16)\n  {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    var olde = e;\n\n    for(var j = 0; j < 80; j++)\n    {\n      if(j < 16) w[j] = x[i + j];\n      else w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\n      var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = rol(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n  return Array(a, b, c, d, e);\n\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft(t, b, c, d)\n{\n  if(t < 20) return (b & c) | ((~b) & d);\n  if(t < 40) return b ^ c ^ d;\n  if(t < 60) return (b & c) | (b & d) | (c & d);\n  return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t)\n{\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\n         (t < 60) ? -1894007588 : -899497514;\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y)\n{\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction rol(num, cnt)\n{\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\nmodule.exports = function sha1(buf) {\n  return helpers.hash(buf, core_sha1, 20, true);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}