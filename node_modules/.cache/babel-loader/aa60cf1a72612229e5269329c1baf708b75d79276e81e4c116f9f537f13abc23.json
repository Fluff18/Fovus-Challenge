{"ast":null,"code":"var AWS = require('../core');\nvar STS = require('../../clients/sts');\n\n/**\n * Represents temporary credentials retrieved from {AWS.STS}. Without any\n * extra parameters, credentials will be fetched from the\n * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the\n * {AWS.STS.assumeRole} operation will be used to fetch credentials for the\n * role instead.\n *\n * To setup temporary credentials, configure a set of master credentials\n * using the standard credentials providers (environment, EC2 instance metadata,\n * or from the filesystem), then set the global credentials to a new\n * temporary credentials object:\n *\n * ```javascript\n * // Note that environment credentials are loaded by default,\n * // the following line is shown for clarity:\n * AWS.config.credentials = new AWS.EnvironmentCredentials('AWS');\n *\n * // Now set temporary credentials seeded from the master credentials\n * AWS.config.credentials = new AWS.TemporaryCredentials();\n *\n * // subsequent requests will now use temporary credentials from AWS STS.\n * new AWS.S3().listBucket(function(err, data) { ... });\n * ```\n *\n * @!attribute masterCredentials\n *   @return [AWS.Credentials] the master (non-temporary) credentials used to\n *     get and refresh temporary credentials from AWS STS.\n * @note (see constructor)\n */\nAWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new temporary credentials object.\n   *\n   * @note In order to create temporary credentials, you first need to have\n   *   \"master\" credentials configured in {AWS.Config.credentials}. These\n   *   master credentials are necessary to retrieve the temporary credentials,\n   *   as well as refresh the credentials when they expire.\n   * @param params [map] a map of options that are passed to the\n   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.\n   *   If a `RoleArn` parameter is passed in, credentials will be based on the\n   *   IAM role.\n   * @param masterCredentials [AWS.Credentials] the master (non-temporary) credentials\n   *  used to get and refresh temporary credentials from AWS STS.\n   * @example Creating a new credentials object for generic temporary credentials\n   *   AWS.config.credentials = new AWS.TemporaryCredentials();\n   * @example Creating a new credentials object for an IAM role\n   *   AWS.config.credentials = new AWS.TemporaryCredentials({\n   *     RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials',\n   *   });\n   * @see AWS.STS.assumeRole\n   * @see AWS.STS.getSessionToken\n   */\n  constructor: function TemporaryCredentials(params, masterCredentials) {\n    AWS.Credentials.call(this);\n    this.loadMasterCredentials(masterCredentials);\n    this.expired = true;\n    this.params = params || {};\n    if (this.params.RoleArn) {\n      this.params.RoleSessionName = this.params.RoleSessionName || 'temporary-credentials';\n    }\n  },\n  /**\n   * Refreshes credentials using {AWS.STS.assumeRole} or\n   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed\n   * to the credentials {constructor}.\n   *\n   * @callback callback function(err)\n   *   Called when the STS service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    var self = this;\n    self.createClients();\n    if (!callback) callback = function (err) {\n      if (err) throw err;\n    };\n    self.masterCredentials.get(function () {\n      self.service.config.credentials = self.masterCredentials;\n      var operation = self.params.RoleArn ? self.service.assumeRole : self.service.getSessionToken;\n      operation.call(self.service, function (err, data) {\n        if (!err) {\n          self.service.credentialsFrom(data, self);\n        }\n        callback(err);\n      });\n    });\n  },\n  /**\n   * @api private\n   */\n  loadMasterCredentials: function loadMasterCredentials(masterCredentials) {\n    this.masterCredentials = masterCredentials || AWS.config.credentials;\n    while (this.masterCredentials.masterCredentials) {\n      this.masterCredentials = this.masterCredentials.masterCredentials;\n    }\n    if (typeof this.masterCredentials.get !== 'function') {\n      this.masterCredentials = new AWS.Credentials(this.masterCredentials);\n    }\n  },\n  /**\n   * @api private\n   */\n  createClients: function () {\n    this.service = this.service || new STS({\n      params: this.params\n    });\n  }\n});","map":{"version":3,"names":["AWS","require","STS","TemporaryCredentials","util","inherit","Credentials","constructor","params","masterCredentials","call","loadMasterCredentials","expired","RoleArn","RoleSessionName","refresh","callback","self","createClients","err","get","service","config","credentials","operation","assumeRole","getSessionToken","data","credentialsFrom"],"sources":["/Users/luminosity/Desktop/Fovus/node_modules/aws-sdk/lib/credentials/temporary_credentials.js"],"sourcesContent":["var AWS = require('../core');\nvar STS = require('../../clients/sts');\n\n/**\n * Represents temporary credentials retrieved from {AWS.STS}. Without any\n * extra parameters, credentials will be fetched from the\n * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the\n * {AWS.STS.assumeRole} operation will be used to fetch credentials for the\n * role instead.\n *\n * To setup temporary credentials, configure a set of master credentials\n * using the standard credentials providers (environment, EC2 instance metadata,\n * or from the filesystem), then set the global credentials to a new\n * temporary credentials object:\n *\n * ```javascript\n * // Note that environment credentials are loaded by default,\n * // the following line is shown for clarity:\n * AWS.config.credentials = new AWS.EnvironmentCredentials('AWS');\n *\n * // Now set temporary credentials seeded from the master credentials\n * AWS.config.credentials = new AWS.TemporaryCredentials();\n *\n * // subsequent requests will now use temporary credentials from AWS STS.\n * new AWS.S3().listBucket(function(err, data) { ... });\n * ```\n *\n * @!attribute masterCredentials\n *   @return [AWS.Credentials] the master (non-temporary) credentials used to\n *     get and refresh temporary credentials from AWS STS.\n * @note (see constructor)\n */\nAWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new temporary credentials object.\n   *\n   * @note In order to create temporary credentials, you first need to have\n   *   \"master\" credentials configured in {AWS.Config.credentials}. These\n   *   master credentials are necessary to retrieve the temporary credentials,\n   *   as well as refresh the credentials when they expire.\n   * @param params [map] a map of options that are passed to the\n   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.\n   *   If a `RoleArn` parameter is passed in, credentials will be based on the\n   *   IAM role.\n   * @param masterCredentials [AWS.Credentials] the master (non-temporary) credentials\n   *  used to get and refresh temporary credentials from AWS STS.\n   * @example Creating a new credentials object for generic temporary credentials\n   *   AWS.config.credentials = new AWS.TemporaryCredentials();\n   * @example Creating a new credentials object for an IAM role\n   *   AWS.config.credentials = new AWS.TemporaryCredentials({\n   *     RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials',\n   *   });\n   * @see AWS.STS.assumeRole\n   * @see AWS.STS.getSessionToken\n   */\n  constructor: function TemporaryCredentials(params, masterCredentials) {\n    AWS.Credentials.call(this);\n    this.loadMasterCredentials(masterCredentials);\n    this.expired = true;\n\n    this.params = params || {};\n    if (this.params.RoleArn) {\n      this.params.RoleSessionName =\n        this.params.RoleSessionName || 'temporary-credentials';\n    }\n  },\n\n  /**\n   * Refreshes credentials using {AWS.STS.assumeRole} or\n   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed\n   * to the credentials {constructor}.\n   *\n   * @callback callback function(err)\n   *   Called when the STS service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    var self = this;\n    self.createClients();\n    if (!callback) callback = function(err) { if (err) throw err; };\n\n    self.masterCredentials.get(function() {\n      self.service.config.credentials = self.masterCredentials;\n      var operation = self.params.RoleArn ?\n        self.service.assumeRole : self.service.getSessionToken;\n      operation.call(self.service, function (err, data) {\n        if (!err) {\n          self.service.credentialsFrom(data, self);\n        }\n        callback(err);\n      });\n    });\n  },\n\n  /**\n   * @api private\n   */\n  loadMasterCredentials: function loadMasterCredentials(masterCredentials) {\n    this.masterCredentials = masterCredentials || AWS.config.credentials;\n    while (this.masterCredentials.masterCredentials) {\n      this.masterCredentials = this.masterCredentials.masterCredentials;\n    }\n\n    if (typeof this.masterCredentials.get !== 'function') {\n      this.masterCredentials = new AWS.Credentials(this.masterCredentials);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  createClients: function() {\n    this.service = this.service || new STS({params: this.params});\n  }\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}