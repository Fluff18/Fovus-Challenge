{"ast":null,"code":"var Buffer = require('buffer').Buffer;\nvar intSize = 4;\nvar zeroBuffer = new Buffer(intSize);\nzeroBuffer.fill(0);\nvar chrsz = 8;\nfunction toArray(buf, bigEndian) {\n  if (buf.length % intSize !== 0) {\n    var len = buf.length + (intSize - buf.length % intSize);\n    buf = Buffer.concat([buf, zeroBuffer], len);\n  }\n  var arr = [];\n  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;\n  for (var i = 0; i < buf.length; i += intSize) {\n    arr.push(fn.call(buf, i));\n  }\n  return arr;\n}\nfunction toBuffer(arr, size, bigEndian) {\n  var buf = new Buffer(size);\n  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;\n  for (var i = 0; i < arr.length; i++) {\n    fn.call(buf, arr[i], i * 4, true);\n  }\n  return buf;\n}\nfunction hash(buf, fn, hashSize, bigEndian) {\n  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);\n  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);\n  return toBuffer(arr, hashSize, bigEndian);\n}\nmodule.exports = {\n  hash: hash\n};","map":{"version":3,"names":["Buffer","require","intSize","zeroBuffer","fill","chrsz","toArray","buf","bigEndian","length","len","concat","arr","fn","readInt32BE","readInt32LE","i","push","call","toBuffer","size","writeInt32BE","writeInt32LE","hash","hashSize","isBuffer","module","exports"],"sources":["/Users/luminosity/Desktop/Fovus/node_modules/crypto-browserify/helpers.js"],"sourcesContent":["var Buffer = require('buffer').Buffer;\nvar intSize = 4;\nvar zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);\nvar chrsz = 8;\n\nfunction toArray(buf, bigEndian) {\n  if ((buf.length % intSize) !== 0) {\n    var len = buf.length + (intSize - (buf.length % intSize));\n    buf = Buffer.concat([buf, zeroBuffer], len);\n  }\n\n  var arr = [];\n  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;\n  for (var i = 0; i < buf.length; i += intSize) {\n    arr.push(fn.call(buf, i));\n  }\n  return arr;\n}\n\nfunction toBuffer(arr, size, bigEndian) {\n  var buf = new Buffer(size);\n  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;\n  for (var i = 0; i < arr.length; i++) {\n    fn.call(buf, arr[i], i * 4, true);\n  }\n  return buf;\n}\n\nfunction hash(buf, fn, hashSize, bigEndian) {\n  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);\n  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);\n  return toBuffer(arr, hashSize, bigEndian);\n}\n\nmodule.exports = { hash: hash };\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC,CAACD,MAAM;AACrC,IAAIE,OAAO,GAAG,CAAC;AACf,IAAIC,UAAU,GAAG,IAAIH,MAAM,CAACE,OAAO,CAAC;AAAEC,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC;AACxD,IAAIC,KAAK,GAAG,CAAC;AAEb,SAASC,OAAO,CAACC,GAAG,EAAEC,SAAS,EAAE;EAC/B,IAAKD,GAAG,CAACE,MAAM,GAAGP,OAAO,KAAM,CAAC,EAAE;IAChC,IAAIQ,GAAG,GAAGH,GAAG,CAACE,MAAM,IAAIP,OAAO,GAAIK,GAAG,CAACE,MAAM,GAAGP,OAAQ,CAAC;IACzDK,GAAG,GAAGP,MAAM,CAACW,MAAM,CAAC,CAACJ,GAAG,EAAEJ,UAAU,CAAC,EAAEO,GAAG,CAAC;EAC7C;EAEA,IAAIE,GAAG,GAAG,EAAE;EACZ,IAAIC,EAAE,GAAGL,SAAS,GAAGD,GAAG,CAACO,WAAW,GAAGP,GAAG,CAACQ,WAAW;EACtD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,GAAG,CAACE,MAAM,EAAEO,CAAC,IAAId,OAAO,EAAE;IAC5CU,GAAG,CAACK,IAAI,CAACJ,EAAE,CAACK,IAAI,CAACX,GAAG,EAAES,CAAC,CAAC,CAAC;EAC3B;EACA,OAAOJ,GAAG;AACZ;AAEA,SAASO,QAAQ,CAACP,GAAG,EAAEQ,IAAI,EAAEZ,SAAS,EAAE;EACtC,IAAID,GAAG,GAAG,IAAIP,MAAM,CAACoB,IAAI,CAAC;EAC1B,IAAIP,EAAE,GAAGL,SAAS,GAAGD,GAAG,CAACc,YAAY,GAAGd,GAAG,CAACe,YAAY;EACxD,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,GAAG,CAACH,MAAM,EAAEO,CAAC,EAAE,EAAE;IACnCH,EAAE,CAACK,IAAI,CAACX,GAAG,EAAEK,GAAG,CAACI,CAAC,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC;EACnC;EACA,OAAOT,GAAG;AACZ;AAEA,SAASgB,IAAI,CAAChB,GAAG,EAAEM,EAAE,EAAEW,QAAQ,EAAEhB,SAAS,EAAE;EAC1C,IAAI,CAACR,MAAM,CAACyB,QAAQ,CAAClB,GAAG,CAAC,EAAEA,GAAG,GAAG,IAAIP,MAAM,CAACO,GAAG,CAAC;EAChD,IAAIK,GAAG,GAAGC,EAAE,CAACP,OAAO,CAACC,GAAG,EAAEC,SAAS,CAAC,EAAED,GAAG,CAACE,MAAM,GAAGJ,KAAK,CAAC;EACzD,OAAOc,QAAQ,CAACP,GAAG,EAAEY,QAAQ,EAAEhB,SAAS,CAAC;AAC3C;AAEAkB,MAAM,CAACC,OAAO,GAAG;EAAEJ,IAAI,EAAEA;AAAK,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}