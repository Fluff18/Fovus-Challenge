{"ast":null,"code":"import { HttpRequest as __HttpRequest, isValidHostname as __isValidHostname } from \"@aws-sdk/protocol-http\";\nimport { dateToUtcString as __dateToUtcString, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, expectUnion as __expectUnion, getArrayIfSingleItem as __getArrayIfSingleItem, getValueFromTextNode as __getValueFromTextNode, map as __map, parseBoolean as __parseBoolean, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, parseRfc7231DateTime as __parseRfc7231DateTime, resolvedPath as __resolvedPath, strictParseInt32 as __strictParseInt32, strictParseLong as __strictParseLong, throwDefaultError } from \"@aws-sdk/smithy-client\";\nimport { XmlNode as __XmlNode, XmlText as __XmlText } from \"@aws-sdk/xml-builder\";\nimport { XMLParser } from \"fast-xml-parser\";\nimport { AnalyticsFilter, BucketAlreadyExists, BucketAlreadyOwnedByYou, InvalidObjectState, LifecycleRuleFilter, MetricsFilter, NoSuchBucket, NoSuchKey, NoSuchUpload, NotFound, ObjectNotInActiveTierError, ReplicationRuleFilter } from \"../models/models_0\";\nimport { ObjectAlreadyInActiveTierError } from \"../models/models_1\";\nimport { S3ServiceException as __BaseException } from \"../models/S3ServiceException\";\nexport const serializeAws_restXmlAbortMultipartUploadCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"AbortMultipartUpload\"],\n    uploadId: [, __expectNonNull(input.UploadId, `UploadId`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlCompleteMultipartUploadCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-checksum-crc32\": input.ChecksumCRC32,\n    \"x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n    \"x-amz-checksum-sha1\": input.ChecksumSHA1,\n    \"x-amz-checksum-sha256\": input.ChecksumSHA256,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"CompleteMultipartUpload\"],\n    uploadId: [, __expectNonNull(input.UploadId, `UploadId`)]\n  });\n  let body;\n  if (input.MultipartUpload !== undefined) {\n    body = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);\n  }\n  let contents;\n  if (input.MultipartUpload !== undefined) {\n    contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);\n    contents = contents.withName(\"CompleteMultipartUpload\");\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlCopyObjectCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-acl\": input.ACL,\n    \"cache-control\": input.CacheControl,\n    \"x-amz-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"content-disposition\": input.ContentDisposition,\n    \"content-encoding\": input.ContentEncoding,\n    \"content-language\": input.ContentLanguage,\n    \"content-type\": input.ContentType,\n    \"x-amz-copy-source\": input.CopySource,\n    \"x-amz-copy-source-if-match\": input.CopySourceIfMatch,\n    \"x-amz-copy-source-if-modified-since\": [() => isSerializableHeaderValue(input.CopySourceIfModifiedSince), () => __dateToUtcString(input.CopySourceIfModifiedSince).toString()],\n    \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch,\n    \"x-amz-copy-source-if-unmodified-since\": [() => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince), () => __dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()],\n    expires: [() => isSerializableHeaderValue(input.Expires), () => __dateToUtcString(input.Expires).toString()],\n    \"x-amz-grant-full-control\": input.GrantFullControl,\n    \"x-amz-grant-read\": input.GrantRead,\n    \"x-amz-grant-read-acp\": input.GrantReadACP,\n    \"x-amz-grant-write-acp\": input.GrantWriteACP,\n    \"x-amz-metadata-directive\": input.MetadataDirective,\n    \"x-amz-tagging-directive\": input.TaggingDirective,\n    \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n    \"x-amz-storage-class\": input.StorageClass,\n    \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n    \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n    \"x-amz-server-side-encryption-bucket-key-enabled\": [() => isSerializableHeaderValue(input.BucketKeyEnabled), () => input.BucketKeyEnabled.toString()],\n    \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm,\n    \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey,\n    \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-tagging\": input.Tagging,\n    \"x-amz-object-lock-mode\": input.ObjectLockMode,\n    \"x-amz-object-lock-retain-until-date\": [() => isSerializableHeaderValue(input.ObjectLockRetainUntilDate), () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()],\n    \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner,\n    ...(input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {\n      acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n      return acc;\n    }, {}))\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"CopyObject\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlCreateBucketCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-acl\": input.ACL,\n    \"x-amz-grant-full-control\": input.GrantFullControl,\n    \"x-amz-grant-read\": input.GrantRead,\n    \"x-amz-grant-read-acp\": input.GrantReadACP,\n    \"x-amz-grant-write\": input.GrantWrite,\n    \"x-amz-grant-write-acp\": input.GrantWriteACP,\n    \"x-amz-bucket-object-lock-enabled\": [() => isSerializableHeaderValue(input.ObjectLockEnabledForBucket), () => input.ObjectLockEnabledForBucket.toString()],\n    \"x-amz-object-ownership\": input.ObjectOwnership\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  let body;\n  if (input.CreateBucketConfiguration !== undefined) {\n    body = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);\n  }\n  let contents;\n  if (input.CreateBucketConfiguration !== undefined) {\n    contents = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    body\n  });\n};\nexport const serializeAws_restXmlCreateMultipartUploadCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-acl\": input.ACL,\n    \"cache-control\": input.CacheControl,\n    \"content-disposition\": input.ContentDisposition,\n    \"content-encoding\": input.ContentEncoding,\n    \"content-language\": input.ContentLanguage,\n    \"content-type\": input.ContentType,\n    expires: [() => isSerializableHeaderValue(input.Expires), () => __dateToUtcString(input.Expires).toString()],\n    \"x-amz-grant-full-control\": input.GrantFullControl,\n    \"x-amz-grant-read\": input.GrantRead,\n    \"x-amz-grant-read-acp\": input.GrantReadACP,\n    \"x-amz-grant-write-acp\": input.GrantWriteACP,\n    \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n    \"x-amz-storage-class\": input.StorageClass,\n    \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n    \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n    \"x-amz-server-side-encryption-bucket-key-enabled\": [() => isSerializableHeaderValue(input.BucketKeyEnabled), () => input.BucketKeyEnabled.toString()],\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-tagging\": input.Tagging,\n    \"x-amz-object-lock-mode\": input.ObjectLockMode,\n    \"x-amz-object-lock-retain-until-date\": [() => isSerializableHeaderValue(input.ObjectLockRetainUntilDate), () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()],\n    \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-checksum-algorithm\": input.ChecksumAlgorithm,\n    ...(input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {\n      acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n      return acc;\n    }, {}))\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    uploads: [, \"\"],\n    \"x-id\": [, \"CreateMultipartUpload\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteBucketCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    analytics: [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteBucketCorsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    cors: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteBucketEncryptionCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    encryption: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = {};\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    \"intelligent-tiering\": [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    inventory: [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteBucketLifecycleCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    lifecycle: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    metrics: [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    ownershipControls: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteBucketPolicyCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    policy: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteBucketReplicationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    replication: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteBucketTaggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    tagging: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteBucketWebsiteCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    website: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteObjectCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-mfa\": input.MFA,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-bypass-governance-retention\": [() => isSerializableHeaderValue(input.BypassGovernanceRetention), () => input.BypassGovernanceRetention.toString()],\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"DeleteObject\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteObjectsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-mfa\": input.MFA,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-bypass-governance-retention\": [() => isSerializableHeaderValue(input.BypassGovernanceRetention), () => input.BypassGovernanceRetention.toString()],\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    delete: [, \"\"],\n    \"x-id\": [, \"DeleteObjects\"]\n  });\n  let body;\n  if (input.Delete !== undefined) {\n    body = serializeAws_restXmlDelete(input.Delete, context);\n  }\n  let contents;\n  if (input.Delete !== undefined) {\n    contents = serializeAws_restXmlDelete(input.Delete, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeleteObjectTaggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    tagging: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlDeletePublicAccessBlockCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    publicAccessBlock: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    accelerate: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketAclCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    acl: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    analytics: [, \"\"],\n    \"x-id\": [, \"GetBucketAnalyticsConfiguration\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketCorsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    cors: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketEncryptionCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    encryption: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = {};\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    \"intelligent-tiering\": [, \"\"],\n    \"x-id\": [, \"GetBucketIntelligentTieringConfiguration\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketInventoryConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    inventory: [, \"\"],\n    \"x-id\": [, \"GetBucketInventoryConfiguration\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    lifecycle: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketLocationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    location: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketLoggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    logging: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketMetricsConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    metrics: [, \"\"],\n    \"x-id\": [, \"GetBucketMetricsConfiguration\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketNotificationConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    notification: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketOwnershipControlsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    ownershipControls: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketPolicyCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    policy: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketPolicyStatusCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    policyStatus: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketReplicationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    replication: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketRequestPaymentCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    requestPayment: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketTaggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    tagging: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketVersioningCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    versioning: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetBucketWebsiteCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    website: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetObjectCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"if-match\": input.IfMatch,\n    \"if-modified-since\": [() => isSerializableHeaderValue(input.IfModifiedSince), () => __dateToUtcString(input.IfModifiedSince).toString()],\n    \"if-none-match\": input.IfNoneMatch,\n    \"if-unmodified-since\": [() => isSerializableHeaderValue(input.IfUnmodifiedSince), () => __dateToUtcString(input.IfUnmodifiedSince).toString()],\n    range: input.Range,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-checksum-mode\": input.ChecksumMode\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"GetObject\"],\n    \"response-cache-control\": [, input.ResponseCacheControl],\n    \"response-content-disposition\": [, input.ResponseContentDisposition],\n    \"response-content-encoding\": [, input.ResponseContentEncoding],\n    \"response-content-language\": [, input.ResponseContentLanguage],\n    \"response-content-type\": [, input.ResponseContentType],\n    \"response-expires\": [() => input.ResponseExpires !== void 0, () => __dateToUtcString(input.ResponseExpires).toString()],\n    versionId: [, input.VersionId],\n    partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetObjectAclCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    acl: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetObjectAttributesCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-max-parts\": [() => isSerializableHeaderValue(input.MaxParts), () => input.MaxParts.toString()],\n    \"x-amz-part-number-marker\": input.PartNumberMarker,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-object-attributes\": [() => isSerializableHeaderValue(input.ObjectAttributes), () => (input.ObjectAttributes || []).map(_entry => _entry).join(\", \")]\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    attributes: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetObjectLegalHoldCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"legal-hold\": [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetObjectLockConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    \"object-lock\": [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetObjectRetentionCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    retention: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetObjectTaggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-request-payer\": input.RequestPayer\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    tagging: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetObjectTorrentCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    torrent: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlGetPublicAccessBlockCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    publicAccessBlock: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlHeadBucketCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"HEAD\",\n    headers,\n    path: resolvedPath,\n    body\n  });\n};\nexport const serializeAws_restXmlHeadObjectCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"if-match\": input.IfMatch,\n    \"if-modified-since\": [() => isSerializableHeaderValue(input.IfModifiedSince), () => __dateToUtcString(input.IfModifiedSince).toString()],\n    \"if-none-match\": input.IfNoneMatch,\n    \"if-unmodified-since\": [() => isSerializableHeaderValue(input.IfUnmodifiedSince), () => __dateToUtcString(input.IfUnmodifiedSince).toString()],\n    range: input.Range,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-checksum-mode\": input.ChecksumMode\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    versionId: [, input.VersionId],\n    partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"HEAD\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    analytics: [, \"\"],\n    \"x-id\": [, \"ListBucketAnalyticsConfigurations\"],\n    \"continuation-token\": [, input.ContinuationToken]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = {};\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    \"intelligent-tiering\": [, \"\"],\n    \"x-id\": [, \"ListBucketIntelligentTieringConfigurations\"],\n    \"continuation-token\": [, input.ContinuationToken]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlListBucketInventoryConfigurationsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    inventory: [, \"\"],\n    \"x-id\": [, \"ListBucketInventoryConfigurations\"],\n    \"continuation-token\": [, input.ContinuationToken]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlListBucketMetricsConfigurationsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    metrics: [, \"\"],\n    \"x-id\": [, \"ListBucketMetricsConfigurations\"],\n    \"continuation-token\": [, input.ContinuationToken]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlListBucketsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = {\n    \"content-type\": \"application/xml\"\n  };\n  const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  let body;\n  body = \"\";\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    body\n  });\n};\nexport const serializeAws_restXmlListMultipartUploadsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    uploads: [, \"\"],\n    delimiter: [, input.Delimiter],\n    \"encoding-type\": [, input.EncodingType],\n    \"key-marker\": [, input.KeyMarker],\n    \"max-uploads\": [() => input.MaxUploads !== void 0, () => input.MaxUploads.toString()],\n    prefix: [, input.Prefix],\n    \"upload-id-marker\": [, input.UploadIdMarker]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlListObjectsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    delimiter: [, input.Delimiter],\n    \"encoding-type\": [, input.EncodingType],\n    marker: [, input.Marker],\n    \"max-keys\": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],\n    prefix: [, input.Prefix]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlListObjectsV2Command = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    \"list-type\": [, \"2\"],\n    delimiter: [, input.Delimiter],\n    \"encoding-type\": [, input.EncodingType],\n    \"max-keys\": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],\n    prefix: [, input.Prefix],\n    \"continuation-token\": [, input.ContinuationToken],\n    \"fetch-owner\": [() => input.FetchOwner !== void 0, () => input.FetchOwner.toString()],\n    \"start-after\": [, input.StartAfter]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlListObjectVersionsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    versions: [, \"\"],\n    delimiter: [, input.Delimiter],\n    \"encoding-type\": [, input.EncodingType],\n    \"key-marker\": [, input.KeyMarker],\n    \"max-keys\": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],\n    prefix: [, input.Prefix],\n    \"version-id-marker\": [, input.VersionIdMarker]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlListPartsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"ListParts\"],\n    \"max-parts\": [() => input.MaxParts !== void 0, () => input.MaxParts.toString()],\n    \"part-number-marker\": [, input.PartNumberMarker],\n    uploadId: [, __expectNonNull(input.UploadId, `UploadId`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    accelerate: [, \"\"]\n  });\n  let body;\n  if (input.AccelerateConfiguration !== undefined) {\n    body = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);\n  }\n  let contents;\n  if (input.AccelerateConfiguration !== undefined) {\n    contents = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketAclCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-acl\": input.ACL,\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-grant-full-control\": input.GrantFullControl,\n    \"x-amz-grant-read\": input.GrantRead,\n    \"x-amz-grant-read-acp\": input.GrantReadACP,\n    \"x-amz-grant-write\": input.GrantWrite,\n    \"x-amz-grant-write-acp\": input.GrantWriteACP,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    acl: [, \"\"]\n  });\n  let body;\n  if (input.AccessControlPolicy !== undefined) {\n    body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n  }\n  let contents;\n  if (input.AccessControlPolicy !== undefined) {\n    contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    analytics: [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  if (input.AnalyticsConfiguration !== undefined) {\n    body = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);\n  }\n  let contents;\n  if (input.AnalyticsConfiguration !== undefined) {\n    contents = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketCorsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    cors: [, \"\"]\n  });\n  let body;\n  if (input.CORSConfiguration !== undefined) {\n    body = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);\n  }\n  let contents;\n  if (input.CORSConfiguration !== undefined) {\n    contents = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketEncryptionCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    encryption: [, \"\"]\n  });\n  let body;\n  if (input.ServerSideEncryptionConfiguration !== undefined) {\n    body = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n  }\n  let contents;\n  if (input.ServerSideEncryptionConfiguration !== undefined) {\n    contents = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = {\n    \"content-type\": \"application/xml\"\n  };\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    \"intelligent-tiering\": [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  if (input.IntelligentTieringConfiguration !== undefined) {\n    body = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n  }\n  let contents;\n  if (input.IntelligentTieringConfiguration !== undefined) {\n    contents = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketInventoryConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    inventory: [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  if (input.InventoryConfiguration !== undefined) {\n    body = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);\n  }\n  let contents;\n  if (input.InventoryConfiguration !== undefined) {\n    contents = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    lifecycle: [, \"\"]\n  });\n  let body;\n  if (input.LifecycleConfiguration !== undefined) {\n    body = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n  }\n  let contents;\n  if (input.LifecycleConfiguration !== undefined) {\n    contents = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n    contents = contents.withName(\"LifecycleConfiguration\");\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketLoggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    logging: [, \"\"]\n  });\n  let body;\n  if (input.BucketLoggingStatus !== undefined) {\n    body = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);\n  }\n  let contents;\n  if (input.BucketLoggingStatus !== undefined) {\n    contents = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketMetricsConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    metrics: [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  if (input.MetricsConfiguration !== undefined) {\n    body = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);\n  }\n  let contents;\n  if (input.MetricsConfiguration !== undefined) {\n    contents = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketNotificationConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-skip-destination-validation\": [() => isSerializableHeaderValue(input.SkipDestinationValidation), () => input.SkipDestinationValidation.toString()]\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    notification: [, \"\"]\n  });\n  let body;\n  if (input.NotificationConfiguration !== undefined) {\n    body = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);\n  }\n  let contents;\n  if (input.NotificationConfiguration !== undefined) {\n    contents = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketOwnershipControlsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    ownershipControls: [, \"\"]\n  });\n  let body;\n  if (input.OwnershipControls !== undefined) {\n    body = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);\n  }\n  let contents;\n  if (input.OwnershipControls !== undefined) {\n    contents = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketPolicyCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"text/plain\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-confirm-remove-self-bucket-access\": [() => isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess), () => input.ConfirmRemoveSelfBucketAccess.toString()],\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    policy: [, \"\"]\n  });\n  let body;\n  if (input.Policy !== undefined) {\n    body = input.Policy;\n  }\n  let contents;\n  if (input.Policy !== undefined) {\n    contents = input.Policy;\n    body = contents;\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketReplicationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-bucket-object-lock-token\": input.Token,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    replication: [, \"\"]\n  });\n  let body;\n  if (input.ReplicationConfiguration !== undefined) {\n    body = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);\n  }\n  let contents;\n  if (input.ReplicationConfiguration !== undefined) {\n    contents = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketRequestPaymentCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    requestPayment: [, \"\"]\n  });\n  let body;\n  if (input.RequestPaymentConfiguration !== undefined) {\n    body = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n  }\n  let contents;\n  if (input.RequestPaymentConfiguration !== undefined) {\n    contents = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketTaggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    tagging: [, \"\"]\n  });\n  let body;\n  if (input.Tagging !== undefined) {\n    body = serializeAws_restXmlTagging(input.Tagging, context);\n  }\n  let contents;\n  if (input.Tagging !== undefined) {\n    contents = serializeAws_restXmlTagging(input.Tagging, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketVersioningCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-mfa\": input.MFA,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    versioning: [, \"\"]\n  });\n  let body;\n  if (input.VersioningConfiguration !== undefined) {\n    body = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);\n  }\n  let contents;\n  if (input.VersioningConfiguration !== undefined) {\n    contents = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutBucketWebsiteCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    website: [, \"\"]\n  });\n  let body;\n  if (input.WebsiteConfiguration !== undefined) {\n    body = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);\n  }\n  let contents;\n  if (input.WebsiteConfiguration !== undefined) {\n    contents = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutObjectCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": input.ContentType || \"application/octet-stream\",\n    \"x-amz-acl\": input.ACL,\n    \"cache-control\": input.CacheControl,\n    \"content-disposition\": input.ContentDisposition,\n    \"content-encoding\": input.ContentEncoding,\n    \"content-language\": input.ContentLanguage,\n    \"content-length\": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-checksum-crc32\": input.ChecksumCRC32,\n    \"x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n    \"x-amz-checksum-sha1\": input.ChecksumSHA1,\n    \"x-amz-checksum-sha256\": input.ChecksumSHA256,\n    expires: [() => isSerializableHeaderValue(input.Expires), () => __dateToUtcString(input.Expires).toString()],\n    \"x-amz-grant-full-control\": input.GrantFullControl,\n    \"x-amz-grant-read\": input.GrantRead,\n    \"x-amz-grant-read-acp\": input.GrantReadACP,\n    \"x-amz-grant-write-acp\": input.GrantWriteACP,\n    \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n    \"x-amz-storage-class\": input.StorageClass,\n    \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n    \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n    \"x-amz-server-side-encryption-bucket-key-enabled\": [() => isSerializableHeaderValue(input.BucketKeyEnabled), () => input.BucketKeyEnabled.toString()],\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-tagging\": input.Tagging,\n    \"x-amz-object-lock-mode\": input.ObjectLockMode,\n    \"x-amz-object-lock-retain-until-date\": [() => isSerializableHeaderValue(input.ObjectLockRetainUntilDate), () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()],\n    \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    ...(input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {\n      acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n      return acc;\n    }, {}))\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"PutObject\"]\n  });\n  let body;\n  if (input.Body !== undefined) {\n    body = input.Body;\n  }\n  let contents;\n  if (input.Body !== undefined) {\n    contents = input.Body;\n    body = contents;\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutObjectAclCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-acl\": input.ACL,\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-grant-full-control\": input.GrantFullControl,\n    \"x-amz-grant-read\": input.GrantRead,\n    \"x-amz-grant-read-acp\": input.GrantReadACP,\n    \"x-amz-grant-write\": input.GrantWrite,\n    \"x-amz-grant-write-acp\": input.GrantWriteACP,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    acl: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  if (input.AccessControlPolicy !== undefined) {\n    body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n  }\n  let contents;\n  if (input.AccessControlPolicy !== undefined) {\n    contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutObjectLegalHoldCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"legal-hold\": [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  if (input.LegalHold !== undefined) {\n    body = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);\n  }\n  let contents;\n  if (input.LegalHold !== undefined) {\n    contents = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);\n    contents = contents.withName(\"LegalHold\");\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutObjectLockConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-bucket-object-lock-token\": input.Token,\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    \"object-lock\": [, \"\"]\n  });\n  let body;\n  if (input.ObjectLockConfiguration !== undefined) {\n    body = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);\n  }\n  let contents;\n  if (input.ObjectLockConfiguration !== undefined) {\n    contents = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutObjectRetentionCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-bypass-governance-retention\": [() => isSerializableHeaderValue(input.BypassGovernanceRetention), () => input.BypassGovernanceRetention.toString()],\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    retention: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  if (input.Retention !== undefined) {\n    body = serializeAws_restXmlObjectLockRetention(input.Retention, context);\n  }\n  let contents;\n  if (input.Retention !== undefined) {\n    contents = serializeAws_restXmlObjectLockRetention(input.Retention, context);\n    contents = contents.withName(\"Retention\");\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutObjectTaggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-request-payer\": input.RequestPayer\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    tagging: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  if (input.Tagging !== undefined) {\n    body = serializeAws_restXmlTagging(input.Tagging, context);\n  }\n  let contents;\n  if (input.Tagging !== undefined) {\n    contents = serializeAws_restXmlTagging(input.Tagging, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlPutPublicAccessBlockCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    publicAccessBlock: [, \"\"]\n  });\n  let body;\n  if (input.PublicAccessBlockConfiguration !== undefined) {\n    body = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n  }\n  let contents;\n  if (input.PublicAccessBlockConfiguration !== undefined) {\n    contents = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlRestoreObjectCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    restore: [, \"\"],\n    \"x-id\": [, \"RestoreObject\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  if (input.RestoreRequest !== undefined) {\n    body = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);\n  }\n  let contents;\n  if (input.RestoreRequest !== undefined) {\n    contents = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlSelectObjectContentCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    select: [, \"\"],\n    \"select-type\": [, \"2\"],\n    \"x-id\": [, \"SelectObjectContent\"]\n  });\n  let body;\n  body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n  const bodyNode = new __XmlNode(\"SelectObjectContentRequest\");\n  bodyNode.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n  if (input.Expression !== undefined) {\n    const node = __XmlNode.of(\"Expression\", input.Expression).withName(\"Expression\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpressionType !== undefined) {\n    const node = __XmlNode.of(\"ExpressionType\", input.ExpressionType).withName(\"ExpressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.InputSerialization !== undefined) {\n    const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputSerialization !== undefined) {\n    const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RequestProgress !== undefined) {\n    const node = serializeAws_restXmlRequestProgress(input.RequestProgress, context).withName(\"RequestProgress\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ScanRange !== undefined) {\n    const node = serializeAws_restXmlScanRange(input.ScanRange, context).withName(\"ScanRange\");\n    bodyNode.addChildNode(node);\n  }\n  body += bodyNode.toString();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlUploadPartCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/octet-stream\",\n    \"content-length\": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-checksum-crc32\": input.ChecksumCRC32,\n    \"x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n    \"x-amz-checksum-sha1\": input.ChecksumSHA1,\n    \"x-amz-checksum-sha256\": input.ChecksumSHA256,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"UploadPart\"],\n    partNumber: [__expectNonNull(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],\n    uploadId: [, __expectNonNull(input.UploadId, `UploadId`)]\n  });\n  let body;\n  if (input.Body !== undefined) {\n    body = input.Body;\n  }\n  let contents;\n  if (input.Body !== undefined) {\n    contents = input.Body;\n    body = contents;\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlUploadPartCopyCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-copy-source\": input.CopySource,\n    \"x-amz-copy-source-if-match\": input.CopySourceIfMatch,\n    \"x-amz-copy-source-if-modified-since\": [() => isSerializableHeaderValue(input.CopySourceIfModifiedSince), () => __dateToUtcString(input.CopySourceIfModifiedSince).toString()],\n    \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch,\n    \"x-amz-copy-source-if-unmodified-since\": [() => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince), () => __dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()],\n    \"x-amz-copy-source-range\": input.CopySourceRange,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm,\n    \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey,\n    \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"UploadPartCopy\"],\n    partNumber: [__expectNonNull(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],\n    uploadId: [, __expectNonNull(input.UploadId, `UploadId`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restXmlWriteGetObjectResponseCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-content-sha256\": \"UNSIGNED-PAYLOAD\",\n    \"content-type\": \"application/octet-stream\",\n    \"x-amz-request-route\": input.RequestRoute,\n    \"x-amz-request-token\": input.RequestToken,\n    \"x-amz-fwd-status\": [() => isSerializableHeaderValue(input.StatusCode), () => input.StatusCode.toString()],\n    \"x-amz-fwd-error-code\": input.ErrorCode,\n    \"x-amz-fwd-error-message\": input.ErrorMessage,\n    \"x-amz-fwd-header-accept-ranges\": input.AcceptRanges,\n    \"x-amz-fwd-header-cache-control\": input.CacheControl,\n    \"x-amz-fwd-header-content-disposition\": input.ContentDisposition,\n    \"x-amz-fwd-header-content-encoding\": input.ContentEncoding,\n    \"x-amz-fwd-header-content-language\": input.ContentLanguage,\n    \"content-length\": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],\n    \"x-amz-fwd-header-content-range\": input.ContentRange,\n    \"x-amz-fwd-header-content-type\": input.ContentType,\n    \"x-amz-fwd-header-x-amz-checksum-crc32\": input.ChecksumCRC32,\n    \"x-amz-fwd-header-x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n    \"x-amz-fwd-header-x-amz-checksum-sha1\": input.ChecksumSHA1,\n    \"x-amz-fwd-header-x-amz-checksum-sha256\": input.ChecksumSHA256,\n    \"x-amz-fwd-header-x-amz-delete-marker\": [() => isSerializableHeaderValue(input.DeleteMarker), () => input.DeleteMarker.toString()],\n    \"x-amz-fwd-header-etag\": input.ETag,\n    \"x-amz-fwd-header-expires\": [() => isSerializableHeaderValue(input.Expires), () => __dateToUtcString(input.Expires).toString()],\n    \"x-amz-fwd-header-x-amz-expiration\": input.Expiration,\n    \"x-amz-fwd-header-last-modified\": [() => isSerializableHeaderValue(input.LastModified), () => __dateToUtcString(input.LastModified).toString()],\n    \"x-amz-fwd-header-x-amz-missing-meta\": [() => isSerializableHeaderValue(input.MissingMeta), () => input.MissingMeta.toString()],\n    \"x-amz-fwd-header-x-amz-object-lock-mode\": input.ObjectLockMode,\n    \"x-amz-fwd-header-x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n    \"x-amz-fwd-header-x-amz-object-lock-retain-until-date\": [() => isSerializableHeaderValue(input.ObjectLockRetainUntilDate), () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()],\n    \"x-amz-fwd-header-x-amz-mp-parts-count\": [() => isSerializableHeaderValue(input.PartsCount), () => input.PartsCount.toString()],\n    \"x-amz-fwd-header-x-amz-replication-status\": input.ReplicationStatus,\n    \"x-amz-fwd-header-x-amz-request-charged\": input.RequestCharged,\n    \"x-amz-fwd-header-x-amz-restore\": input.Restore,\n    \"x-amz-fwd-header-x-amz-server-side-encryption\": input.ServerSideEncryption,\n    \"x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n    \"x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-fwd-header-x-amz-storage-class\": input.StorageClass,\n    \"x-amz-fwd-header-x-amz-tagging-count\": [() => isSerializableHeaderValue(input.TagCount), () => input.TagCount.toString()],\n    \"x-amz-fwd-header-x-amz-version-id\": input.VersionId,\n    \"x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled\": [() => isSerializableHeaderValue(input.BucketKeyEnabled), () => input.BucketKeyEnabled.toString()],\n    ...(input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {\n      acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n      return acc;\n    }, {}))\n  });\n  const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/WriteGetObjectResponse\";\n  const query = map({\n    \"x-id\": [, \"WriteGetObjectResponse\"]\n  });\n  let body;\n  if (input.Body !== undefined) {\n    body = input.Body;\n  }\n  let contents;\n  if (input.Body !== undefined) {\n    contents = input.Body;\n    body = contents;\n  }\n  let {\n    hostname: resolvedHostname\n  } = await context.endpoint();\n  if (context.disableHostPrefix !== true) {\n    resolvedHostname = \"{RequestRoute}.\" + resolvedHostname;\n    if (input.RequestRoute === undefined) {\n      throw new Error(\"Empty value provided for input host prefix: RequestRoute.\");\n    }\n    resolvedHostname = resolvedHostname.replace(\"{RequestRoute}\", input.RequestRoute);\n    if (!__isValidHostname(resolvedHostname)) {\n      throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n    }\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname: resolvedHostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const deserializeAws_restXmlAbortMultipartUploadCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlAbortMultipartUploadCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlAbortMultipartUploadCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchUpload\":\n    case \"com.amazonaws.s3#NoSuchUpload\":\n      throw await deserializeAws_restXmlNoSuchUploadResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_restXmlCompleteMultipartUploadCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    Expiration: [, output.headers[\"x-amz-expiration\"]],\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    VersionId: [, output.headers[\"x-amz-version-id\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = __expectString(data[\"Bucket\"]);\n  }\n  if (data[\"ChecksumCRC32\"] !== undefined) {\n    contents.ChecksumCRC32 = __expectString(data[\"ChecksumCRC32\"]);\n  }\n  if (data[\"ChecksumCRC32C\"] !== undefined) {\n    contents.ChecksumCRC32C = __expectString(data[\"ChecksumCRC32C\"]);\n  }\n  if (data[\"ChecksumSHA1\"] !== undefined) {\n    contents.ChecksumSHA1 = __expectString(data[\"ChecksumSHA1\"]);\n  }\n  if (data[\"ChecksumSHA256\"] !== undefined) {\n    contents.ChecksumSHA256 = __expectString(data[\"ChecksumSHA256\"]);\n  }\n  if (data[\"ETag\"] !== undefined) {\n    contents.ETag = __expectString(data[\"ETag\"]);\n  }\n  if (data[\"Key\"] !== undefined) {\n    contents.Key = __expectString(data[\"Key\"]);\n  }\n  if (data[\"Location\"] !== undefined) {\n    contents.Location = __expectString(data[\"Location\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlCompleteMultipartUploadCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlCopyObjectCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCopyObjectCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    Expiration: [, output.headers[\"x-amz-expiration\"]],\n    CopySourceVersionId: [, output.headers[\"x-amz-copy-source-version-id\"]],\n    VersionId: [, output.headers[\"x-amz-version-id\"]],\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n    SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    SSEKMSEncryptionContext: [, output.headers[\"x-amz-server-side-encryption-context\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.CopyObjectResult = deserializeAws_restXmlCopyObjectResult(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlCopyObjectCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ObjectNotInActiveTierError\":\n    case \"com.amazonaws.s3#ObjectNotInActiveTierError\":\n      throw await deserializeAws_restXmlObjectNotInActiveTierErrorResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_restXmlCreateBucketCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCreateBucketCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    Location: [, output.headers[\"location\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlCreateBucketCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BucketAlreadyExists\":\n    case \"com.amazonaws.s3#BucketAlreadyExists\":\n      throw await deserializeAws_restXmlBucketAlreadyExistsResponse(parsedOutput, context);\n    case \"BucketAlreadyOwnedByYou\":\n    case \"com.amazonaws.s3#BucketAlreadyOwnedByYou\":\n      throw await deserializeAws_restXmlBucketAlreadyOwnedByYouResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_restXmlCreateMultipartUploadCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCreateMultipartUploadCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    AbortDate: [() => void 0 !== output.headers[\"x-amz-abort-date\"], () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"x-amz-abort-date\"]))],\n    AbortRuleId: [, output.headers[\"x-amz-abort-rule-id\"]],\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n    SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    SSEKMSEncryptionContext: [, output.headers[\"x-amz-server-side-encryption-context\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    ChecksumAlgorithm: [, output.headers[\"x-amz-checksum-algorithm\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = __expectString(data[\"Bucket\"]);\n  }\n  if (data[\"Key\"] !== undefined) {\n    contents.Key = __expectString(data[\"Key\"]);\n  }\n  if (data[\"UploadId\"] !== undefined) {\n    contents.UploadId = __expectString(data[\"UploadId\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlCreateMultipartUploadCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteBucketCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeleteBucketCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteBucketCorsCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketCorsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeleteBucketCorsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteBucketEncryptionCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketEncryptionCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeleteBucketEncryptionCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteBucketLifecycleCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketLifecycleCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeleteBucketLifecycleCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteBucketPolicyCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketPolicyCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeleteBucketPolicyCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteBucketReplicationCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketReplicationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeleteBucketReplicationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteBucketTaggingCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketTaggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeleteBucketTaggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteBucketWebsiteCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketWebsiteCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeleteBucketWebsiteCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteObjectCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteObjectCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    DeleteMarker: [() => void 0 !== output.headers[\"x-amz-delete-marker\"], () => __parseBoolean(output.headers[\"x-amz-delete-marker\"])],\n    VersionId: [, output.headers[\"x-amz-version-id\"]],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeleteObjectCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteObjectsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteObjectsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.Deleted === \"\") {\n    contents.Deleted = [];\n  } else if (data[\"Deleted\"] !== undefined) {\n    contents.Deleted = deserializeAws_restXmlDeletedObjects(__getArrayIfSingleItem(data[\"Deleted\"]), context);\n  }\n  if (data.Error === \"\") {\n    contents.Errors = [];\n  } else if (data[\"Error\"] !== undefined) {\n    contents.Errors = deserializeAws_restXmlErrors(__getArrayIfSingleItem(data[\"Error\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlDeleteObjectsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeleteObjectTaggingCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteObjectTaggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    VersionId: [, output.headers[\"x-amz-version-id\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeleteObjectTaggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlDeletePublicAccessBlockCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeletePublicAccessBlockCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlDeletePublicAccessBlockCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"Status\"] !== undefined) {\n    contents.Status = __expectString(data[\"Status\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketAclCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketAclCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.AccessControlList === \"\") {\n    contents.Grants = [];\n  } else if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n    contents.Grants = deserializeAws_restXmlGrants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketAclCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.AnalyticsConfiguration = deserializeAws_restXmlAnalyticsConfiguration(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketCorsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketCorsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.CORSRule === \"\") {\n    contents.CORSRules = [];\n  } else if (data[\"CORSRule\"] !== undefined) {\n    contents.CORSRules = deserializeAws_restXmlCORSRules(__getArrayIfSingleItem(data[\"CORSRule\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketCorsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketEncryptionCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketEncryptionCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.ServerSideEncryptionConfiguration = deserializeAws_restXmlServerSideEncryptionConfiguration(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketEncryptionCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.IntelligentTieringConfiguration = deserializeAws_restXmlIntelligentTieringConfiguration(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketInventoryConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketInventoryConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.InventoryConfiguration = deserializeAws_restXmlInventoryConfiguration(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketInventoryConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.Rule === \"\") {\n    contents.Rules = [];\n  } else if (data[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlLifecycleRules(__getArrayIfSingleItem(data[\"Rule\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketLocationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketLocationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"LocationConstraint\"] !== undefined) {\n    contents.LocationConstraint = __expectString(data[\"LocationConstraint\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketLocationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketLoggingCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketLoggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"LoggingEnabled\"] !== undefined) {\n    contents.LoggingEnabled = deserializeAws_restXmlLoggingEnabled(data[\"LoggingEnabled\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketLoggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketMetricsConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketMetricsConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.MetricsConfiguration = deserializeAws_restXmlMetricsConfiguration(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketMetricsConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketNotificationConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketNotificationConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"EventBridgeConfiguration\"] !== undefined) {\n    contents.EventBridgeConfiguration = deserializeAws_restXmlEventBridgeConfiguration(data[\"EventBridgeConfiguration\"], context);\n  }\n  if (data.CloudFunctionConfiguration === \"\") {\n    contents.LambdaFunctionConfigurations = [];\n  } else if (data[\"CloudFunctionConfiguration\"] !== undefined) {\n    contents.LambdaFunctionConfigurations = deserializeAws_restXmlLambdaFunctionConfigurationList(__getArrayIfSingleItem(data[\"CloudFunctionConfiguration\"]), context);\n  }\n  if (data.QueueConfiguration === \"\") {\n    contents.QueueConfigurations = [];\n  } else if (data[\"QueueConfiguration\"] !== undefined) {\n    contents.QueueConfigurations = deserializeAws_restXmlQueueConfigurationList(__getArrayIfSingleItem(data[\"QueueConfiguration\"]), context);\n  }\n  if (data.TopicConfiguration === \"\") {\n    contents.TopicConfigurations = [];\n  } else if (data[\"TopicConfiguration\"] !== undefined) {\n    contents.TopicConfigurations = deserializeAws_restXmlTopicConfigurationList(__getArrayIfSingleItem(data[\"TopicConfiguration\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketNotificationConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketOwnershipControlsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketOwnershipControlsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.OwnershipControls = deserializeAws_restXmlOwnershipControls(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketOwnershipControlsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketPolicyCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketPolicyCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = await collectBodyString(output.body, context);\n  contents.Policy = __expectString(data);\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketPolicyCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketPolicyStatusCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketPolicyStatusCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.PolicyStatus = deserializeAws_restXmlPolicyStatus(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketPolicyStatusCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketReplicationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketReplicationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.ReplicationConfiguration = deserializeAws_restXmlReplicationConfiguration(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketReplicationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketRequestPaymentCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketRequestPaymentCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"Payer\"] !== undefined) {\n    contents.Payer = __expectString(data[\"Payer\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketRequestPaymentCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketTaggingCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketTaggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.TagSet === \"\") {\n    contents.TagSet = [];\n  } else if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n    contents.TagSet = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketTaggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketVersioningCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketVersioningCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"MfaDelete\"] !== undefined) {\n    contents.MFADelete = __expectString(data[\"MfaDelete\"]);\n  }\n  if (data[\"Status\"] !== undefined) {\n    contents.Status = __expectString(data[\"Status\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketVersioningCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetBucketWebsiteCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketWebsiteCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"ErrorDocument\"] !== undefined) {\n    contents.ErrorDocument = deserializeAws_restXmlErrorDocument(data[\"ErrorDocument\"], context);\n  }\n  if (data[\"IndexDocument\"] !== undefined) {\n    contents.IndexDocument = deserializeAws_restXmlIndexDocument(data[\"IndexDocument\"], context);\n  }\n  if (data[\"RedirectAllRequestsTo\"] !== undefined) {\n    contents.RedirectAllRequestsTo = deserializeAws_restXmlRedirectAllRequestsTo(data[\"RedirectAllRequestsTo\"], context);\n  }\n  if (data.RoutingRules === \"\") {\n    contents.RoutingRules = [];\n  } else if (data[\"RoutingRules\"] !== undefined && data[\"RoutingRules\"][\"RoutingRule\"] !== undefined) {\n    contents.RoutingRules = deserializeAws_restXmlRoutingRules(__getArrayIfSingleItem(data[\"RoutingRules\"][\"RoutingRule\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGetBucketWebsiteCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetObjectCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    DeleteMarker: [() => void 0 !== output.headers[\"x-amz-delete-marker\"], () => __parseBoolean(output.headers[\"x-amz-delete-marker\"])],\n    AcceptRanges: [, output.headers[\"accept-ranges\"]],\n    Expiration: [, output.headers[\"x-amz-expiration\"]],\n    Restore: [, output.headers[\"x-amz-restore\"]],\n    LastModified: [() => void 0 !== output.headers[\"last-modified\"], () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"last-modified\"]))],\n    ContentLength: [() => void 0 !== output.headers[\"content-length\"], () => __strictParseLong(output.headers[\"content-length\"])],\n    ETag: [, output.headers[\"etag\"]],\n    ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n    ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n    ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n    ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n    MissingMeta: [() => void 0 !== output.headers[\"x-amz-missing-meta\"], () => __strictParseInt32(output.headers[\"x-amz-missing-meta\"])],\n    VersionId: [, output.headers[\"x-amz-version-id\"]],\n    CacheControl: [, output.headers[\"cache-control\"]],\n    ContentDisposition: [, output.headers[\"content-disposition\"]],\n    ContentEncoding: [, output.headers[\"content-encoding\"]],\n    ContentLanguage: [, output.headers[\"content-language\"]],\n    ContentRange: [, output.headers[\"content-range\"]],\n    ContentType: [, output.headers[\"content-type\"]],\n    Expires: [() => void 0 !== output.headers[\"expires\"], () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"expires\"]))],\n    WebsiteRedirectLocation: [, output.headers[\"x-amz-website-redirect-location\"]],\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n    SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    StorageClass: [, output.headers[\"x-amz-storage-class\"]],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    ReplicationStatus: [, output.headers[\"x-amz-replication-status\"]],\n    PartsCount: [() => void 0 !== output.headers[\"x-amz-mp-parts-count\"], () => __strictParseInt32(output.headers[\"x-amz-mp-parts-count\"])],\n    TagCount: [() => void 0 !== output.headers[\"x-amz-tagging-count\"], () => __strictParseInt32(output.headers[\"x-amz-tagging-count\"])],\n    ObjectLockMode: [, output.headers[\"x-amz-object-lock-mode\"]],\n    ObjectLockRetainUntilDate: [() => void 0 !== output.headers[\"x-amz-object-lock-retain-until-date\"], () => __expectNonNull(__parseRfc3339DateTimeWithOffset(output.headers[\"x-amz-object-lock-retain-until-date\"]))],\n    ObjectLockLegalHoldStatus: [, output.headers[\"x-amz-object-lock-legal-hold\"]],\n    Metadata: [, Object.keys(output.headers).filter(header => header.startsWith(\"x-amz-meta-\")).reduce((acc, header) => {\n      acc[header.substring(11)] = output.headers[header];\n      return acc;\n    }, {})]\n  });\n  const data = output.body;\n  context.sdkStreamMixin(data);\n  contents.Body = data;\n  return contents;\n};\nconst deserializeAws_restXmlGetObjectCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidObjectState\":\n    case \"com.amazonaws.s3#InvalidObjectState\":\n      throw await deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput, context);\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_restXmlGetObjectAclCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectAclCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.AccessControlList === \"\") {\n    contents.Grants = [];\n  } else if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n    contents.Grants = deserializeAws_restXmlGrants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGetObjectAclCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_restXmlGetObjectAttributesCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectAttributesCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    DeleteMarker: [() => void 0 !== output.headers[\"x-amz-delete-marker\"], () => __parseBoolean(output.headers[\"x-amz-delete-marker\"])],\n    LastModified: [() => void 0 !== output.headers[\"last-modified\"], () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"last-modified\"]))],\n    VersionId: [, output.headers[\"x-amz-version-id\"]],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"Checksum\"] !== undefined) {\n    contents.Checksum = deserializeAws_restXmlChecksum(data[\"Checksum\"], context);\n  }\n  if (data[\"ETag\"] !== undefined) {\n    contents.ETag = __expectString(data[\"ETag\"]);\n  }\n  if (data[\"ObjectParts\"] !== undefined) {\n    contents.ObjectParts = deserializeAws_restXmlGetObjectAttributesParts(data[\"ObjectParts\"], context);\n  }\n  if (data[\"ObjectSize\"] !== undefined) {\n    contents.ObjectSize = __strictParseLong(data[\"ObjectSize\"]);\n  }\n  if (data[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(data[\"StorageClass\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGetObjectAttributesCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_restXmlGetObjectLegalHoldCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectLegalHoldCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.LegalHold = deserializeAws_restXmlObjectLockLegalHold(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlGetObjectLegalHoldCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetObjectLockConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectLockConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.ObjectLockConfiguration = deserializeAws_restXmlObjectLockConfiguration(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlGetObjectLockConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetObjectRetentionCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectRetentionCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.Retention = deserializeAws_restXmlObjectLockRetention(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlGetObjectRetentionCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetObjectTaggingCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectTaggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    VersionId: [, output.headers[\"x-amz-version-id\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.TagSet === \"\") {\n    contents.TagSet = [];\n  } else if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n    contents.TagSet = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGetObjectTaggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetObjectTorrentCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectTorrentCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = output.body;\n  context.sdkStreamMixin(data);\n  contents.Body = data;\n  return contents;\n};\nconst deserializeAws_restXmlGetObjectTorrentCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlGetPublicAccessBlockCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetPublicAccessBlockCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.PublicAccessBlockConfiguration = deserializeAws_restXmlPublicAccessBlockConfiguration(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlGetPublicAccessBlockCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlHeadBucketCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlHeadBucketCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlHeadBucketCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NotFound\":\n    case \"com.amazonaws.s3#NotFound\":\n      throw await deserializeAws_restXmlNotFoundResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_restXmlHeadObjectCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlHeadObjectCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    DeleteMarker: [() => void 0 !== output.headers[\"x-amz-delete-marker\"], () => __parseBoolean(output.headers[\"x-amz-delete-marker\"])],\n    AcceptRanges: [, output.headers[\"accept-ranges\"]],\n    Expiration: [, output.headers[\"x-amz-expiration\"]],\n    Restore: [, output.headers[\"x-amz-restore\"]],\n    ArchiveStatus: [, output.headers[\"x-amz-archive-status\"]],\n    LastModified: [() => void 0 !== output.headers[\"last-modified\"], () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"last-modified\"]))],\n    ContentLength: [() => void 0 !== output.headers[\"content-length\"], () => __strictParseLong(output.headers[\"content-length\"])],\n    ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n    ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n    ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n    ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n    ETag: [, output.headers[\"etag\"]],\n    MissingMeta: [() => void 0 !== output.headers[\"x-amz-missing-meta\"], () => __strictParseInt32(output.headers[\"x-amz-missing-meta\"])],\n    VersionId: [, output.headers[\"x-amz-version-id\"]],\n    CacheControl: [, output.headers[\"cache-control\"]],\n    ContentDisposition: [, output.headers[\"content-disposition\"]],\n    ContentEncoding: [, output.headers[\"content-encoding\"]],\n    ContentLanguage: [, output.headers[\"content-language\"]],\n    ContentType: [, output.headers[\"content-type\"]],\n    Expires: [() => void 0 !== output.headers[\"expires\"], () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"expires\"]))],\n    WebsiteRedirectLocation: [, output.headers[\"x-amz-website-redirect-location\"]],\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n    SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    StorageClass: [, output.headers[\"x-amz-storage-class\"]],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    ReplicationStatus: [, output.headers[\"x-amz-replication-status\"]],\n    PartsCount: [() => void 0 !== output.headers[\"x-amz-mp-parts-count\"], () => __strictParseInt32(output.headers[\"x-amz-mp-parts-count\"])],\n    ObjectLockMode: [, output.headers[\"x-amz-object-lock-mode\"]],\n    ObjectLockRetainUntilDate: [() => void 0 !== output.headers[\"x-amz-object-lock-retain-until-date\"], () => __expectNonNull(__parseRfc3339DateTimeWithOffset(output.headers[\"x-amz-object-lock-retain-until-date\"]))],\n    ObjectLockLegalHoldStatus: [, output.headers[\"x-amz-object-lock-legal-hold\"]],\n    Metadata: [, Object.keys(output.headers).filter(header => header.startsWith(\"x-amz-meta-\")).reduce((acc, header) => {\n      acc[header.substring(11)] = output.headers[header];\n      return acc;\n    }, {})]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlHeadObjectCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NotFound\":\n    case \"com.amazonaws.s3#NotFound\":\n      throw await deserializeAws_restXmlNotFoundResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.AnalyticsConfiguration === \"\") {\n    contents.AnalyticsConfigurationList = [];\n  } else if (data[\"AnalyticsConfiguration\"] !== undefined) {\n    contents.AnalyticsConfigurationList = deserializeAws_restXmlAnalyticsConfigurationList(__getArrayIfSingleItem(data[\"AnalyticsConfiguration\"]), context);\n  }\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n  }\n  if (data.IntelligentTieringConfiguration === \"\") {\n    contents.IntelligentTieringConfigurationList = [];\n  } else if (data[\"IntelligentTieringConfiguration\"] !== undefined) {\n    contents.IntelligentTieringConfigurationList = deserializeAws_restXmlIntelligentTieringConfigurationList(__getArrayIfSingleItem(data[\"IntelligentTieringConfiguration\"]), context);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlListBucketInventoryConfigurationsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketInventoryConfigurationsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n  }\n  if (data.InventoryConfiguration === \"\") {\n    contents.InventoryConfigurationList = [];\n  } else if (data[\"InventoryConfiguration\"] !== undefined) {\n    contents.InventoryConfigurationList = deserializeAws_restXmlInventoryConfigurationList(__getArrayIfSingleItem(data[\"InventoryConfiguration\"]), context);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlListBucketInventoryConfigurationsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlListBucketMetricsConfigurationsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketMetricsConfigurationsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data.MetricsConfiguration === \"\") {\n    contents.MetricsConfigurationList = [];\n  } else if (data[\"MetricsConfiguration\"] !== undefined) {\n    contents.MetricsConfigurationList = deserializeAws_restXmlMetricsConfigurationList(__getArrayIfSingleItem(data[\"MetricsConfiguration\"]), context);\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlListBucketMetricsConfigurationsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlListBucketsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.Buckets === \"\") {\n    contents.Buckets = [];\n  } else if (data[\"Buckets\"] !== undefined && data[\"Buckets\"][\"Bucket\"] !== undefined) {\n    contents.Buckets = deserializeAws_restXmlBuckets(__getArrayIfSingleItem(data[\"Buckets\"][\"Bucket\"]), context);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlListBucketsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlListMultipartUploadsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListMultipartUploadsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = __expectString(data[\"Bucket\"]);\n  }\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  } else if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = __expectString(data[\"Delimiter\"]);\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = __expectString(data[\"EncodingType\"]);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"KeyMarker\"] !== undefined) {\n    contents.KeyMarker = __expectString(data[\"KeyMarker\"]);\n  }\n  if (data[\"MaxUploads\"] !== undefined) {\n    contents.MaxUploads = __strictParseInt32(data[\"MaxUploads\"]);\n  }\n  if (data[\"NextKeyMarker\"] !== undefined) {\n    contents.NextKeyMarker = __expectString(data[\"NextKeyMarker\"]);\n  }\n  if (data[\"NextUploadIdMarker\"] !== undefined) {\n    contents.NextUploadIdMarker = __expectString(data[\"NextUploadIdMarker\"]);\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(data[\"Prefix\"]);\n  }\n  if (data[\"UploadIdMarker\"] !== undefined) {\n    contents.UploadIdMarker = __expectString(data[\"UploadIdMarker\"]);\n  }\n  if (data.Upload === \"\") {\n    contents.Uploads = [];\n  } else if (data[\"Upload\"] !== undefined) {\n    contents.Uploads = deserializeAws_restXmlMultipartUploadList(__getArrayIfSingleItem(data[\"Upload\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlListMultipartUploadsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlListObjectsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListObjectsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  } else if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n  }\n  if (data.Contents === \"\") {\n    contents.Contents = [];\n  } else if (data[\"Contents\"] !== undefined) {\n    contents.Contents = deserializeAws_restXmlObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = __expectString(data[\"Delimiter\"]);\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = __expectString(data[\"EncodingType\"]);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"Marker\"] !== undefined) {\n    contents.Marker = __expectString(data[\"Marker\"]);\n  }\n  if (data[\"MaxKeys\"] !== undefined) {\n    contents.MaxKeys = __strictParseInt32(data[\"MaxKeys\"]);\n  }\n  if (data[\"Name\"] !== undefined) {\n    contents.Name = __expectString(data[\"Name\"]);\n  }\n  if (data[\"NextMarker\"] !== undefined) {\n    contents.NextMarker = __expectString(data[\"NextMarker\"]);\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(data[\"Prefix\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlListObjectsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchBucket\":\n    case \"com.amazonaws.s3#NoSuchBucket\":\n      throw await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_restXmlListObjectsV2Command = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListObjectsV2CommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  } else if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n  }\n  if (data.Contents === \"\") {\n    contents.Contents = [];\n  } else if (data[\"Contents\"] !== undefined) {\n    contents.Contents = deserializeAws_restXmlObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n  }\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = __expectString(data[\"Delimiter\"]);\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = __expectString(data[\"EncodingType\"]);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"KeyCount\"] !== undefined) {\n    contents.KeyCount = __strictParseInt32(data[\"KeyCount\"]);\n  }\n  if (data[\"MaxKeys\"] !== undefined) {\n    contents.MaxKeys = __strictParseInt32(data[\"MaxKeys\"]);\n  }\n  if (data[\"Name\"] !== undefined) {\n    contents.Name = __expectString(data[\"Name\"]);\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(data[\"Prefix\"]);\n  }\n  if (data[\"StartAfter\"] !== undefined) {\n    contents.StartAfter = __expectString(data[\"StartAfter\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlListObjectsV2CommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchBucket\":\n    case \"com.amazonaws.s3#NoSuchBucket\":\n      throw await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_restXmlListObjectVersionsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListObjectVersionsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  } else if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n  }\n  if (data.DeleteMarker === \"\") {\n    contents.DeleteMarkers = [];\n  } else if (data[\"DeleteMarker\"] !== undefined) {\n    contents.DeleteMarkers = deserializeAws_restXmlDeleteMarkers(__getArrayIfSingleItem(data[\"DeleteMarker\"]), context);\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = __expectString(data[\"Delimiter\"]);\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = __expectString(data[\"EncodingType\"]);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"KeyMarker\"] !== undefined) {\n    contents.KeyMarker = __expectString(data[\"KeyMarker\"]);\n  }\n  if (data[\"MaxKeys\"] !== undefined) {\n    contents.MaxKeys = __strictParseInt32(data[\"MaxKeys\"]);\n  }\n  if (data[\"Name\"] !== undefined) {\n    contents.Name = __expectString(data[\"Name\"]);\n  }\n  if (data[\"NextKeyMarker\"] !== undefined) {\n    contents.NextKeyMarker = __expectString(data[\"NextKeyMarker\"]);\n  }\n  if (data[\"NextVersionIdMarker\"] !== undefined) {\n    contents.NextVersionIdMarker = __expectString(data[\"NextVersionIdMarker\"]);\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(data[\"Prefix\"]);\n  }\n  if (data[\"VersionIdMarker\"] !== undefined) {\n    contents.VersionIdMarker = __expectString(data[\"VersionIdMarker\"]);\n  }\n  if (data.Version === \"\") {\n    contents.Versions = [];\n  } else if (data[\"Version\"] !== undefined) {\n    contents.Versions = deserializeAws_restXmlObjectVersionList(__getArrayIfSingleItem(data[\"Version\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlListObjectVersionsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlListPartsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListPartsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    AbortDate: [() => void 0 !== output.headers[\"x-amz-abort-date\"], () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"x-amz-abort-date\"]))],\n    AbortRuleId: [, output.headers[\"x-amz-abort-rule-id\"]],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = __expectString(data[\"Bucket\"]);\n  }\n  if (data[\"ChecksumAlgorithm\"] !== undefined) {\n    contents.ChecksumAlgorithm = __expectString(data[\"ChecksumAlgorithm\"]);\n  }\n  if (data[\"Initiator\"] !== undefined) {\n    contents.Initiator = deserializeAws_restXmlInitiator(data[\"Initiator\"], context);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"Key\"] !== undefined) {\n    contents.Key = __expectString(data[\"Key\"]);\n  }\n  if (data[\"MaxParts\"] !== undefined) {\n    contents.MaxParts = __strictParseInt32(data[\"MaxParts\"]);\n  }\n  if (data[\"NextPartNumberMarker\"] !== undefined) {\n    contents.NextPartNumberMarker = __expectString(data[\"NextPartNumberMarker\"]);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  if (data[\"PartNumberMarker\"] !== undefined) {\n    contents.PartNumberMarker = __expectString(data[\"PartNumberMarker\"]);\n  }\n  if (data.Part === \"\") {\n    contents.Parts = [];\n  } else if (data[\"Part\"] !== undefined) {\n    contents.Parts = deserializeAws_restXmlParts(__getArrayIfSingleItem(data[\"Part\"]), context);\n  }\n  if (data[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(data[\"StorageClass\"]);\n  }\n  if (data[\"UploadId\"] !== undefined) {\n    contents.UploadId = __expectString(data[\"UploadId\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlListPartsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketAclCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketAclCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketAclCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketCorsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketCorsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketCorsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketEncryptionCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketEncryptionCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketEncryptionCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketInventoryConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketInventoryConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketInventoryConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketLoggingCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketLoggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketLoggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketMetricsConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketMetricsConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketMetricsConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketNotificationConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketNotificationConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketNotificationConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketOwnershipControlsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketOwnershipControlsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketOwnershipControlsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketPolicyCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketPolicyCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketPolicyCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketReplicationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketReplicationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketReplicationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketRequestPaymentCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketRequestPaymentCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketRequestPaymentCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketTaggingCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketTaggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketTaggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketVersioningCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketVersioningCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketVersioningCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutBucketWebsiteCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketWebsiteCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutBucketWebsiteCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutObjectCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    Expiration: [, output.headers[\"x-amz-expiration\"]],\n    ETag: [, output.headers[\"etag\"]],\n    ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n    ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n    ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n    ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    VersionId: [, output.headers[\"x-amz-version-id\"]],\n    SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n    SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    SSEKMSEncryptionContext: [, output.headers[\"x-amz-server-side-encryption-context\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutObjectCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutObjectAclCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectAclCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutObjectAclCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_restXmlPutObjectLegalHoldCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectLegalHoldCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutObjectLegalHoldCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutObjectLockConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectLockConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutObjectLockConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutObjectRetentionCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectRetentionCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutObjectRetentionCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutObjectTaggingCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectTaggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    VersionId: [, output.headers[\"x-amz-version-id\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutObjectTaggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlPutPublicAccessBlockCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutPublicAccessBlockCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlPutPublicAccessBlockCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlRestoreObjectCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlRestoreObjectCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    RestoreOutputPath: [, output.headers[\"x-amz-restore-output-path\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlRestoreObjectCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ObjectAlreadyInActiveTierError\":\n    case \"com.amazonaws.s3#ObjectAlreadyInActiveTierError\":\n      throw await deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_restXmlSelectObjectContentCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlSelectObjectContentCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = output.body;\n  contents.Payload = deserializeAws_restXmlSelectObjectContentEventStream(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlSelectObjectContentCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlUploadPartCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlUploadPartCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    ETag: [, output.headers[\"etag\"]],\n    ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n    ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n    ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n    ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n    SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n    SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlUploadPartCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlUploadPartCopyCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlUploadPartCopyCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    CopySourceVersionId: [, output.headers[\"x-amz-copy-source-version-id\"]],\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n    SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.CopyPartResult = deserializeAws_restXmlCopyPartResult(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlUploadPartCopyCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_restXmlWriteGetObjectResponseCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlWriteGetObjectResponseCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlWriteGetObjectResponseCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nconst map = __map;\nconst deserializeAws_restXmlBucketAlreadyExistsResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new BucketAlreadyExists({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlBucketAlreadyOwnedByYouResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new BucketAlreadyOwnedByYou({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlInvalidObjectStateResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  if (data[\"AccessTier\"] !== undefined) {\n    contents.AccessTier = __expectString(data[\"AccessTier\"]);\n  }\n  if (data[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(data[\"StorageClass\"]);\n  }\n  const exception = new InvalidObjectState({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlNoSuchBucketResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new NoSuchBucket({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlNoSuchKeyResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new NoSuchKey({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlNoSuchUploadResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new NoSuchUpload({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlNotFoundResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new NotFound({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new ObjectAlreadyInActiveTierError({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlObjectNotInActiveTierErrorResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new ObjectNotInActiveTierError({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlSelectObjectContentEventStream = (output, context) => {\n  return context.eventStreamMarshaller.deserialize(output, async event => {\n    if (event[\"Records\"] != null) {\n      return {\n        Records: await deserializeAws_restXmlRecordsEvent_event(event[\"Records\"], context)\n      };\n    }\n    if (event[\"Stats\"] != null) {\n      return {\n        Stats: await deserializeAws_restXmlStatsEvent_event(event[\"Stats\"], context)\n      };\n    }\n    if (event[\"Progress\"] != null) {\n      return {\n        Progress: await deserializeAws_restXmlProgressEvent_event(event[\"Progress\"], context)\n      };\n    }\n    if (event[\"Cont\"] != null) {\n      return {\n        Cont: await deserializeAws_restXmlContinuationEvent_event(event[\"Cont\"], context)\n      };\n    }\n    if (event[\"End\"] != null) {\n      return {\n        End: await deserializeAws_restXmlEndEvent_event(event[\"End\"], context)\n      };\n    }\n    return {\n      $unknown: output\n    };\n  });\n};\nconst deserializeAws_restXmlContinuationEvent_event = async (output, context) => {\n  const contents = {};\n  const data = await parseBody(output.body, context);\n  Object.assign(contents, deserializeAws_restXmlContinuationEvent(data, context));\n  return contents;\n};\nconst deserializeAws_restXmlEndEvent_event = async (output, context) => {\n  const contents = {};\n  const data = await parseBody(output.body, context);\n  Object.assign(contents, deserializeAws_restXmlEndEvent(data, context));\n  return contents;\n};\nconst deserializeAws_restXmlProgressEvent_event = async (output, context) => {\n  const contents = {};\n  const data = await parseBody(output.body, context);\n  contents.Details = deserializeAws_restXmlProgress(data, context);\n  return contents;\n};\nconst deserializeAws_restXmlRecordsEvent_event = async (output, context) => {\n  const contents = {};\n  contents.Payload = output.body;\n  return contents;\n};\nconst deserializeAws_restXmlStatsEvent_event = async (output, context) => {\n  const contents = {};\n  const data = await parseBody(output.body, context);\n  contents.Details = deserializeAws_restXmlStats(data, context);\n  return contents;\n};\nconst serializeAws_restXmlAbortIncompleteMultipartUpload = (input, context) => {\n  const bodyNode = new __XmlNode(\"AbortIncompleteMultipartUpload\");\n  if (input.DaysAfterInitiation != null) {\n    const node = __XmlNode.of(\"DaysAfterInitiation\", String(input.DaysAfterInitiation)).withName(\"DaysAfterInitiation\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlAccelerateConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"AccelerateConfiguration\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"BucketAccelerateStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlAccessControlPolicy = (input, context) => {\n  const bodyNode = new __XmlNode(\"AccessControlPolicy\");\n  if (input.Grants != null) {\n    const nodes = serializeAws_restXmlGrants(input.Grants, context);\n    const containerNode = new __XmlNode(\"AccessControlList\");\n    nodes.map(node => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.Owner != null) {\n    const node = serializeAws_restXmlOwner(input.Owner, context).withName(\"Owner\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlAccessControlTranslation = (input, context) => {\n  const bodyNode = new __XmlNode(\"AccessControlTranslation\");\n  if (input.Owner != null) {\n    const node = __XmlNode.of(\"OwnerOverride\", input.Owner).withName(\"Owner\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlAllowedHeaders = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = __XmlNode.of(\"AllowedHeader\", entry);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlAllowedMethods = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = __XmlNode.of(\"AllowedMethod\", entry);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlAllowedOrigins = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = __XmlNode.of(\"AllowedOrigin\", entry);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlAnalyticsAndOperator = (input, context) => {\n  const bodyNode = new __XmlNode(\"AnalyticsAndOperator\");\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags != null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map(node => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"AnalyticsConfiguration\");\n  if (input.Id != null) {\n    const node = __XmlNode.of(\"AnalyticsId\", input.Id).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter != null) {\n    const node = serializeAws_restXmlAnalyticsFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClassAnalysis != null) {\n    const node = serializeAws_restXmlStorageClassAnalysis(input.StorageClassAnalysis, context).withName(\"StorageClassAnalysis\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsExportDestination = (input, context) => {\n  const bodyNode = new __XmlNode(\"AnalyticsExportDestination\");\n  if (input.S3BucketDestination != null) {\n    const node = serializeAws_restXmlAnalyticsS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"AnalyticsFilter\");\n  AnalyticsFilter.visit(input, {\n    Prefix: value => {\n      const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: value => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: value => {\n      const node = serializeAws_restXmlAnalyticsAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name, value) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsS3BucketDestination = (input, context) => {\n  const bodyNode = new __XmlNode(\"AnalyticsS3BucketDestination\");\n  if (input.Format != null) {\n    const node = __XmlNode.of(\"AnalyticsS3ExportFileFormat\", input.Format).withName(\"Format\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BucketAccountId != null) {\n    const node = __XmlNode.of(\"AccountId\", input.BucketAccountId).withName(\"BucketAccountId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Bucket != null) {\n    const node = __XmlNode.of(\"BucketName\", input.Bucket).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlBucketLifecycleConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"BucketLifecycleConfiguration\");\n  if (input.Rules != null) {\n    const nodes = serializeAws_restXmlLifecycleRules(input.Rules, context);\n    nodes.map(node => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlBucketLoggingStatus = (input, context) => {\n  const bodyNode = new __XmlNode(\"BucketLoggingStatus\");\n  if (input.LoggingEnabled != null) {\n    const node = serializeAws_restXmlLoggingEnabled(input.LoggingEnabled, context).withName(\"LoggingEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlCompletedMultipartUpload = (input, context) => {\n  const bodyNode = new __XmlNode(\"CompletedMultipartUpload\");\n  if (input.Parts != null) {\n    const nodes = serializeAws_restXmlCompletedPartList(input.Parts, context);\n    nodes.map(node => {\n      node = node.withName(\"Part\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlCompletedPart = (input, context) => {\n  const bodyNode = new __XmlNode(\"CompletedPart\");\n  if (input.ETag != null) {\n    const node = __XmlNode.of(\"ETag\", input.ETag).withName(\"ETag\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ChecksumCRC32 != null) {\n    const node = __XmlNode.of(\"ChecksumCRC32\", input.ChecksumCRC32).withName(\"ChecksumCRC32\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ChecksumCRC32C != null) {\n    const node = __XmlNode.of(\"ChecksumCRC32C\", input.ChecksumCRC32C).withName(\"ChecksumCRC32C\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ChecksumSHA1 != null) {\n    const node = __XmlNode.of(\"ChecksumSHA1\", input.ChecksumSHA1).withName(\"ChecksumSHA1\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ChecksumSHA256 != null) {\n    const node = __XmlNode.of(\"ChecksumSHA256\", input.ChecksumSHA256).withName(\"ChecksumSHA256\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.PartNumber != null) {\n    const node = __XmlNode.of(\"PartNumber\", String(input.PartNumber)).withName(\"PartNumber\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlCompletedPartList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlCompletedPart(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlCondition = (input, context) => {\n  const bodyNode = new __XmlNode(\"Condition\");\n  if (input.HttpErrorCodeReturnedEquals != null) {\n    const node = __XmlNode.of(\"HttpErrorCodeReturnedEquals\", input.HttpErrorCodeReturnedEquals).withName(\"HttpErrorCodeReturnedEquals\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KeyPrefixEquals != null) {\n    const node = __XmlNode.of(\"KeyPrefixEquals\", input.KeyPrefixEquals).withName(\"KeyPrefixEquals\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlCORSConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"CORSConfiguration\");\n  if (input.CORSRules != null) {\n    const nodes = serializeAws_restXmlCORSRules(input.CORSRules, context);\n    nodes.map(node => {\n      node = node.withName(\"CORSRule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlCORSRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"CORSRule\");\n  if (input.ID != null) {\n    const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AllowedHeaders != null) {\n    const nodes = serializeAws_restXmlAllowedHeaders(input.AllowedHeaders, context);\n    nodes.map(node => {\n      node = node.withName(\"AllowedHeader\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.AllowedMethods != null) {\n    const nodes = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context);\n    nodes.map(node => {\n      node = node.withName(\"AllowedMethod\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.AllowedOrigins != null) {\n    const nodes = serializeAws_restXmlAllowedOrigins(input.AllowedOrigins, context);\n    nodes.map(node => {\n      node = node.withName(\"AllowedOrigin\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.ExposeHeaders != null) {\n    const nodes = serializeAws_restXmlExposeHeaders(input.ExposeHeaders, context);\n    nodes.map(node => {\n      node = node.withName(\"ExposeHeader\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.MaxAgeSeconds != null) {\n    const node = __XmlNode.of(\"MaxAgeSeconds\", String(input.MaxAgeSeconds)).withName(\"MaxAgeSeconds\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlCORSRules = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlCORSRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlCreateBucketConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"CreateBucketConfiguration\");\n  if (input.LocationConstraint != null) {\n    const node = __XmlNode.of(\"BucketLocationConstraint\", input.LocationConstraint).withName(\"LocationConstraint\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlCSVInput = (input, context) => {\n  const bodyNode = new __XmlNode(\"CSVInput\");\n  if (input.FileHeaderInfo != null) {\n    const node = __XmlNode.of(\"FileHeaderInfo\", input.FileHeaderInfo).withName(\"FileHeaderInfo\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Comments != null) {\n    const node = __XmlNode.of(\"Comments\", input.Comments).withName(\"Comments\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteEscapeCharacter != null) {\n    const node = __XmlNode.of(\"QuoteEscapeCharacter\", input.QuoteEscapeCharacter).withName(\"QuoteEscapeCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RecordDelimiter != null) {\n    const node = __XmlNode.of(\"RecordDelimiter\", input.RecordDelimiter).withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.FieldDelimiter != null) {\n    const node = __XmlNode.of(\"FieldDelimiter\", input.FieldDelimiter).withName(\"FieldDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteCharacter != null) {\n    const node = __XmlNode.of(\"QuoteCharacter\", input.QuoteCharacter).withName(\"QuoteCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AllowQuotedRecordDelimiter != null) {\n    const node = __XmlNode.of(\"AllowQuotedRecordDelimiter\", String(input.AllowQuotedRecordDelimiter)).withName(\"AllowQuotedRecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlCSVOutput = (input, context) => {\n  const bodyNode = new __XmlNode(\"CSVOutput\");\n  if (input.QuoteFields != null) {\n    const node = __XmlNode.of(\"QuoteFields\", input.QuoteFields).withName(\"QuoteFields\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteEscapeCharacter != null) {\n    const node = __XmlNode.of(\"QuoteEscapeCharacter\", input.QuoteEscapeCharacter).withName(\"QuoteEscapeCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RecordDelimiter != null) {\n    const node = __XmlNode.of(\"RecordDelimiter\", input.RecordDelimiter).withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.FieldDelimiter != null) {\n    const node = __XmlNode.of(\"FieldDelimiter\", input.FieldDelimiter).withName(\"FieldDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteCharacter != null) {\n    const node = __XmlNode.of(\"QuoteCharacter\", input.QuoteCharacter).withName(\"QuoteCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlDefaultRetention = (input, context) => {\n  const bodyNode = new __XmlNode(\"DefaultRetention\");\n  if (input.Mode != null) {\n    const node = __XmlNode.of(\"ObjectLockRetentionMode\", input.Mode).withName(\"Mode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days != null) {\n    const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Years != null) {\n    const node = __XmlNode.of(\"Years\", String(input.Years)).withName(\"Years\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlDelete = (input, context) => {\n  const bodyNode = new __XmlNode(\"Delete\");\n  if (input.Objects != null) {\n    const nodes = serializeAws_restXmlObjectIdentifierList(input.Objects, context);\n    nodes.map(node => {\n      node = node.withName(\"Object\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Quiet != null) {\n    const node = __XmlNode.of(\"Quiet\", String(input.Quiet)).withName(\"Quiet\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlDeleteMarkerReplication = (input, context) => {\n  const bodyNode = new __XmlNode(\"DeleteMarkerReplication\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"DeleteMarkerReplicationStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlDestination = (input, context) => {\n  const bodyNode = new __XmlNode(\"Destination\");\n  if (input.Bucket != null) {\n    const node = __XmlNode.of(\"BucketName\", input.Bucket).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Account != null) {\n    const node = __XmlNode.of(\"AccountId\", input.Account).withName(\"Account\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass != null) {\n    const node = __XmlNode.of(\"StorageClass\", input.StorageClass).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessControlTranslation != null) {\n    const node = serializeAws_restXmlAccessControlTranslation(input.AccessControlTranslation, context).withName(\"AccessControlTranslation\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.EncryptionConfiguration != null) {\n    const node = serializeAws_restXmlEncryptionConfiguration(input.EncryptionConfiguration, context).withName(\"EncryptionConfiguration\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplicationTime != null) {\n    const node = serializeAws_restXmlReplicationTime(input.ReplicationTime, context).withName(\"ReplicationTime\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Metrics != null) {\n    const node = serializeAws_restXmlMetrics(input.Metrics, context).withName(\"Metrics\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlEncryption = (input, context) => {\n  const bodyNode = new __XmlNode(\"Encryption\");\n  if (input.EncryptionType != null) {\n    const node = __XmlNode.of(\"ServerSideEncryption\", input.EncryptionType).withName(\"EncryptionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSKeyId != null) {\n    const node = __XmlNode.of(\"SSEKMSKeyId\", input.KMSKeyId).withName(\"KMSKeyId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSContext != null) {\n    const node = __XmlNode.of(\"KMSContext\", input.KMSContext).withName(\"KMSContext\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlEncryptionConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"EncryptionConfiguration\");\n  if (input.ReplicaKmsKeyID != null) {\n    const node = __XmlNode.of(\"ReplicaKmsKeyID\", input.ReplicaKmsKeyID).withName(\"ReplicaKmsKeyID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlErrorDocument = (input, context) => {\n  const bodyNode = new __XmlNode(\"ErrorDocument\");\n  if (input.Key != null) {\n    const node = __XmlNode.of(\"ObjectKey\", input.Key).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlEventBridgeConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"EventBridgeConfiguration\");\n  return bodyNode;\n};\nconst serializeAws_restXmlEventList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = __XmlNode.of(\"Event\", entry);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlExistingObjectReplication = (input, context) => {\n  const bodyNode = new __XmlNode(\"ExistingObjectReplication\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"ExistingObjectReplicationStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlExposeHeaders = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = __XmlNode.of(\"ExposeHeader\", entry);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlFilterRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"FilterRule\");\n  if (input.Name != null) {\n    const node = __XmlNode.of(\"FilterRuleName\", input.Name).withName(\"Name\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value != null) {\n    const node = __XmlNode.of(\"FilterRuleValue\", input.Value).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlFilterRuleList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlFilterRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlGlacierJobParameters = (input, context) => {\n  const bodyNode = new __XmlNode(\"GlacierJobParameters\");\n  if (input.Tier != null) {\n    const node = __XmlNode.of(\"Tier\", input.Tier).withName(\"Tier\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlGrant = (input, context) => {\n  const bodyNode = new __XmlNode(\"Grant\");\n  if (input.Grantee != null) {\n    const node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n    node.addAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Permission != null) {\n    const node = __XmlNode.of(\"Permission\", input.Permission).withName(\"Permission\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlGrantee = (input, context) => {\n  const bodyNode = new __XmlNode(\"Grantee\");\n  if (input.DisplayName != null) {\n    const node = __XmlNode.of(\"DisplayName\", input.DisplayName).withName(\"DisplayName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.EmailAddress != null) {\n    const node = __XmlNode.of(\"EmailAddress\", input.EmailAddress).withName(\"EmailAddress\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID != null) {\n    const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.URI != null) {\n    const node = __XmlNode.of(\"URI\", input.URI).withName(\"URI\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Type != null) {\n    bodyNode.addAttribute(\"xsi:type\", input.Type);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlGrants = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlGrant(entry, context);\n    return node.withName(\"Grant\");\n  });\n};\nconst serializeAws_restXmlIndexDocument = (input, context) => {\n  const bodyNode = new __XmlNode(\"IndexDocument\");\n  if (input.Suffix != null) {\n    const node = __XmlNode.of(\"Suffix\", input.Suffix).withName(\"Suffix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlInputSerialization = (input, context) => {\n  const bodyNode = new __XmlNode(\"InputSerialization\");\n  if (input.CSV != null) {\n    const node = serializeAws_restXmlCSVInput(input.CSV, context).withName(\"CSV\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.CompressionType != null) {\n    const node = __XmlNode.of(\"CompressionType\", input.CompressionType).withName(\"CompressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.JSON != null) {\n    const node = serializeAws_restXmlJSONInput(input.JSON, context).withName(\"JSON\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Parquet != null) {\n    const node = serializeAws_restXmlParquetInput(input.Parquet, context).withName(\"Parquet\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlIntelligentTieringAndOperator = (input, context) => {\n  const bodyNode = new __XmlNode(\"IntelligentTieringAndOperator\");\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags != null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map(node => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlIntelligentTieringConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"IntelligentTieringConfiguration\");\n  if (input.Id != null) {\n    const node = __XmlNode.of(\"IntelligentTieringId\", input.Id).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter != null) {\n    const node = serializeAws_restXmlIntelligentTieringFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"IntelligentTieringStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tierings != null) {\n    const nodes = serializeAws_restXmlTieringList(input.Tierings, context);\n    nodes.map(node => {\n      node = node.withName(\"Tiering\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlIntelligentTieringFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"IntelligentTieringFilter\");\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tag != null) {\n    const node = serializeAws_restXmlTag(input.Tag, context).withName(\"Tag\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.And != null) {\n    const node = serializeAws_restXmlIntelligentTieringAndOperator(input.And, context).withName(\"And\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlInventoryConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"InventoryConfiguration\");\n  if (input.Destination != null) {\n    const node = serializeAws_restXmlInventoryDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IsEnabled != null) {\n    const node = __XmlNode.of(\"IsEnabled\", String(input.IsEnabled)).withName(\"IsEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter != null) {\n    const node = serializeAws_restXmlInventoryFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Id != null) {\n    const node = __XmlNode.of(\"InventoryId\", input.Id).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IncludedObjectVersions != null) {\n    const node = __XmlNode.of(\"InventoryIncludedObjectVersions\", input.IncludedObjectVersions).withName(\"IncludedObjectVersions\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OptionalFields != null) {\n    const nodes = serializeAws_restXmlInventoryOptionalFields(input.OptionalFields, context);\n    const containerNode = new __XmlNode(\"OptionalFields\");\n    nodes.map(node => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.Schedule != null) {\n    const node = serializeAws_restXmlInventorySchedule(input.Schedule, context).withName(\"Schedule\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlInventoryDestination = (input, context) => {\n  const bodyNode = new __XmlNode(\"InventoryDestination\");\n  if (input.S3BucketDestination != null) {\n    const node = serializeAws_restXmlInventoryS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlInventoryEncryption = (input, context) => {\n  const bodyNode = new __XmlNode(\"InventoryEncryption\");\n  if (input.SSES3 != null) {\n    const node = serializeAws_restXmlSSES3(input.SSES3, context).withName(\"SSE-S3\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SSEKMS != null) {\n    const node = serializeAws_restXmlSSEKMS(input.SSEKMS, context).withName(\"SSE-KMS\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlInventoryFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"InventoryFilter\");\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlInventoryOptionalFields = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = __XmlNode.of(\"InventoryOptionalField\", entry);\n    return node.withName(\"Field\");\n  });\n};\nconst serializeAws_restXmlInventoryS3BucketDestination = (input, context) => {\n  const bodyNode = new __XmlNode(\"InventoryS3BucketDestination\");\n  if (input.AccountId != null) {\n    const node = __XmlNode.of(\"AccountId\", input.AccountId).withName(\"AccountId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Bucket != null) {\n    const node = __XmlNode.of(\"BucketName\", input.Bucket).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Format != null) {\n    const node = __XmlNode.of(\"InventoryFormat\", input.Format).withName(\"Format\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Encryption != null) {\n    const node = serializeAws_restXmlInventoryEncryption(input.Encryption, context).withName(\"Encryption\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlInventorySchedule = (input, context) => {\n  const bodyNode = new __XmlNode(\"InventorySchedule\");\n  if (input.Frequency != null) {\n    const node = __XmlNode.of(\"InventoryFrequency\", input.Frequency).withName(\"Frequency\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlJSONInput = (input, context) => {\n  const bodyNode = new __XmlNode(\"JSONInput\");\n  if (input.Type != null) {\n    const node = __XmlNode.of(\"JSONType\", input.Type).withName(\"Type\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlJSONOutput = (input, context) => {\n  const bodyNode = new __XmlNode(\"JSONOutput\");\n  if (input.RecordDelimiter != null) {\n    const node = __XmlNode.of(\"RecordDelimiter\", input.RecordDelimiter).withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlLambdaFunctionConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"LambdaFunctionConfiguration\");\n  if (input.Id != null) {\n    const node = __XmlNode.of(\"NotificationId\", input.Id).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.LambdaFunctionArn != null) {\n    const node = __XmlNode.of(\"LambdaFunctionArn\", input.LambdaFunctionArn).withName(\"CloudFunction\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events != null) {\n    const nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map(node => {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter != null) {\n    const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlLambdaFunctionConfigurationList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlLifecycleExpiration = (input, context) => {\n  const bodyNode = new __XmlNode(\"LifecycleExpiration\");\n  if (input.Date != null) {\n    const node = __XmlNode.of(\"Date\", (input.Date.toISOString().split(\".\")[0] + \"Z\").toString()).withName(\"Date\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days != null) {\n    const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpiredObjectDeleteMarker != null) {\n    const node = __XmlNode.of(\"ExpiredObjectDeleteMarker\", String(input.ExpiredObjectDeleteMarker)).withName(\"ExpiredObjectDeleteMarker\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"LifecycleRule\");\n  if (input.Expiration != null) {\n    const node = serializeAws_restXmlLifecycleExpiration(input.Expiration, context).withName(\"Expiration\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID != null) {\n    const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter != null) {\n    const node = serializeAws_restXmlLifecycleRuleFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"ExpirationStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Transitions != null) {\n    const nodes = serializeAws_restXmlTransitionList(input.Transitions, context);\n    nodes.map(node => {\n      node = node.withName(\"Transition\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.NoncurrentVersionTransitions != null) {\n    const nodes = serializeAws_restXmlNoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);\n    nodes.map(node => {\n      node = node.withName(\"NoncurrentVersionTransition\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.NoncurrentVersionExpiration != null) {\n    const node = serializeAws_restXmlNoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName(\"NoncurrentVersionExpiration\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AbortIncompleteMultipartUpload != null) {\n    const node = serializeAws_restXmlAbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName(\"AbortIncompleteMultipartUpload\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRuleAndOperator = (input, context) => {\n  const bodyNode = new __XmlNode(\"LifecycleRuleAndOperator\");\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags != null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map(node => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.ObjectSizeGreaterThan != null) {\n    const node = __XmlNode.of(\"ObjectSizeGreaterThanBytes\", String(input.ObjectSizeGreaterThan)).withName(\"ObjectSizeGreaterThan\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ObjectSizeLessThan != null) {\n    const node = __XmlNode.of(\"ObjectSizeLessThanBytes\", String(input.ObjectSizeLessThan)).withName(\"ObjectSizeLessThan\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRuleFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"LifecycleRuleFilter\");\n  LifecycleRuleFilter.visit(input, {\n    Prefix: value => {\n      const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: value => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    ObjectSizeGreaterThan: value => {\n      const node = __XmlNode.of(\"ObjectSizeGreaterThanBytes\", String(value)).withName(\"ObjectSizeGreaterThan\");\n      bodyNode.addChildNode(node);\n    },\n    ObjectSizeLessThan: value => {\n      const node = __XmlNode.of(\"ObjectSizeLessThanBytes\", String(value)).withName(\"ObjectSizeLessThan\");\n      bodyNode.addChildNode(node);\n    },\n    And: value => {\n      const node = serializeAws_restXmlLifecycleRuleAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name, value) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRules = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlLifecycleRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlLoggingEnabled = (input, context) => {\n  const bodyNode = new __XmlNode(\"LoggingEnabled\");\n  if (input.TargetBucket != null) {\n    const node = __XmlNode.of(\"TargetBucket\", input.TargetBucket).withName(\"TargetBucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.TargetGrants != null) {\n    const nodes = serializeAws_restXmlTargetGrants(input.TargetGrants, context);\n    const containerNode = new __XmlNode(\"TargetGrants\");\n    nodes.map(node => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.TargetPrefix != null) {\n    const node = __XmlNode.of(\"TargetPrefix\", input.TargetPrefix).withName(\"TargetPrefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlMetadataEntry = (input, context) => {\n  const bodyNode = new __XmlNode(\"MetadataEntry\");\n  if (input.Name != null) {\n    const node = __XmlNode.of(\"MetadataKey\", input.Name).withName(\"Name\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value != null) {\n    const node = __XmlNode.of(\"MetadataValue\", input.Value).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlMetrics = (input, context) => {\n  const bodyNode = new __XmlNode(\"Metrics\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"MetricsStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.EventThreshold != null) {\n    const node = serializeAws_restXmlReplicationTimeValue(input.EventThreshold, context).withName(\"EventThreshold\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlMetricsAndOperator = (input, context) => {\n  const bodyNode = new __XmlNode(\"MetricsAndOperator\");\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags != null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map(node => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.AccessPointArn != null) {\n    const node = __XmlNode.of(\"AccessPointArn\", input.AccessPointArn).withName(\"AccessPointArn\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlMetricsConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"MetricsConfiguration\");\n  if (input.Id != null) {\n    const node = __XmlNode.of(\"MetricsId\", input.Id).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter != null) {\n    const node = serializeAws_restXmlMetricsFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlMetricsFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"MetricsFilter\");\n  MetricsFilter.visit(input, {\n    Prefix: value => {\n      const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: value => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    AccessPointArn: value => {\n      const node = __XmlNode.of(\"AccessPointArn\", value).withName(\"AccessPointArn\");\n      bodyNode.addChildNode(node);\n    },\n    And: value => {\n      const node = serializeAws_restXmlMetricsAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name, value) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\nconst serializeAws_restXmlNoncurrentVersionExpiration = (input, context) => {\n  const bodyNode = new __XmlNode(\"NoncurrentVersionExpiration\");\n  if (input.NoncurrentDays != null) {\n    const node = __XmlNode.of(\"Days\", String(input.NoncurrentDays)).withName(\"NoncurrentDays\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.NewerNoncurrentVersions != null) {\n    const node = __XmlNode.of(\"VersionCount\", String(input.NewerNoncurrentVersions)).withName(\"NewerNoncurrentVersions\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlNoncurrentVersionTransition = (input, context) => {\n  const bodyNode = new __XmlNode(\"NoncurrentVersionTransition\");\n  if (input.NoncurrentDays != null) {\n    const node = __XmlNode.of(\"Days\", String(input.NoncurrentDays)).withName(\"NoncurrentDays\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass != null) {\n    const node = __XmlNode.of(\"TransitionStorageClass\", input.StorageClass).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.NewerNoncurrentVersions != null) {\n    const node = __XmlNode.of(\"VersionCount\", String(input.NewerNoncurrentVersions)).withName(\"NewerNoncurrentVersions\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlNoncurrentVersionTransitionList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlNoncurrentVersionTransition(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlNotificationConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"NotificationConfiguration\");\n  if (input.TopicConfigurations != null) {\n    const nodes = serializeAws_restXmlTopicConfigurationList(input.TopicConfigurations, context);\n    nodes.map(node => {\n      node = node.withName(\"TopicConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.QueueConfigurations != null) {\n    const nodes = serializeAws_restXmlQueueConfigurationList(input.QueueConfigurations, context);\n    nodes.map(node => {\n      node = node.withName(\"QueueConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.LambdaFunctionConfigurations != null) {\n    const nodes = serializeAws_restXmlLambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);\n    nodes.map(node => {\n      node = node.withName(\"CloudFunctionConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.EventBridgeConfiguration != null) {\n    const node = serializeAws_restXmlEventBridgeConfiguration(input.EventBridgeConfiguration, context).withName(\"EventBridgeConfiguration\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlNotificationConfigurationFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"NotificationConfigurationFilter\");\n  if (input.Key != null) {\n    const node = serializeAws_restXmlS3KeyFilter(input.Key, context).withName(\"S3Key\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlObjectIdentifier = (input, context) => {\n  const bodyNode = new __XmlNode(\"ObjectIdentifier\");\n  if (input.Key != null) {\n    const node = __XmlNode.of(\"ObjectKey\", input.Key).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.VersionId != null) {\n    const node = __XmlNode.of(\"ObjectVersionId\", input.VersionId).withName(\"VersionId\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlObjectIdentifierList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlObjectIdentifier(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlObjectLockConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"ObjectLockConfiguration\");\n  if (input.ObjectLockEnabled != null) {\n    const node = __XmlNode.of(\"ObjectLockEnabled\", input.ObjectLockEnabled).withName(\"ObjectLockEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Rule != null) {\n    const node = serializeAws_restXmlObjectLockRule(input.Rule, context).withName(\"Rule\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlObjectLockLegalHold = (input, context) => {\n  const bodyNode = new __XmlNode(\"ObjectLockLegalHold\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"ObjectLockLegalHoldStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlObjectLockRetention = (input, context) => {\n  const bodyNode = new __XmlNode(\"ObjectLockRetention\");\n  if (input.Mode != null) {\n    const node = __XmlNode.of(\"ObjectLockRetentionMode\", input.Mode).withName(\"Mode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RetainUntilDate != null) {\n    const node = __XmlNode.of(\"Date\", (input.RetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()).withName(\"RetainUntilDate\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlObjectLockRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"ObjectLockRule\");\n  if (input.DefaultRetention != null) {\n    const node = serializeAws_restXmlDefaultRetention(input.DefaultRetention, context).withName(\"DefaultRetention\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlOutputLocation = (input, context) => {\n  const bodyNode = new __XmlNode(\"OutputLocation\");\n  if (input.S3 != null) {\n    const node = serializeAws_restXmlS3Location(input.S3, context).withName(\"S3\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlOutputSerialization = (input, context) => {\n  const bodyNode = new __XmlNode(\"OutputSerialization\");\n  if (input.CSV != null) {\n    const node = serializeAws_restXmlCSVOutput(input.CSV, context).withName(\"CSV\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.JSON != null) {\n    const node = serializeAws_restXmlJSONOutput(input.JSON, context).withName(\"JSON\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlOwner = (input, context) => {\n  const bodyNode = new __XmlNode(\"Owner\");\n  if (input.DisplayName != null) {\n    const node = __XmlNode.of(\"DisplayName\", input.DisplayName).withName(\"DisplayName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID != null) {\n    const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlOwnershipControls = (input, context) => {\n  const bodyNode = new __XmlNode(\"OwnershipControls\");\n  if (input.Rules != null) {\n    const nodes = serializeAws_restXmlOwnershipControlsRules(input.Rules, context);\n    nodes.map(node => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlOwnershipControlsRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"OwnershipControlsRule\");\n  if (input.ObjectOwnership != null) {\n    const node = __XmlNode.of(\"ObjectOwnership\", input.ObjectOwnership).withName(\"ObjectOwnership\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlOwnershipControlsRules = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlOwnershipControlsRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlParquetInput = (input, context) => {\n  const bodyNode = new __XmlNode(\"ParquetInput\");\n  return bodyNode;\n};\nconst serializeAws_restXmlPublicAccessBlockConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"PublicAccessBlockConfiguration\");\n  if (input.BlockPublicAcls != null) {\n    const node = __XmlNode.of(\"Setting\", String(input.BlockPublicAcls)).withName(\"BlockPublicAcls\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IgnorePublicAcls != null) {\n    const node = __XmlNode.of(\"Setting\", String(input.IgnorePublicAcls)).withName(\"IgnorePublicAcls\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BlockPublicPolicy != null) {\n    const node = __XmlNode.of(\"Setting\", String(input.BlockPublicPolicy)).withName(\"BlockPublicPolicy\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RestrictPublicBuckets != null) {\n    const node = __XmlNode.of(\"Setting\", String(input.RestrictPublicBuckets)).withName(\"RestrictPublicBuckets\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlQueueConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"QueueConfiguration\");\n  if (input.Id != null) {\n    const node = __XmlNode.of(\"NotificationId\", input.Id).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QueueArn != null) {\n    const node = __XmlNode.of(\"QueueArn\", input.QueueArn).withName(\"Queue\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events != null) {\n    const nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map(node => {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter != null) {\n    const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlQueueConfigurationList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlQueueConfiguration(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlRedirect = (input, context) => {\n  const bodyNode = new __XmlNode(\"Redirect\");\n  if (input.HostName != null) {\n    const node = __XmlNode.of(\"HostName\", input.HostName).withName(\"HostName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.HttpRedirectCode != null) {\n    const node = __XmlNode.of(\"HttpRedirectCode\", input.HttpRedirectCode).withName(\"HttpRedirectCode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Protocol != null) {\n    const node = __XmlNode.of(\"Protocol\", input.Protocol).withName(\"Protocol\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplaceKeyPrefixWith != null) {\n    const node = __XmlNode.of(\"ReplaceKeyPrefixWith\", input.ReplaceKeyPrefixWith).withName(\"ReplaceKeyPrefixWith\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplaceKeyWith != null) {\n    const node = __XmlNode.of(\"ReplaceKeyWith\", input.ReplaceKeyWith).withName(\"ReplaceKeyWith\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlRedirectAllRequestsTo = (input, context) => {\n  const bodyNode = new __XmlNode(\"RedirectAllRequestsTo\");\n  if (input.HostName != null) {\n    const node = __XmlNode.of(\"HostName\", input.HostName).withName(\"HostName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Protocol != null) {\n    const node = __XmlNode.of(\"Protocol\", input.Protocol).withName(\"Protocol\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlReplicaModifications = (input, context) => {\n  const bodyNode = new __XmlNode(\"ReplicaModifications\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"ReplicaModificationsStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlReplicationConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"ReplicationConfiguration\");\n  if (input.Role != null) {\n    const node = __XmlNode.of(\"Role\", input.Role).withName(\"Role\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Rules != null) {\n    const nodes = serializeAws_restXmlReplicationRules(input.Rules, context);\n    nodes.map(node => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlReplicationRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"ReplicationRule\");\n  if (input.ID != null) {\n    const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Priority != null) {\n    const node = __XmlNode.of(\"Priority\", String(input.Priority)).withName(\"Priority\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter != null) {\n    const node = serializeAws_restXmlReplicationRuleFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"ReplicationRuleStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SourceSelectionCriteria != null) {\n    const node = serializeAws_restXmlSourceSelectionCriteria(input.SourceSelectionCriteria, context).withName(\"SourceSelectionCriteria\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExistingObjectReplication != null) {\n    const node = serializeAws_restXmlExistingObjectReplication(input.ExistingObjectReplication, context).withName(\"ExistingObjectReplication\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Destination != null) {\n    const node = serializeAws_restXmlDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.DeleteMarkerReplication != null) {\n    const node = serializeAws_restXmlDeleteMarkerReplication(input.DeleteMarkerReplication, context).withName(\"DeleteMarkerReplication\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlReplicationRuleAndOperator = (input, context) => {\n  const bodyNode = new __XmlNode(\"ReplicationRuleAndOperator\");\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags != null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map(node => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlReplicationRuleFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"ReplicationRuleFilter\");\n  ReplicationRuleFilter.visit(input, {\n    Prefix: value => {\n      const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: value => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: value => {\n      const node = serializeAws_restXmlReplicationRuleAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name, value) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\nconst serializeAws_restXmlReplicationRules = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlReplicationRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlReplicationTime = (input, context) => {\n  const bodyNode = new __XmlNode(\"ReplicationTime\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"ReplicationTimeStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Time != null) {\n    const node = serializeAws_restXmlReplicationTimeValue(input.Time, context).withName(\"Time\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlReplicationTimeValue = (input, context) => {\n  const bodyNode = new __XmlNode(\"ReplicationTimeValue\");\n  if (input.Minutes != null) {\n    const node = __XmlNode.of(\"Minutes\", String(input.Minutes)).withName(\"Minutes\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlRequestPaymentConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"RequestPaymentConfiguration\");\n  if (input.Payer != null) {\n    const node = __XmlNode.of(\"Payer\", input.Payer).withName(\"Payer\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlRequestProgress = (input, context) => {\n  const bodyNode = new __XmlNode(\"RequestProgress\");\n  if (input.Enabled != null) {\n    const node = __XmlNode.of(\"EnableRequestProgress\", String(input.Enabled)).withName(\"Enabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlRestoreRequest = (input, context) => {\n  const bodyNode = new __XmlNode(\"RestoreRequest\");\n  if (input.Days != null) {\n    const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.GlacierJobParameters != null) {\n    const node = serializeAws_restXmlGlacierJobParameters(input.GlacierJobParameters, context).withName(\"GlacierJobParameters\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Type != null) {\n    const node = __XmlNode.of(\"RestoreRequestType\", input.Type).withName(\"Type\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tier != null) {\n    const node = __XmlNode.of(\"Tier\", input.Tier).withName(\"Tier\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Description != null) {\n    const node = __XmlNode.of(\"Description\", input.Description).withName(\"Description\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SelectParameters != null) {\n    const node = serializeAws_restXmlSelectParameters(input.SelectParameters, context).withName(\"SelectParameters\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputLocation != null) {\n    const node = serializeAws_restXmlOutputLocation(input.OutputLocation, context).withName(\"OutputLocation\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlRoutingRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"RoutingRule\");\n  if (input.Condition != null) {\n    const node = serializeAws_restXmlCondition(input.Condition, context).withName(\"Condition\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Redirect != null) {\n    const node = serializeAws_restXmlRedirect(input.Redirect, context).withName(\"Redirect\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlRoutingRules = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlRoutingRule(entry, context);\n    return node.withName(\"RoutingRule\");\n  });\n};\nconst serializeAws_restXmlS3KeyFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"S3KeyFilter\");\n  if (input.FilterRules != null) {\n    const nodes = serializeAws_restXmlFilterRuleList(input.FilterRules, context);\n    nodes.map(node => {\n      node = node.withName(\"FilterRule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlS3Location = (input, context) => {\n  const bodyNode = new __XmlNode(\"S3Location\");\n  if (input.BucketName != null) {\n    const node = __XmlNode.of(\"BucketName\", input.BucketName).withName(\"BucketName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"LocationPrefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Encryption != null) {\n    const node = serializeAws_restXmlEncryption(input.Encryption, context).withName(\"Encryption\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.CannedACL != null) {\n    const node = __XmlNode.of(\"ObjectCannedACL\", input.CannedACL).withName(\"CannedACL\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessControlList != null) {\n    const nodes = serializeAws_restXmlGrants(input.AccessControlList, context);\n    const containerNode = new __XmlNode(\"AccessControlList\");\n    nodes.map(node => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.Tagging != null) {\n    const node = serializeAws_restXmlTagging(input.Tagging, context).withName(\"Tagging\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.UserMetadata != null) {\n    const nodes = serializeAws_restXmlUserMetadata(input.UserMetadata, context);\n    const containerNode = new __XmlNode(\"UserMetadata\");\n    nodes.map(node => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.StorageClass != null) {\n    const node = __XmlNode.of(\"StorageClass\", input.StorageClass).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlScanRange = (input, context) => {\n  const bodyNode = new __XmlNode(\"ScanRange\");\n  if (input.Start != null) {\n    const node = __XmlNode.of(\"Start\", String(input.Start)).withName(\"Start\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.End != null) {\n    const node = __XmlNode.of(\"End\", String(input.End)).withName(\"End\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlSelectParameters = (input, context) => {\n  const bodyNode = new __XmlNode(\"SelectParameters\");\n  if (input.InputSerialization != null) {\n    const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpressionType != null) {\n    const node = __XmlNode.of(\"ExpressionType\", input.ExpressionType).withName(\"ExpressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Expression != null) {\n    const node = __XmlNode.of(\"Expression\", input.Expression).withName(\"Expression\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputSerialization != null) {\n    const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionByDefault = (input, context) => {\n  const bodyNode = new __XmlNode(\"ServerSideEncryptionByDefault\");\n  if (input.SSEAlgorithm != null) {\n    const node = __XmlNode.of(\"ServerSideEncryption\", input.SSEAlgorithm).withName(\"SSEAlgorithm\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSMasterKeyID != null) {\n    const node = __XmlNode.of(\"SSEKMSKeyId\", input.KMSMasterKeyID).withName(\"KMSMasterKeyID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"ServerSideEncryptionConfiguration\");\n  if (input.Rules != null) {\n    const nodes = serializeAws_restXmlServerSideEncryptionRules(input.Rules, context);\n    nodes.map(node => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"ServerSideEncryptionRule\");\n  if (input.ApplyServerSideEncryptionByDefault != null) {\n    const node = serializeAws_restXmlServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName(\"ApplyServerSideEncryptionByDefault\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BucketKeyEnabled != null) {\n    const node = __XmlNode.of(\"BucketKeyEnabled\", String(input.BucketKeyEnabled)).withName(\"BucketKeyEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionRules = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlServerSideEncryptionRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlSourceSelectionCriteria = (input, context) => {\n  const bodyNode = new __XmlNode(\"SourceSelectionCriteria\");\n  if (input.SseKmsEncryptedObjects != null) {\n    const node = serializeAws_restXmlSseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName(\"SseKmsEncryptedObjects\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplicaModifications != null) {\n    const node = serializeAws_restXmlReplicaModifications(input.ReplicaModifications, context).withName(\"ReplicaModifications\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlSSEKMS = (input, context) => {\n  const bodyNode = new __XmlNode(\"SSE-KMS\");\n  if (input.KeyId != null) {\n    const node = __XmlNode.of(\"SSEKMSKeyId\", input.KeyId).withName(\"KeyId\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlSseKmsEncryptedObjects = (input, context) => {\n  const bodyNode = new __XmlNode(\"SseKmsEncryptedObjects\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"SseKmsEncryptedObjectsStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlSSES3 = (input, context) => {\n  const bodyNode = new __XmlNode(\"SSE-S3\");\n  return bodyNode;\n};\nconst serializeAws_restXmlStorageClassAnalysis = (input, context) => {\n  const bodyNode = new __XmlNode(\"StorageClassAnalysis\");\n  if (input.DataExport != null) {\n    const node = serializeAws_restXmlStorageClassAnalysisDataExport(input.DataExport, context).withName(\"DataExport\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlStorageClassAnalysisDataExport = (input, context) => {\n  const bodyNode = new __XmlNode(\"StorageClassAnalysisDataExport\");\n  if (input.OutputSchemaVersion != null) {\n    const node = __XmlNode.of(\"StorageClassAnalysisSchemaVersion\", input.OutputSchemaVersion).withName(\"OutputSchemaVersion\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Destination != null) {\n    const node = serializeAws_restXmlAnalyticsExportDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlTag = (input, context) => {\n  const bodyNode = new __XmlNode(\"Tag\");\n  if (input.Key != null) {\n    const node = __XmlNode.of(\"ObjectKey\", input.Key).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value != null) {\n    const node = __XmlNode.of(\"Value\", input.Value).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlTagging = (input, context) => {\n  const bodyNode = new __XmlNode(\"Tagging\");\n  if (input.TagSet != null) {\n    const nodes = serializeAws_restXmlTagSet(input.TagSet, context);\n    const containerNode = new __XmlNode(\"TagSet\");\n    nodes.map(node => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlTagSet = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlTag(entry, context);\n    return node.withName(\"Tag\");\n  });\n};\nconst serializeAws_restXmlTargetGrant = (input, context) => {\n  const bodyNode = new __XmlNode(\"TargetGrant\");\n  if (input.Grantee != null) {\n    const node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n    node.addAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Permission != null) {\n    const node = __XmlNode.of(\"BucketLogsPermission\", input.Permission).withName(\"Permission\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlTargetGrants = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlTargetGrant(entry, context);\n    return node.withName(\"Grant\");\n  });\n};\nconst serializeAws_restXmlTiering = (input, context) => {\n  const bodyNode = new __XmlNode(\"Tiering\");\n  if (input.Days != null) {\n    const node = __XmlNode.of(\"IntelligentTieringDays\", String(input.Days)).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessTier != null) {\n    const node = __XmlNode.of(\"IntelligentTieringAccessTier\", input.AccessTier).withName(\"AccessTier\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlTieringList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlTiering(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlTopicConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"TopicConfiguration\");\n  if (input.Id != null) {\n    const node = __XmlNode.of(\"NotificationId\", input.Id).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.TopicArn != null) {\n    const node = __XmlNode.of(\"TopicArn\", input.TopicArn).withName(\"Topic\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events != null) {\n    const nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map(node => {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter != null) {\n    const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlTopicConfigurationList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlTopicConfiguration(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlTransition = (input, context) => {\n  const bodyNode = new __XmlNode(\"Transition\");\n  if (input.Date != null) {\n    const node = __XmlNode.of(\"Date\", (input.Date.toISOString().split(\".\")[0] + \"Z\").toString()).withName(\"Date\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days != null) {\n    const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass != null) {\n    const node = __XmlNode.of(\"TransitionStorageClass\", input.StorageClass).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlTransitionList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlTransition(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst serializeAws_restXmlUserMetadata = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = serializeAws_restXmlMetadataEntry(entry, context);\n    return node.withName(\"MetadataEntry\");\n  });\n};\nconst serializeAws_restXmlVersioningConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"VersioningConfiguration\");\n  if (input.MFADelete != null) {\n    const node = __XmlNode.of(\"MFADelete\", input.MFADelete).withName(\"MfaDelete\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"BucketVersioningStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst serializeAws_restXmlWebsiteConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"WebsiteConfiguration\");\n  if (input.ErrorDocument != null) {\n    const node = serializeAws_restXmlErrorDocument(input.ErrorDocument, context).withName(\"ErrorDocument\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IndexDocument != null) {\n    const node = serializeAws_restXmlIndexDocument(input.IndexDocument, context).withName(\"IndexDocument\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RedirectAllRequestsTo != null) {\n    const node = serializeAws_restXmlRedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName(\"RedirectAllRequestsTo\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RoutingRules != null) {\n    const nodes = serializeAws_restXmlRoutingRules(input.RoutingRules, context);\n    const containerNode = new __XmlNode(\"RoutingRules\");\n    nodes.map(node => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  return bodyNode;\n};\nconst deserializeAws_restXmlAbortIncompleteMultipartUpload = (output, context) => {\n  const contents = {\n    DaysAfterInitiation: undefined\n  };\n  if (output[\"DaysAfterInitiation\"] !== undefined) {\n    contents.DaysAfterInitiation = __strictParseInt32(output[\"DaysAfterInitiation\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlAccessControlTranslation = (output, context) => {\n  const contents = {\n    Owner: undefined\n  };\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = __expectString(output[\"Owner\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlAllowedHeaders = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst deserializeAws_restXmlAllowedMethods = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst deserializeAws_restXmlAllowedOrigins = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst deserializeAws_restXmlAnalyticsAndOperator = (output, context) => {\n  const contents = {\n    Prefix: undefined,\n    Tags: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  } else if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlAnalyticsConfiguration = (output, context) => {\n  const contents = {\n    Id: undefined,\n    Filter: undefined,\n    StorageClassAnalysis: undefined\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = __expectString(output[\"Id\"]);\n  }\n  if (output.Filter === \"\") {} else if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlAnalyticsFilter(__expectUnion(output[\"Filter\"]), context);\n  }\n  if (output[\"StorageClassAnalysis\"] !== undefined) {\n    contents.StorageClassAnalysis = deserializeAws_restXmlStorageClassAnalysis(output[\"StorageClassAnalysis\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlAnalyticsConfigurationList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlAnalyticsConfiguration(entry, context);\n  });\n};\nconst deserializeAws_restXmlAnalyticsExportDestination = (output, context) => {\n  const contents = {\n    S3BucketDestination: undefined\n  };\n  if (output[\"S3BucketDestination\"] !== undefined) {\n    contents.S3BucketDestination = deserializeAws_restXmlAnalyticsS3BucketDestination(output[\"S3BucketDestination\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlAnalyticsFilter = (output, context) => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: __expectString(output[\"Prefix\"])\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context)\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlAnalyticsAndOperator(output[\"And\"], context)\n    };\n  }\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\nconst deserializeAws_restXmlAnalyticsS3BucketDestination = (output, context) => {\n  const contents = {\n    Format: undefined,\n    BucketAccountId: undefined,\n    Bucket: undefined,\n    Prefix: undefined\n  };\n  if (output[\"Format\"] !== undefined) {\n    contents.Format = __expectString(output[\"Format\"]);\n  }\n  if (output[\"BucketAccountId\"] !== undefined) {\n    contents.BucketAccountId = __expectString(output[\"BucketAccountId\"]);\n  }\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = __expectString(output[\"Bucket\"]);\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlBucket = (output, context) => {\n  const contents = {\n    Name: undefined,\n    CreationDate: undefined\n  };\n  if (output[\"Name\"] !== undefined) {\n    contents.Name = __expectString(output[\"Name\"]);\n  }\n  if (output[\"CreationDate\"] !== undefined) {\n    contents.CreationDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"CreationDate\"]));\n  }\n  return contents;\n};\nconst deserializeAws_restXmlBuckets = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlBucket(entry, context);\n  });\n};\nconst deserializeAws_restXmlChecksum = (output, context) => {\n  const contents = {\n    ChecksumCRC32: undefined,\n    ChecksumCRC32C: undefined,\n    ChecksumSHA1: undefined,\n    ChecksumSHA256: undefined\n  };\n  if (output[\"ChecksumCRC32\"] !== undefined) {\n    contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n  }\n  if (output[\"ChecksumCRC32C\"] !== undefined) {\n    contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n  }\n  if (output[\"ChecksumSHA1\"] !== undefined) {\n    contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n  }\n  if (output[\"ChecksumSHA256\"] !== undefined) {\n    contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlChecksumAlgorithmList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst deserializeAws_restXmlCommonPrefix = (output, context) => {\n  const contents = {\n    Prefix: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlCommonPrefixList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlCommonPrefix(entry, context);\n  });\n};\nconst deserializeAws_restXmlCondition = (output, context) => {\n  const contents = {\n    HttpErrorCodeReturnedEquals: undefined,\n    KeyPrefixEquals: undefined\n  };\n  if (output[\"HttpErrorCodeReturnedEquals\"] !== undefined) {\n    contents.HttpErrorCodeReturnedEquals = __expectString(output[\"HttpErrorCodeReturnedEquals\"]);\n  }\n  if (output[\"KeyPrefixEquals\"] !== undefined) {\n    contents.KeyPrefixEquals = __expectString(output[\"KeyPrefixEquals\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlContinuationEvent = (output, context) => {\n  const contents = {};\n  return contents;\n};\nconst deserializeAws_restXmlCopyObjectResult = (output, context) => {\n  const contents = {\n    ETag: undefined,\n    LastModified: undefined,\n    ChecksumCRC32: undefined,\n    ChecksumCRC32C: undefined,\n    ChecksumSHA1: undefined,\n    ChecksumSHA256: undefined\n  };\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = __expectString(output[\"ETag\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n  }\n  if (output[\"ChecksumCRC32\"] !== undefined) {\n    contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n  }\n  if (output[\"ChecksumCRC32C\"] !== undefined) {\n    contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n  }\n  if (output[\"ChecksumSHA1\"] !== undefined) {\n    contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n  }\n  if (output[\"ChecksumSHA256\"] !== undefined) {\n    contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlCopyPartResult = (output, context) => {\n  const contents = {\n    ETag: undefined,\n    LastModified: undefined,\n    ChecksumCRC32: undefined,\n    ChecksumCRC32C: undefined,\n    ChecksumSHA1: undefined,\n    ChecksumSHA256: undefined\n  };\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = __expectString(output[\"ETag\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n  }\n  if (output[\"ChecksumCRC32\"] !== undefined) {\n    contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n  }\n  if (output[\"ChecksumCRC32C\"] !== undefined) {\n    contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n  }\n  if (output[\"ChecksumSHA1\"] !== undefined) {\n    contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n  }\n  if (output[\"ChecksumSHA256\"] !== undefined) {\n    contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlCORSRule = (output, context) => {\n  const contents = {\n    ID: undefined,\n    AllowedHeaders: undefined,\n    AllowedMethods: undefined,\n    AllowedOrigins: undefined,\n    ExposeHeaders: undefined,\n    MaxAgeSeconds: undefined\n  };\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = __expectString(output[\"ID\"]);\n  }\n  if (output.AllowedHeader === \"\") {\n    contents.AllowedHeaders = [];\n  } else if (output[\"AllowedHeader\"] !== undefined) {\n    contents.AllowedHeaders = deserializeAws_restXmlAllowedHeaders(__getArrayIfSingleItem(output[\"AllowedHeader\"]), context);\n  }\n  if (output.AllowedMethod === \"\") {\n    contents.AllowedMethods = [];\n  } else if (output[\"AllowedMethod\"] !== undefined) {\n    contents.AllowedMethods = deserializeAws_restXmlAllowedMethods(__getArrayIfSingleItem(output[\"AllowedMethod\"]), context);\n  }\n  if (output.AllowedOrigin === \"\") {\n    contents.AllowedOrigins = [];\n  } else if (output[\"AllowedOrigin\"] !== undefined) {\n    contents.AllowedOrigins = deserializeAws_restXmlAllowedOrigins(__getArrayIfSingleItem(output[\"AllowedOrigin\"]), context);\n  }\n  if (output.ExposeHeader === \"\") {\n    contents.ExposeHeaders = [];\n  } else if (output[\"ExposeHeader\"] !== undefined) {\n    contents.ExposeHeaders = deserializeAws_restXmlExposeHeaders(__getArrayIfSingleItem(output[\"ExposeHeader\"]), context);\n  }\n  if (output[\"MaxAgeSeconds\"] !== undefined) {\n    contents.MaxAgeSeconds = __strictParseInt32(output[\"MaxAgeSeconds\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlCORSRules = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlCORSRule(entry, context);\n  });\n};\nconst deserializeAws_restXmlDefaultRetention = (output, context) => {\n  const contents = {\n    Mode: undefined,\n    Days: undefined,\n    Years: undefined\n  };\n  if (output[\"Mode\"] !== undefined) {\n    contents.Mode = __expectString(output[\"Mode\"]);\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = __strictParseInt32(output[\"Days\"]);\n  }\n  if (output[\"Years\"] !== undefined) {\n    contents.Years = __strictParseInt32(output[\"Years\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlDeletedObject = (output, context) => {\n  const contents = {\n    Key: undefined,\n    VersionId: undefined,\n    DeleteMarker: undefined,\n    DeleteMarkerVersionId: undefined\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = __expectString(output[\"VersionId\"]);\n  }\n  if (output[\"DeleteMarker\"] !== undefined) {\n    contents.DeleteMarker = __parseBoolean(output[\"DeleteMarker\"]);\n  }\n  if (output[\"DeleteMarkerVersionId\"] !== undefined) {\n    contents.DeleteMarkerVersionId = __expectString(output[\"DeleteMarkerVersionId\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlDeletedObjects = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlDeletedObject(entry, context);\n  });\n};\nconst deserializeAws_restXmlDeleteMarkerEntry = (output, context) => {\n  const contents = {\n    Owner: undefined,\n    Key: undefined,\n    VersionId: undefined,\n    IsLatest: undefined,\n    LastModified: undefined\n  };\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = __expectString(output[\"VersionId\"]);\n  }\n  if (output[\"IsLatest\"] !== undefined) {\n    contents.IsLatest = __parseBoolean(output[\"IsLatest\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n  }\n  return contents;\n};\nconst deserializeAws_restXmlDeleteMarkerReplication = (output, context) => {\n  const contents = {\n    Status: undefined\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlDeleteMarkers = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlDeleteMarkerEntry(entry, context);\n  });\n};\nconst deserializeAws_restXmlDestination = (output, context) => {\n  const contents = {\n    Bucket: undefined,\n    Account: undefined,\n    StorageClass: undefined,\n    AccessControlTranslation: undefined,\n    EncryptionConfiguration: undefined,\n    ReplicationTime: undefined,\n    Metrics: undefined\n  };\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = __expectString(output[\"Bucket\"]);\n  }\n  if (output[\"Account\"] !== undefined) {\n    contents.Account = __expectString(output[\"Account\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(output[\"StorageClass\"]);\n  }\n  if (output[\"AccessControlTranslation\"] !== undefined) {\n    contents.AccessControlTranslation = deserializeAws_restXmlAccessControlTranslation(output[\"AccessControlTranslation\"], context);\n  }\n  if (output[\"EncryptionConfiguration\"] !== undefined) {\n    contents.EncryptionConfiguration = deserializeAws_restXmlEncryptionConfiguration(output[\"EncryptionConfiguration\"], context);\n  }\n  if (output[\"ReplicationTime\"] !== undefined) {\n    contents.ReplicationTime = deserializeAws_restXmlReplicationTime(output[\"ReplicationTime\"], context);\n  }\n  if (output[\"Metrics\"] !== undefined) {\n    contents.Metrics = deserializeAws_restXmlMetrics(output[\"Metrics\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlEncryptionConfiguration = (output, context) => {\n  const contents = {\n    ReplicaKmsKeyID: undefined\n  };\n  if (output[\"ReplicaKmsKeyID\"] !== undefined) {\n    contents.ReplicaKmsKeyID = __expectString(output[\"ReplicaKmsKeyID\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlEndEvent = (output, context) => {\n  const contents = {};\n  return contents;\n};\nconst deserializeAws_restXml_Error = (output, context) => {\n  const contents = {\n    Key: undefined,\n    VersionId: undefined,\n    Code: undefined,\n    Message: undefined\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = __expectString(output[\"VersionId\"]);\n  }\n  if (output[\"Code\"] !== undefined) {\n    contents.Code = __expectString(output[\"Code\"]);\n  }\n  if (output[\"Message\"] !== undefined) {\n    contents.Message = __expectString(output[\"Message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlErrorDocument = (output, context) => {\n  const contents = {\n    Key: undefined\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlErrors = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXml_Error(entry, context);\n  });\n};\nconst deserializeAws_restXmlEventBridgeConfiguration = (output, context) => {\n  const contents = {};\n  return contents;\n};\nconst deserializeAws_restXmlEventList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst deserializeAws_restXmlExistingObjectReplication = (output, context) => {\n  const contents = {\n    Status: undefined\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlExposeHeaders = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst deserializeAws_restXmlFilterRule = (output, context) => {\n  const contents = {\n    Name: undefined,\n    Value: undefined\n  };\n  if (output[\"Name\"] !== undefined) {\n    contents.Name = __expectString(output[\"Name\"]);\n  }\n  if (output[\"Value\"] !== undefined) {\n    contents.Value = __expectString(output[\"Value\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlFilterRuleList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlFilterRule(entry, context);\n  });\n};\nconst deserializeAws_restXmlGetObjectAttributesParts = (output, context) => {\n  const contents = {\n    TotalPartsCount: undefined,\n    PartNumberMarker: undefined,\n    NextPartNumberMarker: undefined,\n    MaxParts: undefined,\n    IsTruncated: undefined,\n    Parts: undefined\n  };\n  if (output[\"PartsCount\"] !== undefined) {\n    contents.TotalPartsCount = __strictParseInt32(output[\"PartsCount\"]);\n  }\n  if (output[\"PartNumberMarker\"] !== undefined) {\n    contents.PartNumberMarker = __expectString(output[\"PartNumberMarker\"]);\n  }\n  if (output[\"NextPartNumberMarker\"] !== undefined) {\n    contents.NextPartNumberMarker = __expectString(output[\"NextPartNumberMarker\"]);\n  }\n  if (output[\"MaxParts\"] !== undefined) {\n    contents.MaxParts = __strictParseInt32(output[\"MaxParts\"]);\n  }\n  if (output[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(output[\"IsTruncated\"]);\n  }\n  if (output.Part === \"\") {\n    contents.Parts = [];\n  } else if (output[\"Part\"] !== undefined) {\n    contents.Parts = deserializeAws_restXmlPartsList(__getArrayIfSingleItem(output[\"Part\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGrant = (output, context) => {\n  const contents = {\n    Grantee: undefined,\n    Permission: undefined\n  };\n  if (output[\"Grantee\"] !== undefined) {\n    contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n  }\n  if (output[\"Permission\"] !== undefined) {\n    contents.Permission = __expectString(output[\"Permission\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGrantee = (output, context) => {\n  const contents = {\n    DisplayName: undefined,\n    EmailAddress: undefined,\n    ID: undefined,\n    URI: undefined,\n    Type: undefined\n  };\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = __expectString(output[\"DisplayName\"]);\n  }\n  if (output[\"EmailAddress\"] !== undefined) {\n    contents.EmailAddress = __expectString(output[\"EmailAddress\"]);\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = __expectString(output[\"ID\"]);\n  }\n  if (output[\"URI\"] !== undefined) {\n    contents.URI = __expectString(output[\"URI\"]);\n  }\n  if (output[\"xsi:type\"] !== undefined) {\n    contents.Type = __expectString(output[\"xsi:type\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlGrants = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlGrant(entry, context);\n  });\n};\nconst deserializeAws_restXmlIndexDocument = (output, context) => {\n  const contents = {\n    Suffix: undefined\n  };\n  if (output[\"Suffix\"] !== undefined) {\n    contents.Suffix = __expectString(output[\"Suffix\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlInitiator = (output, context) => {\n  const contents = {\n    ID: undefined,\n    DisplayName: undefined\n  };\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = __expectString(output[\"ID\"]);\n  }\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = __expectString(output[\"DisplayName\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlIntelligentTieringAndOperator = (output, context) => {\n  const contents = {\n    Prefix: undefined,\n    Tags: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  } else if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlIntelligentTieringConfiguration = (output, context) => {\n  const contents = {\n    Id: undefined,\n    Filter: undefined,\n    Status: undefined,\n    Tierings: undefined\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = __expectString(output[\"Id\"]);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlIntelligentTieringFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  if (output.Tiering === \"\") {\n    contents.Tierings = [];\n  } else if (output[\"Tiering\"] !== undefined) {\n    contents.Tierings = deserializeAws_restXmlTieringList(__getArrayIfSingleItem(output[\"Tiering\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlIntelligentTieringConfigurationList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlIntelligentTieringConfiguration(entry, context);\n  });\n};\nconst deserializeAws_restXmlIntelligentTieringFilter = (output, context) => {\n  const contents = {\n    Prefix: undefined,\n    Tag: undefined,\n    And: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tag = deserializeAws_restXmlTag(output[\"Tag\"], context);\n  }\n  if (output[\"And\"] !== undefined) {\n    contents.And = deserializeAws_restXmlIntelligentTieringAndOperator(output[\"And\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlInventoryConfiguration = (output, context) => {\n  const contents = {\n    Destination: undefined,\n    IsEnabled: undefined,\n    Filter: undefined,\n    Id: undefined,\n    IncludedObjectVersions: undefined,\n    OptionalFields: undefined,\n    Schedule: undefined\n  };\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlInventoryDestination(output[\"Destination\"], context);\n  }\n  if (output[\"IsEnabled\"] !== undefined) {\n    contents.IsEnabled = __parseBoolean(output[\"IsEnabled\"]);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlInventoryFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = __expectString(output[\"Id\"]);\n  }\n  if (output[\"IncludedObjectVersions\"] !== undefined) {\n    contents.IncludedObjectVersions = __expectString(output[\"IncludedObjectVersions\"]);\n  }\n  if (output.OptionalFields === \"\") {\n    contents.OptionalFields = [];\n  } else if (output[\"OptionalFields\"] !== undefined && output[\"OptionalFields\"][\"Field\"] !== undefined) {\n    contents.OptionalFields = deserializeAws_restXmlInventoryOptionalFields(__getArrayIfSingleItem(output[\"OptionalFields\"][\"Field\"]), context);\n  }\n  if (output[\"Schedule\"] !== undefined) {\n    contents.Schedule = deserializeAws_restXmlInventorySchedule(output[\"Schedule\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlInventoryConfigurationList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlInventoryConfiguration(entry, context);\n  });\n};\nconst deserializeAws_restXmlInventoryDestination = (output, context) => {\n  const contents = {\n    S3BucketDestination: undefined\n  };\n  if (output[\"S3BucketDestination\"] !== undefined) {\n    contents.S3BucketDestination = deserializeAws_restXmlInventoryS3BucketDestination(output[\"S3BucketDestination\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlInventoryEncryption = (output, context) => {\n  const contents = {\n    SSES3: undefined,\n    SSEKMS: undefined\n  };\n  if (output[\"SSE-S3\"] !== undefined) {\n    contents.SSES3 = deserializeAws_restXmlSSES3(output[\"SSE-S3\"], context);\n  }\n  if (output[\"SSE-KMS\"] !== undefined) {\n    contents.SSEKMS = deserializeAws_restXmlSSEKMS(output[\"SSE-KMS\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlInventoryFilter = (output, context) => {\n  const contents = {\n    Prefix: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlInventoryOptionalFields = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst deserializeAws_restXmlInventoryS3BucketDestination = (output, context) => {\n  const contents = {\n    AccountId: undefined,\n    Bucket: undefined,\n    Format: undefined,\n    Prefix: undefined,\n    Encryption: undefined\n  };\n  if (output[\"AccountId\"] !== undefined) {\n    contents.AccountId = __expectString(output[\"AccountId\"]);\n  }\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = __expectString(output[\"Bucket\"]);\n  }\n  if (output[\"Format\"] !== undefined) {\n    contents.Format = __expectString(output[\"Format\"]);\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output[\"Encryption\"] !== undefined) {\n    contents.Encryption = deserializeAws_restXmlInventoryEncryption(output[\"Encryption\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlInventorySchedule = (output, context) => {\n  const contents = {\n    Frequency: undefined\n  };\n  if (output[\"Frequency\"] !== undefined) {\n    contents.Frequency = __expectString(output[\"Frequency\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlLambdaFunctionConfiguration = (output, context) => {\n  const contents = {\n    Id: undefined,\n    LambdaFunctionArn: undefined,\n    Events: undefined,\n    Filter: undefined\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = __expectString(output[\"Id\"]);\n  }\n  if (output[\"CloudFunction\"] !== undefined) {\n    contents.LambdaFunctionArn = __expectString(output[\"CloudFunction\"]);\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  } else if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlLambdaFunctionConfigurationList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n  });\n};\nconst deserializeAws_restXmlLifecycleExpiration = (output, context) => {\n  const contents = {\n    Date: undefined,\n    Days: undefined,\n    ExpiredObjectDeleteMarker: undefined\n  };\n  if (output[\"Date\"] !== undefined) {\n    contents.Date = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Date\"]));\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = __strictParseInt32(output[\"Days\"]);\n  }\n  if (output[\"ExpiredObjectDeleteMarker\"] !== undefined) {\n    contents.ExpiredObjectDeleteMarker = __parseBoolean(output[\"ExpiredObjectDeleteMarker\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlLifecycleRule = (output, context) => {\n  const contents = {\n    Expiration: undefined,\n    ID: undefined,\n    Prefix: undefined,\n    Filter: undefined,\n    Status: undefined,\n    Transitions: undefined,\n    NoncurrentVersionTransitions: undefined,\n    NoncurrentVersionExpiration: undefined,\n    AbortIncompleteMultipartUpload: undefined\n  };\n  if (output[\"Expiration\"] !== undefined) {\n    contents.Expiration = deserializeAws_restXmlLifecycleExpiration(output[\"Expiration\"], context);\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = __expectString(output[\"ID\"]);\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output.Filter === \"\") {} else if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlLifecycleRuleFilter(__expectUnion(output[\"Filter\"]), context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  if (output.Transition === \"\") {\n    contents.Transitions = [];\n  } else if (output[\"Transition\"] !== undefined) {\n    contents.Transitions = deserializeAws_restXmlTransitionList(__getArrayIfSingleItem(output[\"Transition\"]), context);\n  }\n  if (output.NoncurrentVersionTransition === \"\") {\n    contents.NoncurrentVersionTransitions = [];\n  } else if (output[\"NoncurrentVersionTransition\"] !== undefined) {\n    contents.NoncurrentVersionTransitions = deserializeAws_restXmlNoncurrentVersionTransitionList(__getArrayIfSingleItem(output[\"NoncurrentVersionTransition\"]), context);\n  }\n  if (output[\"NoncurrentVersionExpiration\"] !== undefined) {\n    contents.NoncurrentVersionExpiration = deserializeAws_restXmlNoncurrentVersionExpiration(output[\"NoncurrentVersionExpiration\"], context);\n  }\n  if (output[\"AbortIncompleteMultipartUpload\"] !== undefined) {\n    contents.AbortIncompleteMultipartUpload = deserializeAws_restXmlAbortIncompleteMultipartUpload(output[\"AbortIncompleteMultipartUpload\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlLifecycleRuleAndOperator = (output, context) => {\n  const contents = {\n    Prefix: undefined,\n    Tags: undefined,\n    ObjectSizeGreaterThan: undefined,\n    ObjectSizeLessThan: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  } else if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  if (output[\"ObjectSizeGreaterThan\"] !== undefined) {\n    contents.ObjectSizeGreaterThan = __strictParseLong(output[\"ObjectSizeGreaterThan\"]);\n  }\n  if (output[\"ObjectSizeLessThan\"] !== undefined) {\n    contents.ObjectSizeLessThan = __strictParseLong(output[\"ObjectSizeLessThan\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlLifecycleRuleFilter = (output, context) => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: __expectString(output[\"Prefix\"])\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context)\n    };\n  }\n  if (output[\"ObjectSizeGreaterThan\"] !== undefined) {\n    return {\n      ObjectSizeGreaterThan: __strictParseLong(output[\"ObjectSizeGreaterThan\"])\n    };\n  }\n  if (output[\"ObjectSizeLessThan\"] !== undefined) {\n    return {\n      ObjectSizeLessThan: __strictParseLong(output[\"ObjectSizeLessThan\"])\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlLifecycleRuleAndOperator(output[\"And\"], context)\n    };\n  }\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\nconst deserializeAws_restXmlLifecycleRules = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlLifecycleRule(entry, context);\n  });\n};\nconst deserializeAws_restXmlLoggingEnabled = (output, context) => {\n  const contents = {\n    TargetBucket: undefined,\n    TargetGrants: undefined,\n    TargetPrefix: undefined\n  };\n  if (output[\"TargetBucket\"] !== undefined) {\n    contents.TargetBucket = __expectString(output[\"TargetBucket\"]);\n  }\n  if (output.TargetGrants === \"\") {\n    contents.TargetGrants = [];\n  } else if (output[\"TargetGrants\"] !== undefined && output[\"TargetGrants\"][\"Grant\"] !== undefined) {\n    contents.TargetGrants = deserializeAws_restXmlTargetGrants(__getArrayIfSingleItem(output[\"TargetGrants\"][\"Grant\"]), context);\n  }\n  if (output[\"TargetPrefix\"] !== undefined) {\n    contents.TargetPrefix = __expectString(output[\"TargetPrefix\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlMetrics = (output, context) => {\n  const contents = {\n    Status: undefined,\n    EventThreshold: undefined\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  if (output[\"EventThreshold\"] !== undefined) {\n    contents.EventThreshold = deserializeAws_restXmlReplicationTimeValue(output[\"EventThreshold\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlMetricsAndOperator = (output, context) => {\n  const contents = {\n    Prefix: undefined,\n    Tags: undefined,\n    AccessPointArn: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  } else if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  if (output[\"AccessPointArn\"] !== undefined) {\n    contents.AccessPointArn = __expectString(output[\"AccessPointArn\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlMetricsConfiguration = (output, context) => {\n  const contents = {\n    Id: undefined,\n    Filter: undefined\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = __expectString(output[\"Id\"]);\n  }\n  if (output.Filter === \"\") {} else if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlMetricsFilter(__expectUnion(output[\"Filter\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlMetricsConfigurationList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlMetricsConfiguration(entry, context);\n  });\n};\nconst deserializeAws_restXmlMetricsFilter = (output, context) => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: __expectString(output[\"Prefix\"])\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context)\n    };\n  }\n  if (output[\"AccessPointArn\"] !== undefined) {\n    return {\n      AccessPointArn: __expectString(output[\"AccessPointArn\"])\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlMetricsAndOperator(output[\"And\"], context)\n    };\n  }\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\nconst deserializeAws_restXmlMultipartUpload = (output, context) => {\n  const contents = {\n    UploadId: undefined,\n    Key: undefined,\n    Initiated: undefined,\n    StorageClass: undefined,\n    Owner: undefined,\n    Initiator: undefined,\n    ChecksumAlgorithm: undefined\n  };\n  if (output[\"UploadId\"] !== undefined) {\n    contents.UploadId = __expectString(output[\"UploadId\"]);\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  if (output[\"Initiated\"] !== undefined) {\n    contents.Initiated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Initiated\"]));\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(output[\"StorageClass\"]);\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  if (output[\"Initiator\"] !== undefined) {\n    contents.Initiator = deserializeAws_restXmlInitiator(output[\"Initiator\"], context);\n  }\n  if (output[\"ChecksumAlgorithm\"] !== undefined) {\n    contents.ChecksumAlgorithm = __expectString(output[\"ChecksumAlgorithm\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlMultipartUploadList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlMultipartUpload(entry, context);\n  });\n};\nconst deserializeAws_restXmlNoncurrentVersionExpiration = (output, context) => {\n  const contents = {\n    NoncurrentDays: undefined,\n    NewerNoncurrentVersions: undefined\n  };\n  if (output[\"NoncurrentDays\"] !== undefined) {\n    contents.NoncurrentDays = __strictParseInt32(output[\"NoncurrentDays\"]);\n  }\n  if (output[\"NewerNoncurrentVersions\"] !== undefined) {\n    contents.NewerNoncurrentVersions = __strictParseInt32(output[\"NewerNoncurrentVersions\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlNoncurrentVersionTransition = (output, context) => {\n  const contents = {\n    NoncurrentDays: undefined,\n    StorageClass: undefined,\n    NewerNoncurrentVersions: undefined\n  };\n  if (output[\"NoncurrentDays\"] !== undefined) {\n    contents.NoncurrentDays = __strictParseInt32(output[\"NoncurrentDays\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(output[\"StorageClass\"]);\n  }\n  if (output[\"NewerNoncurrentVersions\"] !== undefined) {\n    contents.NewerNoncurrentVersions = __strictParseInt32(output[\"NewerNoncurrentVersions\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlNoncurrentVersionTransitionList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlNoncurrentVersionTransition(entry, context);\n  });\n};\nconst deserializeAws_restXmlNotificationConfigurationFilter = (output, context) => {\n  const contents = {\n    Key: undefined\n  };\n  if (output[\"S3Key\"] !== undefined) {\n    contents.Key = deserializeAws_restXmlS3KeyFilter(output[\"S3Key\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXml_Object = (output, context) => {\n  const contents = {\n    Key: undefined,\n    LastModified: undefined,\n    ETag: undefined,\n    ChecksumAlgorithm: undefined,\n    Size: undefined,\n    StorageClass: undefined,\n    Owner: undefined\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n  }\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = __expectString(output[\"ETag\"]);\n  }\n  if (output.ChecksumAlgorithm === \"\") {\n    contents.ChecksumAlgorithm = [];\n  } else if (output[\"ChecksumAlgorithm\"] !== undefined) {\n    contents.ChecksumAlgorithm = deserializeAws_restXmlChecksumAlgorithmList(__getArrayIfSingleItem(output[\"ChecksumAlgorithm\"]), context);\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = __strictParseLong(output[\"Size\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(output[\"StorageClass\"]);\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlObjectList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXml_Object(entry, context);\n  });\n};\nconst deserializeAws_restXmlObjectLockConfiguration = (output, context) => {\n  const contents = {\n    ObjectLockEnabled: undefined,\n    Rule: undefined\n  };\n  if (output[\"ObjectLockEnabled\"] !== undefined) {\n    contents.ObjectLockEnabled = __expectString(output[\"ObjectLockEnabled\"]);\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rule = deserializeAws_restXmlObjectLockRule(output[\"Rule\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlObjectLockLegalHold = (output, context) => {\n  const contents = {\n    Status: undefined\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlObjectLockRetention = (output, context) => {\n  const contents = {\n    Mode: undefined,\n    RetainUntilDate: undefined\n  };\n  if (output[\"Mode\"] !== undefined) {\n    contents.Mode = __expectString(output[\"Mode\"]);\n  }\n  if (output[\"RetainUntilDate\"] !== undefined) {\n    contents.RetainUntilDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"RetainUntilDate\"]));\n  }\n  return contents;\n};\nconst deserializeAws_restXmlObjectLockRule = (output, context) => {\n  const contents = {\n    DefaultRetention: undefined\n  };\n  if (output[\"DefaultRetention\"] !== undefined) {\n    contents.DefaultRetention = deserializeAws_restXmlDefaultRetention(output[\"DefaultRetention\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlObjectPart = (output, context) => {\n  const contents = {\n    PartNumber: undefined,\n    Size: undefined,\n    ChecksumCRC32: undefined,\n    ChecksumCRC32C: undefined,\n    ChecksumSHA1: undefined,\n    ChecksumSHA256: undefined\n  };\n  if (output[\"PartNumber\"] !== undefined) {\n    contents.PartNumber = __strictParseInt32(output[\"PartNumber\"]);\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = __strictParseLong(output[\"Size\"]);\n  }\n  if (output[\"ChecksumCRC32\"] !== undefined) {\n    contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n  }\n  if (output[\"ChecksumCRC32C\"] !== undefined) {\n    contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n  }\n  if (output[\"ChecksumSHA1\"] !== undefined) {\n    contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n  }\n  if (output[\"ChecksumSHA256\"] !== undefined) {\n    contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlObjectVersion = (output, context) => {\n  const contents = {\n    ETag: undefined,\n    ChecksumAlgorithm: undefined,\n    Size: undefined,\n    StorageClass: undefined,\n    Key: undefined,\n    VersionId: undefined,\n    IsLatest: undefined,\n    LastModified: undefined,\n    Owner: undefined\n  };\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = __expectString(output[\"ETag\"]);\n  }\n  if (output.ChecksumAlgorithm === \"\") {\n    contents.ChecksumAlgorithm = [];\n  } else if (output[\"ChecksumAlgorithm\"] !== undefined) {\n    contents.ChecksumAlgorithm = deserializeAws_restXmlChecksumAlgorithmList(__getArrayIfSingleItem(output[\"ChecksumAlgorithm\"]), context);\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = __strictParseLong(output[\"Size\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(output[\"StorageClass\"]);\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = __expectString(output[\"VersionId\"]);\n  }\n  if (output[\"IsLatest\"] !== undefined) {\n    contents.IsLatest = __parseBoolean(output[\"IsLatest\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlObjectVersionList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlObjectVersion(entry, context);\n  });\n};\nconst deserializeAws_restXmlOwner = (output, context) => {\n  const contents = {\n    DisplayName: undefined,\n    ID: undefined\n  };\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = __expectString(output[\"DisplayName\"]);\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = __expectString(output[\"ID\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlOwnershipControls = (output, context) => {\n  const contents = {\n    Rules: undefined\n  };\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  } else if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlOwnershipControlsRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlOwnershipControlsRule = (output, context) => {\n  const contents = {\n    ObjectOwnership: undefined\n  };\n  if (output[\"ObjectOwnership\"] !== undefined) {\n    contents.ObjectOwnership = __expectString(output[\"ObjectOwnership\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlOwnershipControlsRules = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlOwnershipControlsRule(entry, context);\n  });\n};\nconst deserializeAws_restXmlPart = (output, context) => {\n  const contents = {\n    PartNumber: undefined,\n    LastModified: undefined,\n    ETag: undefined,\n    Size: undefined,\n    ChecksumCRC32: undefined,\n    ChecksumCRC32C: undefined,\n    ChecksumSHA1: undefined,\n    ChecksumSHA256: undefined\n  };\n  if (output[\"PartNumber\"] !== undefined) {\n    contents.PartNumber = __strictParseInt32(output[\"PartNumber\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n  }\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = __expectString(output[\"ETag\"]);\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = __strictParseLong(output[\"Size\"]);\n  }\n  if (output[\"ChecksumCRC32\"] !== undefined) {\n    contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n  }\n  if (output[\"ChecksumCRC32C\"] !== undefined) {\n    contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n  }\n  if (output[\"ChecksumSHA1\"] !== undefined) {\n    contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n  }\n  if (output[\"ChecksumSHA256\"] !== undefined) {\n    contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlParts = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlPart(entry, context);\n  });\n};\nconst deserializeAws_restXmlPartsList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlObjectPart(entry, context);\n  });\n};\nconst deserializeAws_restXmlPolicyStatus = (output, context) => {\n  const contents = {\n    IsPublic: undefined\n  };\n  if (output[\"IsPublic\"] !== undefined) {\n    contents.IsPublic = __parseBoolean(output[\"IsPublic\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlProgress = (output, context) => {\n  const contents = {\n    BytesScanned: undefined,\n    BytesProcessed: undefined,\n    BytesReturned: undefined\n  };\n  if (output[\"BytesScanned\"] !== undefined) {\n    contents.BytesScanned = __strictParseLong(output[\"BytesScanned\"]);\n  }\n  if (output[\"BytesProcessed\"] !== undefined) {\n    contents.BytesProcessed = __strictParseLong(output[\"BytesProcessed\"]);\n  }\n  if (output[\"BytesReturned\"] !== undefined) {\n    contents.BytesReturned = __strictParseLong(output[\"BytesReturned\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlPublicAccessBlockConfiguration = (output, context) => {\n  const contents = {\n    BlockPublicAcls: undefined,\n    IgnorePublicAcls: undefined,\n    BlockPublicPolicy: undefined,\n    RestrictPublicBuckets: undefined\n  };\n  if (output[\"BlockPublicAcls\"] !== undefined) {\n    contents.BlockPublicAcls = __parseBoolean(output[\"BlockPublicAcls\"]);\n  }\n  if (output[\"IgnorePublicAcls\"] !== undefined) {\n    contents.IgnorePublicAcls = __parseBoolean(output[\"IgnorePublicAcls\"]);\n  }\n  if (output[\"BlockPublicPolicy\"] !== undefined) {\n    contents.BlockPublicPolicy = __parseBoolean(output[\"BlockPublicPolicy\"]);\n  }\n  if (output[\"RestrictPublicBuckets\"] !== undefined) {\n    contents.RestrictPublicBuckets = __parseBoolean(output[\"RestrictPublicBuckets\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlQueueConfiguration = (output, context) => {\n  const contents = {\n    Id: undefined,\n    QueueArn: undefined,\n    Events: undefined,\n    Filter: undefined\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = __expectString(output[\"Id\"]);\n  }\n  if (output[\"Queue\"] !== undefined) {\n    contents.QueueArn = __expectString(output[\"Queue\"]);\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  } else if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlQueueConfigurationList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlQueueConfiguration(entry, context);\n  });\n};\nconst deserializeAws_restXmlRedirect = (output, context) => {\n  const contents = {\n    HostName: undefined,\n    HttpRedirectCode: undefined,\n    Protocol: undefined,\n    ReplaceKeyPrefixWith: undefined,\n    ReplaceKeyWith: undefined\n  };\n  if (output[\"HostName\"] !== undefined) {\n    contents.HostName = __expectString(output[\"HostName\"]);\n  }\n  if (output[\"HttpRedirectCode\"] !== undefined) {\n    contents.HttpRedirectCode = __expectString(output[\"HttpRedirectCode\"]);\n  }\n  if (output[\"Protocol\"] !== undefined) {\n    contents.Protocol = __expectString(output[\"Protocol\"]);\n  }\n  if (output[\"ReplaceKeyPrefixWith\"] !== undefined) {\n    contents.ReplaceKeyPrefixWith = __expectString(output[\"ReplaceKeyPrefixWith\"]);\n  }\n  if (output[\"ReplaceKeyWith\"] !== undefined) {\n    contents.ReplaceKeyWith = __expectString(output[\"ReplaceKeyWith\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlRedirectAllRequestsTo = (output, context) => {\n  const contents = {\n    HostName: undefined,\n    Protocol: undefined\n  };\n  if (output[\"HostName\"] !== undefined) {\n    contents.HostName = __expectString(output[\"HostName\"]);\n  }\n  if (output[\"Protocol\"] !== undefined) {\n    contents.Protocol = __expectString(output[\"Protocol\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlReplicaModifications = (output, context) => {\n  const contents = {\n    Status: undefined\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlReplicationConfiguration = (output, context) => {\n  const contents = {\n    Role: undefined,\n    Rules: undefined\n  };\n  if (output[\"Role\"] !== undefined) {\n    contents.Role = __expectString(output[\"Role\"]);\n  }\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  } else if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlReplicationRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlReplicationRule = (output, context) => {\n  const contents = {\n    ID: undefined,\n    Priority: undefined,\n    Prefix: undefined,\n    Filter: undefined,\n    Status: undefined,\n    SourceSelectionCriteria: undefined,\n    ExistingObjectReplication: undefined,\n    Destination: undefined,\n    DeleteMarkerReplication: undefined\n  };\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = __expectString(output[\"ID\"]);\n  }\n  if (output[\"Priority\"] !== undefined) {\n    contents.Priority = __strictParseInt32(output[\"Priority\"]);\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output.Filter === \"\") {} else if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlReplicationRuleFilter(__expectUnion(output[\"Filter\"]), context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  if (output[\"SourceSelectionCriteria\"] !== undefined) {\n    contents.SourceSelectionCriteria = deserializeAws_restXmlSourceSelectionCriteria(output[\"SourceSelectionCriteria\"], context);\n  }\n  if (output[\"ExistingObjectReplication\"] !== undefined) {\n    contents.ExistingObjectReplication = deserializeAws_restXmlExistingObjectReplication(output[\"ExistingObjectReplication\"], context);\n  }\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlDestination(output[\"Destination\"], context);\n  }\n  if (output[\"DeleteMarkerReplication\"] !== undefined) {\n    contents.DeleteMarkerReplication = deserializeAws_restXmlDeleteMarkerReplication(output[\"DeleteMarkerReplication\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlReplicationRuleAndOperator = (output, context) => {\n  const contents = {\n    Prefix: undefined,\n    Tags: undefined\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  } else if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlReplicationRuleFilter = (output, context) => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: __expectString(output[\"Prefix\"])\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context)\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlReplicationRuleAndOperator(output[\"And\"], context)\n    };\n  }\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\nconst deserializeAws_restXmlReplicationRules = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlReplicationRule(entry, context);\n  });\n};\nconst deserializeAws_restXmlReplicationTime = (output, context) => {\n  const contents = {\n    Status: undefined,\n    Time: undefined\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  if (output[\"Time\"] !== undefined) {\n    contents.Time = deserializeAws_restXmlReplicationTimeValue(output[\"Time\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlReplicationTimeValue = (output, context) => {\n  const contents = {\n    Minutes: undefined\n  };\n  if (output[\"Minutes\"] !== undefined) {\n    contents.Minutes = __strictParseInt32(output[\"Minutes\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlRoutingRule = (output, context) => {\n  const contents = {\n    Condition: undefined,\n    Redirect: undefined\n  };\n  if (output[\"Condition\"] !== undefined) {\n    contents.Condition = deserializeAws_restXmlCondition(output[\"Condition\"], context);\n  }\n  if (output[\"Redirect\"] !== undefined) {\n    contents.Redirect = deserializeAws_restXmlRedirect(output[\"Redirect\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlRoutingRules = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlRoutingRule(entry, context);\n  });\n};\nconst deserializeAws_restXmlS3KeyFilter = (output, context) => {\n  const contents = {\n    FilterRules: undefined\n  };\n  if (output.FilterRule === \"\") {\n    contents.FilterRules = [];\n  } else if (output[\"FilterRule\"] !== undefined) {\n    contents.FilterRules = deserializeAws_restXmlFilterRuleList(__getArrayIfSingleItem(output[\"FilterRule\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlServerSideEncryptionByDefault = (output, context) => {\n  const contents = {\n    SSEAlgorithm: undefined,\n    KMSMasterKeyID: undefined\n  };\n  if (output[\"SSEAlgorithm\"] !== undefined) {\n    contents.SSEAlgorithm = __expectString(output[\"SSEAlgorithm\"]);\n  }\n  if (output[\"KMSMasterKeyID\"] !== undefined) {\n    contents.KMSMasterKeyID = __expectString(output[\"KMSMasterKeyID\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlServerSideEncryptionConfiguration = (output, context) => {\n  const contents = {\n    Rules: undefined\n  };\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  } else if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlServerSideEncryptionRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlServerSideEncryptionRule = (output, context) => {\n  const contents = {\n    ApplyServerSideEncryptionByDefault: undefined,\n    BucketKeyEnabled: undefined\n  };\n  if (output[\"ApplyServerSideEncryptionByDefault\"] !== undefined) {\n    contents.ApplyServerSideEncryptionByDefault = deserializeAws_restXmlServerSideEncryptionByDefault(output[\"ApplyServerSideEncryptionByDefault\"], context);\n  }\n  if (output[\"BucketKeyEnabled\"] !== undefined) {\n    contents.BucketKeyEnabled = __parseBoolean(output[\"BucketKeyEnabled\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlServerSideEncryptionRules = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlServerSideEncryptionRule(entry, context);\n  });\n};\nconst deserializeAws_restXmlSourceSelectionCriteria = (output, context) => {\n  const contents = {\n    SseKmsEncryptedObjects: undefined,\n    ReplicaModifications: undefined\n  };\n  if (output[\"SseKmsEncryptedObjects\"] !== undefined) {\n    contents.SseKmsEncryptedObjects = deserializeAws_restXmlSseKmsEncryptedObjects(output[\"SseKmsEncryptedObjects\"], context);\n  }\n  if (output[\"ReplicaModifications\"] !== undefined) {\n    contents.ReplicaModifications = deserializeAws_restXmlReplicaModifications(output[\"ReplicaModifications\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlSSEKMS = (output, context) => {\n  const contents = {\n    KeyId: undefined\n  };\n  if (output[\"KeyId\"] !== undefined) {\n    contents.KeyId = __expectString(output[\"KeyId\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlSseKmsEncryptedObjects = (output, context) => {\n  const contents = {\n    Status: undefined\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlSSES3 = (output, context) => {\n  const contents = {};\n  return contents;\n};\nconst deserializeAws_restXmlStats = (output, context) => {\n  const contents = {\n    BytesScanned: undefined,\n    BytesProcessed: undefined,\n    BytesReturned: undefined\n  };\n  if (output[\"BytesScanned\"] !== undefined) {\n    contents.BytesScanned = __strictParseLong(output[\"BytesScanned\"]);\n  }\n  if (output[\"BytesProcessed\"] !== undefined) {\n    contents.BytesProcessed = __strictParseLong(output[\"BytesProcessed\"]);\n  }\n  if (output[\"BytesReturned\"] !== undefined) {\n    contents.BytesReturned = __strictParseLong(output[\"BytesReturned\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlStorageClassAnalysis = (output, context) => {\n  const contents = {\n    DataExport: undefined\n  };\n  if (output[\"DataExport\"] !== undefined) {\n    contents.DataExport = deserializeAws_restXmlStorageClassAnalysisDataExport(output[\"DataExport\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlStorageClassAnalysisDataExport = (output, context) => {\n  const contents = {\n    OutputSchemaVersion: undefined,\n    Destination: undefined\n  };\n  if (output[\"OutputSchemaVersion\"] !== undefined) {\n    contents.OutputSchemaVersion = __expectString(output[\"OutputSchemaVersion\"]);\n  }\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlAnalyticsExportDestination(output[\"Destination\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlTag = (output, context) => {\n  const contents = {\n    Key: undefined,\n    Value: undefined\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  if (output[\"Value\"] !== undefined) {\n    contents.Value = __expectString(output[\"Value\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlTagSet = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlTag(entry, context);\n  });\n};\nconst deserializeAws_restXmlTargetGrant = (output, context) => {\n  const contents = {\n    Grantee: undefined,\n    Permission: undefined\n  };\n  if (output[\"Grantee\"] !== undefined) {\n    contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n  }\n  if (output[\"Permission\"] !== undefined) {\n    contents.Permission = __expectString(output[\"Permission\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlTargetGrants = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlTargetGrant(entry, context);\n  });\n};\nconst deserializeAws_restXmlTiering = (output, context) => {\n  const contents = {\n    Days: undefined,\n    AccessTier: undefined\n  };\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = __strictParseInt32(output[\"Days\"]);\n  }\n  if (output[\"AccessTier\"] !== undefined) {\n    contents.AccessTier = __expectString(output[\"AccessTier\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlTieringList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlTiering(entry, context);\n  });\n};\nconst deserializeAws_restXmlTopicConfiguration = (output, context) => {\n  const contents = {\n    Id: undefined,\n    TopicArn: undefined,\n    Events: undefined,\n    Filter: undefined\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = __expectString(output[\"Id\"]);\n  }\n  if (output[\"Topic\"] !== undefined) {\n    contents.TopicArn = __expectString(output[\"Topic\"]);\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  } else if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlTopicConfigurationList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlTopicConfiguration(entry, context);\n  });\n};\nconst deserializeAws_restXmlTransition = (output, context) => {\n  const contents = {\n    Date: undefined,\n    Days: undefined,\n    StorageClass: undefined\n  };\n  if (output[\"Date\"] !== undefined) {\n    contents.Date = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Date\"]));\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = __strictParseInt32(output[\"Days\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(output[\"StorageClass\"]);\n  }\n  return contents;\n};\nconst deserializeAws_restXmlTransitionList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return deserializeAws_restXmlTransition(entry, context);\n  });\n};\nconst deserializeMetadata = output => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"]\n});\nconst collectBody = function () {\n  let streamBody = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n  let context = arguments.length > 1 ? arguments[1] : undefined;\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then(body => context.utf8Encoder(body));\nconst isSerializableHeaderValue = value => value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then(encoded => {\n  if (encoded.length) {\n    const parser = new XMLParser({\n      attributeNamePrefix: \"\",\n      htmlEntities: true,\n      ignoreAttributes: false,\n      ignoreDeclaration: true,\n      parseTagValue: false,\n      trimValues: false,\n      tagValueProcessor: (_, val) => val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : undefined\n    });\n    parser.addEntity(\"#xD\", \"\\r\");\n    parser.addEntity(\"#10\", \"\\n\");\n    const parsedObj = parser.parse(encoded);\n    const textNodeName = \"#text\";\n    const key = Object.keys(parsedObj)[0];\n    const parsedObjToReturn = parsedObj[key];\n    if (parsedObjToReturn[textNodeName]) {\n      parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n      delete parsedObjToReturn[textNodeName];\n    }\n    return __getValueFromTextNode(parsedObjToReturn);\n  }\n  return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n  const value = await parseBody(errorBody, context);\n  if (value.Error) {\n    value.Error.message = value.Error.message ?? value.Error.Message;\n  }\n  return value;\n};\nconst loadRestXmlErrorCode = (output, data) => {\n  if (data?.Code !== undefined) {\n    return data.Code;\n  }\n  if (output.statusCode == 404) {\n    return \"NotFound\";\n  }\n};","map":{"version":3,"names":["HttpRequest","__HttpRequest","isValidHostname","__isValidHostname","dateToUtcString","__dateToUtcString","decorateServiceException","__decorateServiceException","expectNonNull","__expectNonNull","expectObject","__expectObject","expectString","__expectString","expectUnion","__expectUnion","getArrayIfSingleItem","__getArrayIfSingleItem","getValueFromTextNode","__getValueFromTextNode","map","__map","parseBoolean","__parseBoolean","parseRfc3339DateTimeWithOffset","__parseRfc3339DateTimeWithOffset","parseRfc7231DateTime","__parseRfc7231DateTime","resolvedPath","__resolvedPath","strictParseInt32","__strictParseInt32","strictParseLong","__strictParseLong","throwDefaultError","XmlNode","__XmlNode","XmlText","__XmlText","XMLParser","AnalyticsFilter","BucketAlreadyExists","BucketAlreadyOwnedByYou","InvalidObjectState","LifecycleRuleFilter","MetricsFilter","NoSuchBucket","NoSuchKey","NoSuchUpload","NotFound","ObjectNotInActiveTierError","ReplicationRuleFilter","ObjectAlreadyInActiveTierError","S3ServiceException","__BaseException","serializeAws_restXmlAbortMultipartUploadCommand","input","context","hostname","protocol","port","path","basePath","endpoint","headers","isSerializableHeaderValue","RequestPayer","ExpectedBucketOwner","endsWith","slice","Bucket","Key","query","uploadId","UploadId","body","method","serializeAws_restXmlCompleteMultipartUploadCommand","ChecksumCRC32","ChecksumCRC32C","ChecksumSHA1","ChecksumSHA256","SSECustomerAlgorithm","SSECustomerKey","SSECustomerKeyMD5","MultipartUpload","undefined","serializeAws_restXmlCompletedMultipartUpload","contents","withName","addAttribute","toString","serializeAws_restXmlCopyObjectCommand","ACL","CacheControl","ChecksumAlgorithm","ContentDisposition","ContentEncoding","ContentLanguage","ContentType","CopySource","CopySourceIfMatch","CopySourceIfModifiedSince","CopySourceIfNoneMatch","CopySourceIfUnmodifiedSince","expires","Expires","GrantFullControl","GrantRead","GrantReadACP","GrantWriteACP","MetadataDirective","TaggingDirective","ServerSideEncryption","StorageClass","WebsiteRedirectLocation","SSEKMSKeyId","SSEKMSEncryptionContext","BucketKeyEnabled","CopySourceSSECustomerAlgorithm","CopySourceSSECustomerKey","CopySourceSSECustomerKeyMD5","Tagging","ObjectLockMode","ObjectLockRetainUntilDate","toISOString","split","ObjectLockLegalHoldStatus","ExpectedSourceBucketOwner","Metadata","Object","keys","reduce","acc","suffix","toLowerCase","serializeAws_restXmlCreateBucketCommand","GrantWrite","ObjectLockEnabledForBucket","ObjectOwnership","CreateBucketConfiguration","serializeAws_restXmlCreateBucketConfiguration","serializeAws_restXmlCreateMultipartUploadCommand","uploads","serializeAws_restXmlDeleteBucketCommand","serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand","analytics","id","Id","serializeAws_restXmlDeleteBucketCorsCommand","cors","serializeAws_restXmlDeleteBucketEncryptionCommand","encryption","serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand","serializeAws_restXmlDeleteBucketInventoryConfigurationCommand","inventory","serializeAws_restXmlDeleteBucketLifecycleCommand","lifecycle","serializeAws_restXmlDeleteBucketMetricsConfigurationCommand","metrics","serializeAws_restXmlDeleteBucketOwnershipControlsCommand","ownershipControls","serializeAws_restXmlDeleteBucketPolicyCommand","policy","serializeAws_restXmlDeleteBucketReplicationCommand","replication","serializeAws_restXmlDeleteBucketTaggingCommand","tagging","serializeAws_restXmlDeleteBucketWebsiteCommand","website","serializeAws_restXmlDeleteObjectCommand","MFA","BypassGovernanceRetention","versionId","VersionId","serializeAws_restXmlDeleteObjectsCommand","delete","Delete","serializeAws_restXmlDelete","serializeAws_restXmlDeleteObjectTaggingCommand","serializeAws_restXmlDeletePublicAccessBlockCommand","publicAccessBlock","serializeAws_restXmlGetBucketAccelerateConfigurationCommand","accelerate","serializeAws_restXmlGetBucketAclCommand","acl","serializeAws_restXmlGetBucketAnalyticsConfigurationCommand","serializeAws_restXmlGetBucketCorsCommand","serializeAws_restXmlGetBucketEncryptionCommand","serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand","serializeAws_restXmlGetBucketInventoryConfigurationCommand","serializeAws_restXmlGetBucketLifecycleConfigurationCommand","serializeAws_restXmlGetBucketLocationCommand","location","serializeAws_restXmlGetBucketLoggingCommand","logging","serializeAws_restXmlGetBucketMetricsConfigurationCommand","serializeAws_restXmlGetBucketNotificationConfigurationCommand","notification","serializeAws_restXmlGetBucketOwnershipControlsCommand","serializeAws_restXmlGetBucketPolicyCommand","serializeAws_restXmlGetBucketPolicyStatusCommand","policyStatus","serializeAws_restXmlGetBucketReplicationCommand","serializeAws_restXmlGetBucketRequestPaymentCommand","requestPayment","serializeAws_restXmlGetBucketTaggingCommand","serializeAws_restXmlGetBucketVersioningCommand","versioning","serializeAws_restXmlGetBucketWebsiteCommand","serializeAws_restXmlGetObjectCommand","IfMatch","IfModifiedSince","IfNoneMatch","IfUnmodifiedSince","range","Range","ChecksumMode","ResponseCacheControl","ResponseContentDisposition","ResponseContentEncoding","ResponseContentLanguage","ResponseContentType","ResponseExpires","partNumber","PartNumber","serializeAws_restXmlGetObjectAclCommand","serializeAws_restXmlGetObjectAttributesCommand","MaxParts","PartNumberMarker","ObjectAttributes","_entry","join","attributes","serializeAws_restXmlGetObjectLegalHoldCommand","serializeAws_restXmlGetObjectLockConfigurationCommand","serializeAws_restXmlGetObjectRetentionCommand","retention","serializeAws_restXmlGetObjectTaggingCommand","serializeAws_restXmlGetObjectTorrentCommand","torrent","serializeAws_restXmlGetPublicAccessBlockCommand","serializeAws_restXmlHeadBucketCommand","serializeAws_restXmlHeadObjectCommand","serializeAws_restXmlListBucketAnalyticsConfigurationsCommand","ContinuationToken","serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand","serializeAws_restXmlListBucketInventoryConfigurationsCommand","serializeAws_restXmlListBucketMetricsConfigurationsCommand","serializeAws_restXmlListBucketsCommand","serializeAws_restXmlListMultipartUploadsCommand","delimiter","Delimiter","EncodingType","KeyMarker","MaxUploads","prefix","Prefix","UploadIdMarker","serializeAws_restXmlListObjectsCommand","marker","Marker","MaxKeys","serializeAws_restXmlListObjectsV2Command","FetchOwner","StartAfter","serializeAws_restXmlListObjectVersionsCommand","versions","VersionIdMarker","serializeAws_restXmlListPartsCommand","serializeAws_restXmlPutBucketAccelerateConfigurationCommand","AccelerateConfiguration","serializeAws_restXmlAccelerateConfiguration","serializeAws_restXmlPutBucketAclCommand","ContentMD5","AccessControlPolicy","serializeAws_restXmlAccessControlPolicy","serializeAws_restXmlPutBucketAnalyticsConfigurationCommand","AnalyticsConfiguration","serializeAws_restXmlAnalyticsConfiguration","serializeAws_restXmlPutBucketCorsCommand","CORSConfiguration","serializeAws_restXmlCORSConfiguration","serializeAws_restXmlPutBucketEncryptionCommand","ServerSideEncryptionConfiguration","serializeAws_restXmlServerSideEncryptionConfiguration","serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand","IntelligentTieringConfiguration","serializeAws_restXmlIntelligentTieringConfiguration","serializeAws_restXmlPutBucketInventoryConfigurationCommand","InventoryConfiguration","serializeAws_restXmlInventoryConfiguration","serializeAws_restXmlPutBucketLifecycleConfigurationCommand","LifecycleConfiguration","serializeAws_restXmlBucketLifecycleConfiguration","serializeAws_restXmlPutBucketLoggingCommand","BucketLoggingStatus","serializeAws_restXmlBucketLoggingStatus","serializeAws_restXmlPutBucketMetricsConfigurationCommand","MetricsConfiguration","serializeAws_restXmlMetricsConfiguration","serializeAws_restXmlPutBucketNotificationConfigurationCommand","SkipDestinationValidation","NotificationConfiguration","serializeAws_restXmlNotificationConfiguration","serializeAws_restXmlPutBucketOwnershipControlsCommand","OwnershipControls","serializeAws_restXmlOwnershipControls","serializeAws_restXmlPutBucketPolicyCommand","ConfirmRemoveSelfBucketAccess","Policy","serializeAws_restXmlPutBucketReplicationCommand","Token","ReplicationConfiguration","serializeAws_restXmlReplicationConfiguration","serializeAws_restXmlPutBucketRequestPaymentCommand","RequestPaymentConfiguration","serializeAws_restXmlRequestPaymentConfiguration","serializeAws_restXmlPutBucketTaggingCommand","serializeAws_restXmlTagging","serializeAws_restXmlPutBucketVersioningCommand","VersioningConfiguration","serializeAws_restXmlVersioningConfiguration","serializeAws_restXmlPutBucketWebsiteCommand","WebsiteConfiguration","serializeAws_restXmlWebsiteConfiguration","serializeAws_restXmlPutObjectCommand","ContentLength","Body","serializeAws_restXmlPutObjectAclCommand","serializeAws_restXmlPutObjectLegalHoldCommand","LegalHold","serializeAws_restXmlObjectLockLegalHold","serializeAws_restXmlPutObjectLockConfigurationCommand","ObjectLockConfiguration","serializeAws_restXmlObjectLockConfiguration","serializeAws_restXmlPutObjectRetentionCommand","Retention","serializeAws_restXmlObjectLockRetention","serializeAws_restXmlPutObjectTaggingCommand","serializeAws_restXmlPutPublicAccessBlockCommand","PublicAccessBlockConfiguration","serializeAws_restXmlPublicAccessBlockConfiguration","serializeAws_restXmlRestoreObjectCommand","restore","RestoreRequest","serializeAws_restXmlRestoreRequest","serializeAws_restXmlSelectObjectContentCommand","select","bodyNode","Expression","node","of","addChildNode","ExpressionType","InputSerialization","serializeAws_restXmlInputSerialization","OutputSerialization","serializeAws_restXmlOutputSerialization","RequestProgress","serializeAws_restXmlRequestProgress","ScanRange","serializeAws_restXmlScanRange","serializeAws_restXmlUploadPartCommand","serializeAws_restXmlUploadPartCopyCommand","CopySourceRange","serializeAws_restXmlWriteGetObjectResponseCommand","RequestRoute","RequestToken","StatusCode","ErrorCode","ErrorMessage","AcceptRanges","ContentRange","DeleteMarker","ETag","Expiration","LastModified","MissingMeta","PartsCount","ReplicationStatus","RequestCharged","Restore","TagCount","resolvedHostname","disableHostPrefix","Error","replace","deserializeAws_restXmlAbortMultipartUploadCommand","output","statusCode","deserializeAws_restXmlAbortMultipartUploadCommandError","$metadata","deserializeMetadata","collectBody","parsedOutput","parseErrorBody","errorCode","loadRestXmlErrorCode","deserializeAws_restXmlNoSuchUploadResponse","parsedBody","exceptionCtor","deserializeAws_restXmlCompleteMultipartUploadCommand","deserializeAws_restXmlCompleteMultipartUploadCommandError","data","parseBody","Location","deserializeAws_restXmlCopyObjectCommand","deserializeAws_restXmlCopyObjectCommandError","CopySourceVersionId","CopyObjectResult","deserializeAws_restXmlCopyObjectResult","deserializeAws_restXmlObjectNotInActiveTierErrorResponse","deserializeAws_restXmlCreateBucketCommand","deserializeAws_restXmlCreateBucketCommandError","deserializeAws_restXmlBucketAlreadyExistsResponse","deserializeAws_restXmlBucketAlreadyOwnedByYouResponse","deserializeAws_restXmlCreateMultipartUploadCommand","deserializeAws_restXmlCreateMultipartUploadCommandError","AbortDate","AbortRuleId","deserializeAws_restXmlDeleteBucketCommand","deserializeAws_restXmlDeleteBucketCommandError","deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand","deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError","deserializeAws_restXmlDeleteBucketCorsCommand","deserializeAws_restXmlDeleteBucketCorsCommandError","deserializeAws_restXmlDeleteBucketEncryptionCommand","deserializeAws_restXmlDeleteBucketEncryptionCommandError","deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand","deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError","deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand","deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError","deserializeAws_restXmlDeleteBucketLifecycleCommand","deserializeAws_restXmlDeleteBucketLifecycleCommandError","deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand","deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError","deserializeAws_restXmlDeleteBucketOwnershipControlsCommand","deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError","deserializeAws_restXmlDeleteBucketPolicyCommand","deserializeAws_restXmlDeleteBucketPolicyCommandError","deserializeAws_restXmlDeleteBucketReplicationCommand","deserializeAws_restXmlDeleteBucketReplicationCommandError","deserializeAws_restXmlDeleteBucketTaggingCommand","deserializeAws_restXmlDeleteBucketTaggingCommandError","deserializeAws_restXmlDeleteBucketWebsiteCommand","deserializeAws_restXmlDeleteBucketWebsiteCommandError","deserializeAws_restXmlDeleteObjectCommand","deserializeAws_restXmlDeleteObjectCommandError","deserializeAws_restXmlDeleteObjectsCommand","deserializeAws_restXmlDeleteObjectsCommandError","Deleted","deserializeAws_restXmlDeletedObjects","Errors","deserializeAws_restXmlErrors","deserializeAws_restXmlDeleteObjectTaggingCommand","deserializeAws_restXmlDeleteObjectTaggingCommandError","deserializeAws_restXmlDeletePublicAccessBlockCommand","deserializeAws_restXmlDeletePublicAccessBlockCommandError","deserializeAws_restXmlGetBucketAccelerateConfigurationCommand","deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError","Status","deserializeAws_restXmlGetBucketAclCommand","deserializeAws_restXmlGetBucketAclCommandError","AccessControlList","Grants","deserializeAws_restXmlGrants","Owner","deserializeAws_restXmlOwner","deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand","deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError","deserializeAws_restXmlAnalyticsConfiguration","deserializeAws_restXmlGetBucketCorsCommand","deserializeAws_restXmlGetBucketCorsCommandError","CORSRule","CORSRules","deserializeAws_restXmlCORSRules","deserializeAws_restXmlGetBucketEncryptionCommand","deserializeAws_restXmlGetBucketEncryptionCommandError","deserializeAws_restXmlServerSideEncryptionConfiguration","deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand","deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError","deserializeAws_restXmlIntelligentTieringConfiguration","deserializeAws_restXmlGetBucketInventoryConfigurationCommand","deserializeAws_restXmlGetBucketInventoryConfigurationCommandError","deserializeAws_restXmlInventoryConfiguration","deserializeAws_restXmlGetBucketLifecycleConfigurationCommand","deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError","Rule","Rules","deserializeAws_restXmlLifecycleRules","deserializeAws_restXmlGetBucketLocationCommand","deserializeAws_restXmlGetBucketLocationCommandError","LocationConstraint","deserializeAws_restXmlGetBucketLoggingCommand","deserializeAws_restXmlGetBucketLoggingCommandError","LoggingEnabled","deserializeAws_restXmlLoggingEnabled","deserializeAws_restXmlGetBucketMetricsConfigurationCommand","deserializeAws_restXmlGetBucketMetricsConfigurationCommandError","deserializeAws_restXmlMetricsConfiguration","deserializeAws_restXmlGetBucketNotificationConfigurationCommand","deserializeAws_restXmlGetBucketNotificationConfigurationCommandError","EventBridgeConfiguration","deserializeAws_restXmlEventBridgeConfiguration","CloudFunctionConfiguration","LambdaFunctionConfigurations","deserializeAws_restXmlLambdaFunctionConfigurationList","QueueConfiguration","QueueConfigurations","deserializeAws_restXmlQueueConfigurationList","TopicConfiguration","TopicConfigurations","deserializeAws_restXmlTopicConfigurationList","deserializeAws_restXmlGetBucketOwnershipControlsCommand","deserializeAws_restXmlGetBucketOwnershipControlsCommandError","deserializeAws_restXmlOwnershipControls","deserializeAws_restXmlGetBucketPolicyCommand","deserializeAws_restXmlGetBucketPolicyCommandError","collectBodyString","deserializeAws_restXmlGetBucketPolicyStatusCommand","deserializeAws_restXmlGetBucketPolicyStatusCommandError","PolicyStatus","deserializeAws_restXmlPolicyStatus","deserializeAws_restXmlGetBucketReplicationCommand","deserializeAws_restXmlGetBucketReplicationCommandError","deserializeAws_restXmlReplicationConfiguration","deserializeAws_restXmlGetBucketRequestPaymentCommand","deserializeAws_restXmlGetBucketRequestPaymentCommandError","Payer","deserializeAws_restXmlGetBucketTaggingCommand","deserializeAws_restXmlGetBucketTaggingCommandError","TagSet","deserializeAws_restXmlTagSet","deserializeAws_restXmlGetBucketVersioningCommand","deserializeAws_restXmlGetBucketVersioningCommandError","MFADelete","deserializeAws_restXmlGetBucketWebsiteCommand","deserializeAws_restXmlGetBucketWebsiteCommandError","ErrorDocument","deserializeAws_restXmlErrorDocument","IndexDocument","deserializeAws_restXmlIndexDocument","RedirectAllRequestsTo","deserializeAws_restXmlRedirectAllRequestsTo","RoutingRules","deserializeAws_restXmlRoutingRules","deserializeAws_restXmlGetObjectCommand","deserializeAws_restXmlGetObjectCommandError","filter","header","startsWith","substring","sdkStreamMixin","deserializeAws_restXmlInvalidObjectStateResponse","deserializeAws_restXmlNoSuchKeyResponse","deserializeAws_restXmlGetObjectAclCommand","deserializeAws_restXmlGetObjectAclCommandError","deserializeAws_restXmlGetObjectAttributesCommand","deserializeAws_restXmlGetObjectAttributesCommandError","Checksum","deserializeAws_restXmlChecksum","ObjectParts","deserializeAws_restXmlGetObjectAttributesParts","ObjectSize","deserializeAws_restXmlGetObjectLegalHoldCommand","deserializeAws_restXmlGetObjectLegalHoldCommandError","deserializeAws_restXmlObjectLockLegalHold","deserializeAws_restXmlGetObjectLockConfigurationCommand","deserializeAws_restXmlGetObjectLockConfigurationCommandError","deserializeAws_restXmlObjectLockConfiguration","deserializeAws_restXmlGetObjectRetentionCommand","deserializeAws_restXmlGetObjectRetentionCommandError","deserializeAws_restXmlObjectLockRetention","deserializeAws_restXmlGetObjectTaggingCommand","deserializeAws_restXmlGetObjectTaggingCommandError","deserializeAws_restXmlGetObjectTorrentCommand","deserializeAws_restXmlGetObjectTorrentCommandError","deserializeAws_restXmlGetPublicAccessBlockCommand","deserializeAws_restXmlGetPublicAccessBlockCommandError","deserializeAws_restXmlPublicAccessBlockConfiguration","deserializeAws_restXmlHeadBucketCommand","deserializeAws_restXmlHeadBucketCommandError","deserializeAws_restXmlNotFoundResponse","deserializeAws_restXmlHeadObjectCommand","deserializeAws_restXmlHeadObjectCommandError","ArchiveStatus","deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand","deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError","AnalyticsConfigurationList","deserializeAws_restXmlAnalyticsConfigurationList","IsTruncated","NextContinuationToken","deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand","deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError","IntelligentTieringConfigurationList","deserializeAws_restXmlIntelligentTieringConfigurationList","deserializeAws_restXmlListBucketInventoryConfigurationsCommand","deserializeAws_restXmlListBucketInventoryConfigurationsCommandError","InventoryConfigurationList","deserializeAws_restXmlInventoryConfigurationList","deserializeAws_restXmlListBucketMetricsConfigurationsCommand","deserializeAws_restXmlListBucketMetricsConfigurationsCommandError","MetricsConfigurationList","deserializeAws_restXmlMetricsConfigurationList","deserializeAws_restXmlListBucketsCommand","deserializeAws_restXmlListBucketsCommandError","Buckets","deserializeAws_restXmlBuckets","deserializeAws_restXmlListMultipartUploadsCommand","deserializeAws_restXmlListMultipartUploadsCommandError","CommonPrefixes","deserializeAws_restXmlCommonPrefixList","NextKeyMarker","NextUploadIdMarker","Upload","Uploads","deserializeAws_restXmlMultipartUploadList","deserializeAws_restXmlListObjectsCommand","deserializeAws_restXmlListObjectsCommandError","Contents","deserializeAws_restXmlObjectList","Name","NextMarker","deserializeAws_restXmlNoSuchBucketResponse","deserializeAws_restXmlListObjectsV2Command","deserializeAws_restXmlListObjectsV2CommandError","KeyCount","deserializeAws_restXmlListObjectVersionsCommand","deserializeAws_restXmlListObjectVersionsCommandError","DeleteMarkers","deserializeAws_restXmlDeleteMarkers","NextVersionIdMarker","Version","Versions","deserializeAws_restXmlObjectVersionList","deserializeAws_restXmlListPartsCommand","deserializeAws_restXmlListPartsCommandError","Initiator","deserializeAws_restXmlInitiator","NextPartNumberMarker","Part","Parts","deserializeAws_restXmlParts","deserializeAws_restXmlPutBucketAccelerateConfigurationCommand","deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError","deserializeAws_restXmlPutBucketAclCommand","deserializeAws_restXmlPutBucketAclCommandError","deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand","deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError","deserializeAws_restXmlPutBucketCorsCommand","deserializeAws_restXmlPutBucketCorsCommandError","deserializeAws_restXmlPutBucketEncryptionCommand","deserializeAws_restXmlPutBucketEncryptionCommandError","deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand","deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError","deserializeAws_restXmlPutBucketInventoryConfigurationCommand","deserializeAws_restXmlPutBucketInventoryConfigurationCommandError","deserializeAws_restXmlPutBucketLifecycleConfigurationCommand","deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError","deserializeAws_restXmlPutBucketLoggingCommand","deserializeAws_restXmlPutBucketLoggingCommandError","deserializeAws_restXmlPutBucketMetricsConfigurationCommand","deserializeAws_restXmlPutBucketMetricsConfigurationCommandError","deserializeAws_restXmlPutBucketNotificationConfigurationCommand","deserializeAws_restXmlPutBucketNotificationConfigurationCommandError","deserializeAws_restXmlPutBucketOwnershipControlsCommand","deserializeAws_restXmlPutBucketOwnershipControlsCommandError","deserializeAws_restXmlPutBucketPolicyCommand","deserializeAws_restXmlPutBucketPolicyCommandError","deserializeAws_restXmlPutBucketReplicationCommand","deserializeAws_restXmlPutBucketReplicationCommandError","deserializeAws_restXmlPutBucketRequestPaymentCommand","deserializeAws_restXmlPutBucketRequestPaymentCommandError","deserializeAws_restXmlPutBucketTaggingCommand","deserializeAws_restXmlPutBucketTaggingCommandError","deserializeAws_restXmlPutBucketVersioningCommand","deserializeAws_restXmlPutBucketVersioningCommandError","deserializeAws_restXmlPutBucketWebsiteCommand","deserializeAws_restXmlPutBucketWebsiteCommandError","deserializeAws_restXmlPutObjectCommand","deserializeAws_restXmlPutObjectCommandError","deserializeAws_restXmlPutObjectAclCommand","deserializeAws_restXmlPutObjectAclCommandError","deserializeAws_restXmlPutObjectLegalHoldCommand","deserializeAws_restXmlPutObjectLegalHoldCommandError","deserializeAws_restXmlPutObjectLockConfigurationCommand","deserializeAws_restXmlPutObjectLockConfigurationCommandError","deserializeAws_restXmlPutObjectRetentionCommand","deserializeAws_restXmlPutObjectRetentionCommandError","deserializeAws_restXmlPutObjectTaggingCommand","deserializeAws_restXmlPutObjectTaggingCommandError","deserializeAws_restXmlPutPublicAccessBlockCommand","deserializeAws_restXmlPutPublicAccessBlockCommandError","deserializeAws_restXmlRestoreObjectCommand","deserializeAws_restXmlRestoreObjectCommandError","RestoreOutputPath","deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse","deserializeAws_restXmlSelectObjectContentCommand","deserializeAws_restXmlSelectObjectContentCommandError","Payload","deserializeAws_restXmlSelectObjectContentEventStream","deserializeAws_restXmlUploadPartCommand","deserializeAws_restXmlUploadPartCommandError","deserializeAws_restXmlUploadPartCopyCommand","deserializeAws_restXmlUploadPartCopyCommandError","CopyPartResult","deserializeAws_restXmlCopyPartResult","deserializeAws_restXmlWriteGetObjectResponseCommand","deserializeAws_restXmlWriteGetObjectResponseCommandError","exception","AccessTier","eventStreamMarshaller","deserialize","event","Records","deserializeAws_restXmlRecordsEvent_event","Stats","deserializeAws_restXmlStatsEvent_event","Progress","deserializeAws_restXmlProgressEvent_event","Cont","deserializeAws_restXmlContinuationEvent_event","End","deserializeAws_restXmlEndEvent_event","$unknown","assign","deserializeAws_restXmlContinuationEvent","deserializeAws_restXmlEndEvent","Details","deserializeAws_restXmlProgress","deserializeAws_restXmlStats","serializeAws_restXmlAbortIncompleteMultipartUpload","DaysAfterInitiation","String","nodes","serializeAws_restXmlGrants","containerNode","serializeAws_restXmlOwner","serializeAws_restXmlAccessControlTranslation","serializeAws_restXmlAllowedHeaders","e","entry","serializeAws_restXmlAllowedMethods","serializeAws_restXmlAllowedOrigins","serializeAws_restXmlAnalyticsAndOperator","Tags","serializeAws_restXmlTagSet","Filter","serializeAws_restXmlAnalyticsFilter","StorageClassAnalysis","serializeAws_restXmlStorageClassAnalysis","serializeAws_restXmlAnalyticsExportDestination","S3BucketDestination","serializeAws_restXmlAnalyticsS3BucketDestination","visit","value","Tag","serializeAws_restXmlTag","And","_","name","Format","BucketAccountId","serializeAws_restXmlLifecycleRules","serializeAws_restXmlLoggingEnabled","serializeAws_restXmlCompletedPartList","serializeAws_restXmlCompletedPart","serializeAws_restXmlCondition","HttpErrorCodeReturnedEquals","KeyPrefixEquals","serializeAws_restXmlCORSRules","serializeAws_restXmlCORSRule","ID","AllowedHeaders","AllowedMethods","AllowedOrigins","ExposeHeaders","serializeAws_restXmlExposeHeaders","MaxAgeSeconds","serializeAws_restXmlCSVInput","FileHeaderInfo","Comments","QuoteEscapeCharacter","RecordDelimiter","FieldDelimiter","QuoteCharacter","AllowQuotedRecordDelimiter","serializeAws_restXmlCSVOutput","QuoteFields","serializeAws_restXmlDefaultRetention","Mode","Days","Years","Objects","serializeAws_restXmlObjectIdentifierList","Quiet","serializeAws_restXmlDeleteMarkerReplication","serializeAws_restXmlDestination","Account","AccessControlTranslation","EncryptionConfiguration","serializeAws_restXmlEncryptionConfiguration","ReplicationTime","serializeAws_restXmlReplicationTime","Metrics","serializeAws_restXmlMetrics","serializeAws_restXmlEncryption","EncryptionType","KMSKeyId","KMSContext","ReplicaKmsKeyID","serializeAws_restXmlErrorDocument","serializeAws_restXmlEventBridgeConfiguration","serializeAws_restXmlEventList","serializeAws_restXmlExistingObjectReplication","serializeAws_restXmlFilterRule","Value","serializeAws_restXmlFilterRuleList","serializeAws_restXmlGlacierJobParameters","Tier","serializeAws_restXmlGrant","Grantee","serializeAws_restXmlGrantee","Permission","DisplayName","EmailAddress","URI","Type","serializeAws_restXmlIndexDocument","Suffix","CSV","CompressionType","JSON","serializeAws_restXmlJSONInput","Parquet","serializeAws_restXmlParquetInput","serializeAws_restXmlIntelligentTieringAndOperator","serializeAws_restXmlIntelligentTieringFilter","Tierings","serializeAws_restXmlTieringList","Destination","serializeAws_restXmlInventoryDestination","IsEnabled","serializeAws_restXmlInventoryFilter","IncludedObjectVersions","OptionalFields","serializeAws_restXmlInventoryOptionalFields","Schedule","serializeAws_restXmlInventorySchedule","serializeAws_restXmlInventoryS3BucketDestination","serializeAws_restXmlInventoryEncryption","SSES3","serializeAws_restXmlSSES3","SSEKMS","serializeAws_restXmlSSEKMS","AccountId","Encryption","Frequency","serializeAws_restXmlJSONOutput","serializeAws_restXmlLambdaFunctionConfiguration","LambdaFunctionArn","Events","serializeAws_restXmlNotificationConfigurationFilter","serializeAws_restXmlLambdaFunctionConfigurationList","serializeAws_restXmlLifecycleExpiration","Date","ExpiredObjectDeleteMarker","serializeAws_restXmlLifecycleRule","serializeAws_restXmlLifecycleRuleFilter","Transitions","serializeAws_restXmlTransitionList","NoncurrentVersionTransitions","serializeAws_restXmlNoncurrentVersionTransitionList","NoncurrentVersionExpiration","serializeAws_restXmlNoncurrentVersionExpiration","AbortIncompleteMultipartUpload","serializeAws_restXmlLifecycleRuleAndOperator","ObjectSizeGreaterThan","ObjectSizeLessThan","TargetBucket","TargetGrants","serializeAws_restXmlTargetGrants","TargetPrefix","serializeAws_restXmlMetadataEntry","EventThreshold","serializeAws_restXmlReplicationTimeValue","serializeAws_restXmlMetricsAndOperator","AccessPointArn","serializeAws_restXmlMetricsFilter","NoncurrentDays","NewerNoncurrentVersions","serializeAws_restXmlNoncurrentVersionTransition","serializeAws_restXmlTopicConfigurationList","serializeAws_restXmlQueueConfigurationList","serializeAws_restXmlS3KeyFilter","serializeAws_restXmlObjectIdentifier","ObjectLockEnabled","serializeAws_restXmlObjectLockRule","RetainUntilDate","DefaultRetention","serializeAws_restXmlOutputLocation","S3","serializeAws_restXmlS3Location","serializeAws_restXmlOwnershipControlsRules","serializeAws_restXmlOwnershipControlsRule","BlockPublicAcls","IgnorePublicAcls","BlockPublicPolicy","RestrictPublicBuckets","serializeAws_restXmlQueueConfiguration","QueueArn","serializeAws_restXmlRedirect","HostName","HttpRedirectCode","Protocol","ReplaceKeyPrefixWith","ReplaceKeyWith","serializeAws_restXmlRedirectAllRequestsTo","serializeAws_restXmlReplicaModifications","Role","serializeAws_restXmlReplicationRules","serializeAws_restXmlReplicationRule","Priority","serializeAws_restXmlReplicationRuleFilter","SourceSelectionCriteria","serializeAws_restXmlSourceSelectionCriteria","ExistingObjectReplication","DeleteMarkerReplication","serializeAws_restXmlReplicationRuleAndOperator","Time","Minutes","Enabled","GlacierJobParameters","Description","SelectParameters","serializeAws_restXmlSelectParameters","OutputLocation","serializeAws_restXmlRoutingRule","Condition","Redirect","serializeAws_restXmlRoutingRules","FilterRules","BucketName","CannedACL","UserMetadata","serializeAws_restXmlUserMetadata","Start","serializeAws_restXmlServerSideEncryptionByDefault","SSEAlgorithm","KMSMasterKeyID","serializeAws_restXmlServerSideEncryptionRules","serializeAws_restXmlServerSideEncryptionRule","ApplyServerSideEncryptionByDefault","SseKmsEncryptedObjects","serializeAws_restXmlSseKmsEncryptedObjects","ReplicaModifications","KeyId","DataExport","serializeAws_restXmlStorageClassAnalysisDataExport","OutputSchemaVersion","serializeAws_restXmlTargetGrant","serializeAws_restXmlTiering","serializeAws_restXmlTopicConfiguration","TopicArn","serializeAws_restXmlTransition","deserializeAws_restXmlAbortIncompleteMultipartUpload","deserializeAws_restXmlAccessControlTranslation","deserializeAws_restXmlAllowedHeaders","deserializeAws_restXmlAllowedMethods","deserializeAws_restXmlAllowedOrigins","deserializeAws_restXmlAnalyticsAndOperator","deserializeAws_restXmlAnalyticsFilter","deserializeAws_restXmlStorageClassAnalysis","deserializeAws_restXmlAnalyticsExportDestination","deserializeAws_restXmlAnalyticsS3BucketDestination","deserializeAws_restXmlTag","entries","deserializeAws_restXmlBucket","CreationDate","deserializeAws_restXmlChecksumAlgorithmList","deserializeAws_restXmlCommonPrefix","deserializeAws_restXmlCondition","deserializeAws_restXmlCORSRule","AllowedHeader","AllowedMethod","AllowedOrigin","ExposeHeader","deserializeAws_restXmlExposeHeaders","deserializeAws_restXmlDefaultRetention","deserializeAws_restXmlDeletedObject","DeleteMarkerVersionId","deserializeAws_restXmlDeleteMarkerEntry","IsLatest","deserializeAws_restXmlDeleteMarkerReplication","deserializeAws_restXmlDestination","deserializeAws_restXmlEncryptionConfiguration","deserializeAws_restXmlReplicationTime","deserializeAws_restXmlMetrics","deserializeAws_restXml_Error","Code","Message","deserializeAws_restXmlEventList","deserializeAws_restXmlExistingObjectReplication","deserializeAws_restXmlFilterRule","deserializeAws_restXmlFilterRuleList","TotalPartsCount","deserializeAws_restXmlPartsList","deserializeAws_restXmlGrant","deserializeAws_restXmlGrantee","deserializeAws_restXmlIntelligentTieringAndOperator","deserializeAws_restXmlIntelligentTieringFilter","Tiering","deserializeAws_restXmlTieringList","deserializeAws_restXmlInventoryDestination","deserializeAws_restXmlInventoryFilter","deserializeAws_restXmlInventoryOptionalFields","deserializeAws_restXmlInventorySchedule","deserializeAws_restXmlInventoryS3BucketDestination","deserializeAws_restXmlInventoryEncryption","deserializeAws_restXmlSSES3","deserializeAws_restXmlSSEKMS","deserializeAws_restXmlLambdaFunctionConfiguration","Event","deserializeAws_restXmlNotificationConfigurationFilter","deserializeAws_restXmlLifecycleExpiration","deserializeAws_restXmlLifecycleRule","deserializeAws_restXmlLifecycleRuleFilter","Transition","deserializeAws_restXmlTransitionList","NoncurrentVersionTransition","deserializeAws_restXmlNoncurrentVersionTransitionList","deserializeAws_restXmlNoncurrentVersionExpiration","deserializeAws_restXmlLifecycleRuleAndOperator","deserializeAws_restXmlTargetGrants","deserializeAws_restXmlReplicationTimeValue","deserializeAws_restXmlMetricsAndOperator","deserializeAws_restXmlMetricsFilter","deserializeAws_restXmlMultipartUpload","Initiated","deserializeAws_restXmlNoncurrentVersionTransition","deserializeAws_restXmlS3KeyFilter","deserializeAws_restXml_Object","Size","deserializeAws_restXmlObjectLockRule","deserializeAws_restXmlObjectPart","deserializeAws_restXmlObjectVersion","deserializeAws_restXmlOwnershipControlsRules","deserializeAws_restXmlOwnershipControlsRule","deserializeAws_restXmlPart","IsPublic","BytesScanned","BytesProcessed","BytesReturned","deserializeAws_restXmlQueueConfiguration","deserializeAws_restXmlRedirect","deserializeAws_restXmlReplicaModifications","deserializeAws_restXmlReplicationRules","deserializeAws_restXmlReplicationRule","deserializeAws_restXmlReplicationRuleFilter","deserializeAws_restXmlSourceSelectionCriteria","deserializeAws_restXmlReplicationRuleAndOperator","deserializeAws_restXmlRoutingRule","FilterRule","deserializeAws_restXmlServerSideEncryptionByDefault","deserializeAws_restXmlServerSideEncryptionRules","deserializeAws_restXmlServerSideEncryptionRule","deserializeAws_restXmlSseKmsEncryptedObjects","deserializeAws_restXmlStorageClassAnalysisDataExport","deserializeAws_restXmlTargetGrant","deserializeAws_restXmlTiering","deserializeAws_restXmlTopicConfiguration","deserializeAws_restXmlTransition","httpStatusCode","requestId","extendedRequestId","cfId","streamBody","Uint8Array","Promise","resolve","streamCollector","then","utf8Encoder","getOwnPropertyNames","includes","length","size","encoded","parser","attributeNamePrefix","htmlEntities","ignoreAttributes","ignoreDeclaration","parseTagValue","trimValues","tagValueProcessor","val","trim","addEntity","parsedObj","parse","textNodeName","key","parsedObjToReturn","errorBody","message"],"sources":["/Users/luminosity/Desktop/Fovus/node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js"],"sourcesContent":["import { HttpRequest as __HttpRequest, isValidHostname as __isValidHostname, } from \"@aws-sdk/protocol-http\";\nimport { dateToUtcString as __dateToUtcString, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, expectUnion as __expectUnion, getArrayIfSingleItem as __getArrayIfSingleItem, getValueFromTextNode as __getValueFromTextNode, map as __map, parseBoolean as __parseBoolean, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, parseRfc7231DateTime as __parseRfc7231DateTime, resolvedPath as __resolvedPath, strictParseInt32 as __strictParseInt32, strictParseLong as __strictParseLong, throwDefaultError, } from \"@aws-sdk/smithy-client\";\nimport { XmlNode as __XmlNode, XmlText as __XmlText } from \"@aws-sdk/xml-builder\";\nimport { XMLParser } from \"fast-xml-parser\";\nimport { AnalyticsFilter, BucketAlreadyExists, BucketAlreadyOwnedByYou, InvalidObjectState, LifecycleRuleFilter, MetricsFilter, NoSuchBucket, NoSuchKey, NoSuchUpload, NotFound, ObjectNotInActiveTierError, ReplicationRuleFilter, } from \"../models/models_0\";\nimport { ObjectAlreadyInActiveTierError, } from \"../models/models_1\";\nimport { S3ServiceException as __BaseException } from \"../models/S3ServiceException\";\nexport const serializeAws_restXmlAbortMultipartUploadCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"AbortMultipartUpload\"],\n        uploadId: [, __expectNonNull(input.UploadId, `UploadId`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlCompleteMultipartUploadCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-checksum-crc32\": input.ChecksumCRC32,\n        \"x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n        \"x-amz-checksum-sha1\": input.ChecksumSHA1,\n        \"x-amz-checksum-sha256\": input.ChecksumSHA256,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"CompleteMultipartUpload\"],\n        uploadId: [, __expectNonNull(input.UploadId, `UploadId`)],\n    });\n    let body;\n    if (input.MultipartUpload !== undefined) {\n        body = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);\n    }\n    let contents;\n    if (input.MultipartUpload !== undefined) {\n        contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);\n        contents = contents.withName(\"CompleteMultipartUpload\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlCopyObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-acl\": input.ACL,\n        \"cache-control\": input.CacheControl,\n        \"x-amz-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"content-disposition\": input.ContentDisposition,\n        \"content-encoding\": input.ContentEncoding,\n        \"content-language\": input.ContentLanguage,\n        \"content-type\": input.ContentType,\n        \"x-amz-copy-source\": input.CopySource,\n        \"x-amz-copy-source-if-match\": input.CopySourceIfMatch,\n        \"x-amz-copy-source-if-modified-since\": [\n            () => isSerializableHeaderValue(input.CopySourceIfModifiedSince),\n            () => __dateToUtcString(input.CopySourceIfModifiedSince).toString(),\n        ],\n        \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch,\n        \"x-amz-copy-source-if-unmodified-since\": [\n            () => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince),\n            () => __dateToUtcString(input.CopySourceIfUnmodifiedSince).toString(),\n        ],\n        expires: [() => isSerializableHeaderValue(input.Expires), () => __dateToUtcString(input.Expires).toString()],\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-metadata-directive\": input.MetadataDirective,\n        \"x-amz-tagging-directive\": input.TaggingDirective,\n        \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n        \"x-amz-storage-class\": input.StorageClass,\n        \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n        \"x-amz-server-side-encryption-bucket-key-enabled\": [\n            () => isSerializableHeaderValue(input.BucketKeyEnabled),\n            () => input.BucketKeyEnabled.toString(),\n        ],\n        \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm,\n        \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey,\n        \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-tagging\": input.Tagging,\n        \"x-amz-object-lock-mode\": input.ObjectLockMode,\n        \"x-amz-object-lock-retain-until-date\": [\n            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),\n            () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        ],\n        \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner,\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => {\n                acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n                return acc;\n            }, {})),\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"CopyObject\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlCreateBucketCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-acl\": input.ACL,\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write\": input.GrantWrite,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-bucket-object-lock-enabled\": [\n            () => isSerializableHeaderValue(input.ObjectLockEnabledForBucket),\n            () => input.ObjectLockEnabledForBucket.toString(),\n        ],\n        \"x-amz-object-ownership\": input.ObjectOwnership,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    let body;\n    if (input.CreateBucketConfiguration !== undefined) {\n        body = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);\n    }\n    let contents;\n    if (input.CreateBucketConfiguration !== undefined) {\n        contents = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const serializeAws_restXmlCreateMultipartUploadCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-acl\": input.ACL,\n        \"cache-control\": input.CacheControl,\n        \"content-disposition\": input.ContentDisposition,\n        \"content-encoding\": input.ContentEncoding,\n        \"content-language\": input.ContentLanguage,\n        \"content-type\": input.ContentType,\n        expires: [() => isSerializableHeaderValue(input.Expires), () => __dateToUtcString(input.Expires).toString()],\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n        \"x-amz-storage-class\": input.StorageClass,\n        \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n        \"x-amz-server-side-encryption-bucket-key-enabled\": [\n            () => isSerializableHeaderValue(input.BucketKeyEnabled),\n            () => input.BucketKeyEnabled.toString(),\n        ],\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-tagging\": input.Tagging,\n        \"x-amz-object-lock-mode\": input.ObjectLockMode,\n        \"x-amz-object-lock-retain-until-date\": [\n            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),\n            () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        ],\n        \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-checksum-algorithm\": input.ChecksumAlgorithm,\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => {\n                acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n                return acc;\n            }, {})),\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        uploads: [, \"\"],\n        \"x-id\": [, \"CreateMultipartUpload\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteBucketCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        analytics: [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteBucketCorsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        cors: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteBucketEncryptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        encryption: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"intelligent-tiering\": [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        inventory: [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteBucketLifecycleCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        lifecycle: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        metrics: [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        ownershipControls: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteBucketPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        policy: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteBucketReplicationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        replication: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteBucketTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        tagging: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteBucketWebsiteCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        website: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-mfa\": input.MFA,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-bypass-governance-retention\": [\n            () => isSerializableHeaderValue(input.BypassGovernanceRetention),\n            () => input.BypassGovernanceRetention.toString(),\n        ],\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"DeleteObject\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteObjectsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-mfa\": input.MFA,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-bypass-governance-retention\": [\n            () => isSerializableHeaderValue(input.BypassGovernanceRetention),\n            () => input.BypassGovernanceRetention.toString(),\n        ],\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        delete: [, \"\"],\n        \"x-id\": [, \"DeleteObjects\"],\n    });\n    let body;\n    if (input.Delete !== undefined) {\n        body = serializeAws_restXmlDelete(input.Delete, context);\n    }\n    let contents;\n    if (input.Delete !== undefined) {\n        contents = serializeAws_restXmlDelete(input.Delete, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeleteObjectTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        tagging: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlDeletePublicAccessBlockCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        publicAccessBlock: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        accelerate: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        acl: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        analytics: [, \"\"],\n        \"x-id\": [, \"GetBucketAnalyticsConfiguration\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketCorsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        cors: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketEncryptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        encryption: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"intelligent-tiering\": [, \"\"],\n        \"x-id\": [, \"GetBucketIntelligentTieringConfiguration\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketInventoryConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        inventory: [, \"\"],\n        \"x-id\": [, \"GetBucketInventoryConfiguration\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        lifecycle: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketLocationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        location: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketLoggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        logging: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketMetricsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        metrics: [, \"\"],\n        \"x-id\": [, \"GetBucketMetricsConfiguration\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketNotificationConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        notification: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketOwnershipControlsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        ownershipControls: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        policy: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketPolicyStatusCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        policyStatus: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketReplicationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        replication: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketRequestPaymentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        requestPayment: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        tagging: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketVersioningCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        versioning: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetBucketWebsiteCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        website: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"if-match\": input.IfMatch,\n        \"if-modified-since\": [\n            () => isSerializableHeaderValue(input.IfModifiedSince),\n            () => __dateToUtcString(input.IfModifiedSince).toString(),\n        ],\n        \"if-none-match\": input.IfNoneMatch,\n        \"if-unmodified-since\": [\n            () => isSerializableHeaderValue(input.IfUnmodifiedSince),\n            () => __dateToUtcString(input.IfUnmodifiedSince).toString(),\n        ],\n        range: input.Range,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-checksum-mode\": input.ChecksumMode,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"GetObject\"],\n        \"response-cache-control\": [, input.ResponseCacheControl],\n        \"response-content-disposition\": [, input.ResponseContentDisposition],\n        \"response-content-encoding\": [, input.ResponseContentEncoding],\n        \"response-content-language\": [, input.ResponseContentLanguage],\n        \"response-content-type\": [, input.ResponseContentType],\n        \"response-expires\": [\n            () => input.ResponseExpires !== void 0,\n            () => __dateToUtcString(input.ResponseExpires).toString(),\n        ],\n        versionId: [, input.VersionId],\n        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetObjectAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        acl: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetObjectAttributesCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-max-parts\": [() => isSerializableHeaderValue(input.MaxParts), () => input.MaxParts.toString()],\n        \"x-amz-part-number-marker\": input.PartNumberMarker,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-object-attributes\": [\n            () => isSerializableHeaderValue(input.ObjectAttributes),\n            () => (input.ObjectAttributes || []).map((_entry) => _entry).join(\", \"),\n        ],\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        attributes: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetObjectLegalHoldCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"legal-hold\": [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetObjectLockConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"object-lock\": [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetObjectRetentionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        retention: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetObjectTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-request-payer\": input.RequestPayer,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        tagging: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetObjectTorrentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        torrent: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlGetPublicAccessBlockCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        publicAccessBlock: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlHeadBucketCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"HEAD\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const serializeAws_restXmlHeadObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"if-match\": input.IfMatch,\n        \"if-modified-since\": [\n            () => isSerializableHeaderValue(input.IfModifiedSince),\n            () => __dateToUtcString(input.IfModifiedSince).toString(),\n        ],\n        \"if-none-match\": input.IfNoneMatch,\n        \"if-unmodified-since\": [\n            () => isSerializableHeaderValue(input.IfUnmodifiedSince),\n            () => __dateToUtcString(input.IfUnmodifiedSince).toString(),\n        ],\n        range: input.Range,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-checksum-mode\": input.ChecksumMode,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        versionId: [, input.VersionId],\n        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"HEAD\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        analytics: [, \"\"],\n        \"x-id\": [, \"ListBucketAnalyticsConfigurations\"],\n        \"continuation-token\": [, input.ContinuationToken],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"intelligent-tiering\": [, \"\"],\n        \"x-id\": [, \"ListBucketIntelligentTieringConfigurations\"],\n        \"continuation-token\": [, input.ContinuationToken],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlListBucketInventoryConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        inventory: [, \"\"],\n        \"x-id\": [, \"ListBucketInventoryConfigurations\"],\n        \"continuation-token\": [, input.ContinuationToken],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlListBucketMetricsConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        metrics: [, \"\"],\n        \"x-id\": [, \"ListBucketMetricsConfigurations\"],\n        \"continuation-token\": [, input.ContinuationToken],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlListBucketsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    let body;\n    body = \"\";\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const serializeAws_restXmlListMultipartUploadsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        uploads: [, \"\"],\n        delimiter: [, input.Delimiter],\n        \"encoding-type\": [, input.EncodingType],\n        \"key-marker\": [, input.KeyMarker],\n        \"max-uploads\": [() => input.MaxUploads !== void 0, () => input.MaxUploads.toString()],\n        prefix: [, input.Prefix],\n        \"upload-id-marker\": [, input.UploadIdMarker],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlListObjectsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        delimiter: [, input.Delimiter],\n        \"encoding-type\": [, input.EncodingType],\n        marker: [, input.Marker],\n        \"max-keys\": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],\n        prefix: [, input.Prefix],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlListObjectsV2Command = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"list-type\": [, \"2\"],\n        delimiter: [, input.Delimiter],\n        \"encoding-type\": [, input.EncodingType],\n        \"max-keys\": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],\n        prefix: [, input.Prefix],\n        \"continuation-token\": [, input.ContinuationToken],\n        \"fetch-owner\": [() => input.FetchOwner !== void 0, () => input.FetchOwner.toString()],\n        \"start-after\": [, input.StartAfter],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlListObjectVersionsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        versions: [, \"\"],\n        delimiter: [, input.Delimiter],\n        \"encoding-type\": [, input.EncodingType],\n        \"key-marker\": [, input.KeyMarker],\n        \"max-keys\": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],\n        prefix: [, input.Prefix],\n        \"version-id-marker\": [, input.VersionIdMarker],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlListPartsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"ListParts\"],\n        \"max-parts\": [() => input.MaxParts !== void 0, () => input.MaxParts.toString()],\n        \"part-number-marker\": [, input.PartNumberMarker],\n        uploadId: [, __expectNonNull(input.UploadId, `UploadId`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        accelerate: [, \"\"],\n    });\n    let body;\n    if (input.AccelerateConfiguration !== undefined) {\n        body = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);\n    }\n    let contents;\n    if (input.AccelerateConfiguration !== undefined) {\n        contents = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-acl\": input.ACL,\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write\": input.GrantWrite,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        acl: [, \"\"],\n    });\n    let body;\n    if (input.AccessControlPolicy !== undefined) {\n        body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n    }\n    let contents;\n    if (input.AccessControlPolicy !== undefined) {\n        contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        analytics: [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    if (input.AnalyticsConfiguration !== undefined) {\n        body = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);\n    }\n    let contents;\n    if (input.AnalyticsConfiguration !== undefined) {\n        contents = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketCorsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        cors: [, \"\"],\n    });\n    let body;\n    if (input.CORSConfiguration !== undefined) {\n        body = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);\n    }\n    let contents;\n    if (input.CORSConfiguration !== undefined) {\n        contents = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketEncryptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        encryption: [, \"\"],\n    });\n    let body;\n    if (input.ServerSideEncryptionConfiguration !== undefined) {\n        body = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n    }\n    let contents;\n    if (input.ServerSideEncryptionConfiguration !== undefined) {\n        contents = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"intelligent-tiering\": [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    if (input.IntelligentTieringConfiguration !== undefined) {\n        body = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n    }\n    let contents;\n    if (input.IntelligentTieringConfiguration !== undefined) {\n        contents = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketInventoryConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        inventory: [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    if (input.InventoryConfiguration !== undefined) {\n        body = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);\n    }\n    let contents;\n    if (input.InventoryConfiguration !== undefined) {\n        contents = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        lifecycle: [, \"\"],\n    });\n    let body;\n    if (input.LifecycleConfiguration !== undefined) {\n        body = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n    }\n    let contents;\n    if (input.LifecycleConfiguration !== undefined) {\n        contents = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n        contents = contents.withName(\"LifecycleConfiguration\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketLoggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        logging: [, \"\"],\n    });\n    let body;\n    if (input.BucketLoggingStatus !== undefined) {\n        body = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);\n    }\n    let contents;\n    if (input.BucketLoggingStatus !== undefined) {\n        contents = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketMetricsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        metrics: [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    if (input.MetricsConfiguration !== undefined) {\n        body = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);\n    }\n    let contents;\n    if (input.MetricsConfiguration !== undefined) {\n        contents = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketNotificationConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-skip-destination-validation\": [\n            () => isSerializableHeaderValue(input.SkipDestinationValidation),\n            () => input.SkipDestinationValidation.toString(),\n        ],\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        notification: [, \"\"],\n    });\n    let body;\n    if (input.NotificationConfiguration !== undefined) {\n        body = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);\n    }\n    let contents;\n    if (input.NotificationConfiguration !== undefined) {\n        contents = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketOwnershipControlsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        ownershipControls: [, \"\"],\n    });\n    let body;\n    if (input.OwnershipControls !== undefined) {\n        body = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);\n    }\n    let contents;\n    if (input.OwnershipControls !== undefined) {\n        contents = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"text/plain\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-confirm-remove-self-bucket-access\": [\n            () => isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess),\n            () => input.ConfirmRemoveSelfBucketAccess.toString(),\n        ],\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        policy: [, \"\"],\n    });\n    let body;\n    if (input.Policy !== undefined) {\n        body = input.Policy;\n    }\n    let contents;\n    if (input.Policy !== undefined) {\n        contents = input.Policy;\n        body = contents;\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketReplicationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-bucket-object-lock-token\": input.Token,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        replication: [, \"\"],\n    });\n    let body;\n    if (input.ReplicationConfiguration !== undefined) {\n        body = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);\n    }\n    let contents;\n    if (input.ReplicationConfiguration !== undefined) {\n        contents = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketRequestPaymentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        requestPayment: [, \"\"],\n    });\n    let body;\n    if (input.RequestPaymentConfiguration !== undefined) {\n        body = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n    }\n    let contents;\n    if (input.RequestPaymentConfiguration !== undefined) {\n        contents = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        tagging: [, \"\"],\n    });\n    let body;\n    if (input.Tagging !== undefined) {\n        body = serializeAws_restXmlTagging(input.Tagging, context);\n    }\n    let contents;\n    if (input.Tagging !== undefined) {\n        contents = serializeAws_restXmlTagging(input.Tagging, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketVersioningCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-mfa\": input.MFA,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        versioning: [, \"\"],\n    });\n    let body;\n    if (input.VersioningConfiguration !== undefined) {\n        body = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);\n    }\n    let contents;\n    if (input.VersioningConfiguration !== undefined) {\n        contents = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutBucketWebsiteCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        website: [, \"\"],\n    });\n    let body;\n    if (input.WebsiteConfiguration !== undefined) {\n        body = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);\n    }\n    let contents;\n    if (input.WebsiteConfiguration !== undefined) {\n        contents = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": input.ContentType || \"application/octet-stream\",\n        \"x-amz-acl\": input.ACL,\n        \"cache-control\": input.CacheControl,\n        \"content-disposition\": input.ContentDisposition,\n        \"content-encoding\": input.ContentEncoding,\n        \"content-language\": input.ContentLanguage,\n        \"content-length\": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-checksum-crc32\": input.ChecksumCRC32,\n        \"x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n        \"x-amz-checksum-sha1\": input.ChecksumSHA1,\n        \"x-amz-checksum-sha256\": input.ChecksumSHA256,\n        expires: [() => isSerializableHeaderValue(input.Expires), () => __dateToUtcString(input.Expires).toString()],\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n        \"x-amz-storage-class\": input.StorageClass,\n        \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n        \"x-amz-server-side-encryption-bucket-key-enabled\": [\n            () => isSerializableHeaderValue(input.BucketKeyEnabled),\n            () => input.BucketKeyEnabled.toString(),\n        ],\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-tagging\": input.Tagging,\n        \"x-amz-object-lock-mode\": input.ObjectLockMode,\n        \"x-amz-object-lock-retain-until-date\": [\n            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),\n            () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        ],\n        \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => {\n                acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n                return acc;\n            }, {})),\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"PutObject\"],\n    });\n    let body;\n    if (input.Body !== undefined) {\n        body = input.Body;\n    }\n    let contents;\n    if (input.Body !== undefined) {\n        contents = input.Body;\n        body = contents;\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutObjectAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-acl\": input.ACL,\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write\": input.GrantWrite,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        acl: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    if (input.AccessControlPolicy !== undefined) {\n        body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n    }\n    let contents;\n    if (input.AccessControlPolicy !== undefined) {\n        contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutObjectLegalHoldCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"legal-hold\": [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    if (input.LegalHold !== undefined) {\n        body = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);\n    }\n    let contents;\n    if (input.LegalHold !== undefined) {\n        contents = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);\n        contents = contents.withName(\"LegalHold\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutObjectLockConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-bucket-object-lock-token\": input.Token,\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"object-lock\": [, \"\"],\n    });\n    let body;\n    if (input.ObjectLockConfiguration !== undefined) {\n        body = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);\n    }\n    let contents;\n    if (input.ObjectLockConfiguration !== undefined) {\n        contents = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutObjectRetentionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-bypass-governance-retention\": [\n            () => isSerializableHeaderValue(input.BypassGovernanceRetention),\n            () => input.BypassGovernanceRetention.toString(),\n        ],\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        retention: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    if (input.Retention !== undefined) {\n        body = serializeAws_restXmlObjectLockRetention(input.Retention, context);\n    }\n    let contents;\n    if (input.Retention !== undefined) {\n        contents = serializeAws_restXmlObjectLockRetention(input.Retention, context);\n        contents = contents.withName(\"Retention\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutObjectTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-request-payer\": input.RequestPayer,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        tagging: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    if (input.Tagging !== undefined) {\n        body = serializeAws_restXmlTagging(input.Tagging, context);\n    }\n    let contents;\n    if (input.Tagging !== undefined) {\n        contents = serializeAws_restXmlTagging(input.Tagging, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlPutPublicAccessBlockCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        publicAccessBlock: [, \"\"],\n    });\n    let body;\n    if (input.PublicAccessBlockConfiguration !== undefined) {\n        body = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n    }\n    let contents;\n    if (input.PublicAccessBlockConfiguration !== undefined) {\n        contents = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlRestoreObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        restore: [, \"\"],\n        \"x-id\": [, \"RestoreObject\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    if (input.RestoreRequest !== undefined) {\n        body = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);\n    }\n    let contents;\n    if (input.RestoreRequest !== undefined) {\n        contents = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlSelectObjectContentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        select: [, \"\"],\n        \"select-type\": [, \"2\"],\n        \"x-id\": [, \"SelectObjectContent\"],\n    });\n    let body;\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    const bodyNode = new __XmlNode(\"SelectObjectContentRequest\");\n    bodyNode.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    if (input.Expression !== undefined) {\n        const node = __XmlNode.of(\"Expression\", input.Expression).withName(\"Expression\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExpressionType !== undefined) {\n        const node = __XmlNode.of(\"ExpressionType\", input.ExpressionType).withName(\"ExpressionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.InputSerialization !== undefined) {\n        const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OutputSerialization !== undefined) {\n        const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RequestProgress !== undefined) {\n        const node = serializeAws_restXmlRequestProgress(input.RequestProgress, context).withName(\"RequestProgress\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ScanRange !== undefined) {\n        const node = serializeAws_restXmlScanRange(input.ScanRange, context).withName(\"ScanRange\");\n        bodyNode.addChildNode(node);\n    }\n    body += bodyNode.toString();\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlUploadPartCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/octet-stream\",\n        \"content-length\": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-checksum-crc32\": input.ChecksumCRC32,\n        \"x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n        \"x-amz-checksum-sha1\": input.ChecksumSHA1,\n        \"x-amz-checksum-sha256\": input.ChecksumSHA256,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"UploadPart\"],\n        partNumber: [__expectNonNull(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],\n        uploadId: [, __expectNonNull(input.UploadId, `UploadId`)],\n    });\n    let body;\n    if (input.Body !== undefined) {\n        body = input.Body;\n    }\n    let contents;\n    if (input.Body !== undefined) {\n        contents = input.Body;\n        body = contents;\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlUploadPartCopyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-copy-source\": input.CopySource,\n        \"x-amz-copy-source-if-match\": input.CopySourceIfMatch,\n        \"x-amz-copy-source-if-modified-since\": [\n            () => isSerializableHeaderValue(input.CopySourceIfModifiedSince),\n            () => __dateToUtcString(input.CopySourceIfModifiedSince).toString(),\n        ],\n        \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch,\n        \"x-amz-copy-source-if-unmodified-since\": [\n            () => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince),\n            () => __dateToUtcString(input.CopySourceIfUnmodifiedSince).toString(),\n        ],\n        \"x-amz-copy-source-range\": input.CopySourceRange,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm,\n        \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey,\n        \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"UploadPartCopy\"],\n        partNumber: [__expectNonNull(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],\n        uploadId: [, __expectNonNull(input.UploadId, `UploadId`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const serializeAws_restXmlWriteGetObjectResponseCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-content-sha256\": \"UNSIGNED-PAYLOAD\",\n        \"content-type\": \"application/octet-stream\",\n        \"x-amz-request-route\": input.RequestRoute,\n        \"x-amz-request-token\": input.RequestToken,\n        \"x-amz-fwd-status\": [() => isSerializableHeaderValue(input.StatusCode), () => input.StatusCode.toString()],\n        \"x-amz-fwd-error-code\": input.ErrorCode,\n        \"x-amz-fwd-error-message\": input.ErrorMessage,\n        \"x-amz-fwd-header-accept-ranges\": input.AcceptRanges,\n        \"x-amz-fwd-header-cache-control\": input.CacheControl,\n        \"x-amz-fwd-header-content-disposition\": input.ContentDisposition,\n        \"x-amz-fwd-header-content-encoding\": input.ContentEncoding,\n        \"x-amz-fwd-header-content-language\": input.ContentLanguage,\n        \"content-length\": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],\n        \"x-amz-fwd-header-content-range\": input.ContentRange,\n        \"x-amz-fwd-header-content-type\": input.ContentType,\n        \"x-amz-fwd-header-x-amz-checksum-crc32\": input.ChecksumCRC32,\n        \"x-amz-fwd-header-x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n        \"x-amz-fwd-header-x-amz-checksum-sha1\": input.ChecksumSHA1,\n        \"x-amz-fwd-header-x-amz-checksum-sha256\": input.ChecksumSHA256,\n        \"x-amz-fwd-header-x-amz-delete-marker\": [\n            () => isSerializableHeaderValue(input.DeleteMarker),\n            () => input.DeleteMarker.toString(),\n        ],\n        \"x-amz-fwd-header-etag\": input.ETag,\n        \"x-amz-fwd-header-expires\": [\n            () => isSerializableHeaderValue(input.Expires),\n            () => __dateToUtcString(input.Expires).toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-expiration\": input.Expiration,\n        \"x-amz-fwd-header-last-modified\": [\n            () => isSerializableHeaderValue(input.LastModified),\n            () => __dateToUtcString(input.LastModified).toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-missing-meta\": [\n            () => isSerializableHeaderValue(input.MissingMeta),\n            () => input.MissingMeta.toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-object-lock-mode\": input.ObjectLockMode,\n        \"x-amz-fwd-header-x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        \"x-amz-fwd-header-x-amz-object-lock-retain-until-date\": [\n            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),\n            () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-mp-parts-count\": [\n            () => isSerializableHeaderValue(input.PartsCount),\n            () => input.PartsCount.toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-replication-status\": input.ReplicationStatus,\n        \"x-amz-fwd-header-x-amz-request-charged\": input.RequestCharged,\n        \"x-amz-fwd-header-x-amz-restore\": input.Restore,\n        \"x-amz-fwd-header-x-amz-server-side-encryption\": input.ServerSideEncryption,\n        \"x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        \"x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-fwd-header-x-amz-storage-class\": input.StorageClass,\n        \"x-amz-fwd-header-x-amz-tagging-count\": [\n            () => isSerializableHeaderValue(input.TagCount),\n            () => input.TagCount.toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-version-id\": input.VersionId,\n        \"x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled\": [\n            () => isSerializableHeaderValue(input.BucketKeyEnabled),\n            () => input.BucketKeyEnabled.toString(),\n        ],\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => {\n                acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n                return acc;\n            }, {})),\n    });\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/WriteGetObjectResponse\";\n    const query = map({\n        \"x-id\": [, \"WriteGetObjectResponse\"],\n    });\n    let body;\n    if (input.Body !== undefined) {\n        body = input.Body;\n    }\n    let contents;\n    if (input.Body !== undefined) {\n        contents = input.Body;\n        body = contents;\n    }\n    let { hostname: resolvedHostname } = await context.endpoint();\n    if (context.disableHostPrefix !== true) {\n        resolvedHostname = \"{RequestRoute}.\" + resolvedHostname;\n        if (input.RequestRoute === undefined) {\n            throw new Error(\"Empty value provided for input host prefix: RequestRoute.\");\n        }\n        resolvedHostname = resolvedHostname.replace(\"{RequestRoute}\", input.RequestRoute);\n        if (!__isValidHostname(resolvedHostname)) {\n            throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n        }\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname: resolvedHostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const deserializeAws_restXmlAbortMultipartUploadCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlAbortMultipartUploadCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlAbortMultipartUploadCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchUpload\":\n        case \"com.amazonaws.s3#NoSuchUpload\":\n            throw await deserializeAws_restXmlNoSuchUploadResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_restXmlCompleteMultipartUploadCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        Expiration: [, output.headers[\"x-amz-expiration\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = __expectString(data[\"Bucket\"]);\n    }\n    if (data[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = __expectString(data[\"ChecksumCRC32\"]);\n    }\n    if (data[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = __expectString(data[\"ChecksumCRC32C\"]);\n    }\n    if (data[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = __expectString(data[\"ChecksumSHA1\"]);\n    }\n    if (data[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = __expectString(data[\"ChecksumSHA256\"]);\n    }\n    if (data[\"ETag\"] !== undefined) {\n        contents.ETag = __expectString(data[\"ETag\"]);\n    }\n    if (data[\"Key\"] !== undefined) {\n        contents.Key = __expectString(data[\"Key\"]);\n    }\n    if (data[\"Location\"] !== undefined) {\n        contents.Location = __expectString(data[\"Location\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCompleteMultipartUploadCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlCopyObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCopyObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        Expiration: [, output.headers[\"x-amz-expiration\"]],\n        CopySourceVersionId: [, output.headers[\"x-amz-copy-source-version-id\"]],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        SSEKMSEncryptionContext: [, output.headers[\"x-amz-server-side-encryption-context\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.CopyObjectResult = deserializeAws_restXmlCopyObjectResult(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlCopyObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ObjectNotInActiveTierError\":\n        case \"com.amazonaws.s3#ObjectNotInActiveTierError\":\n            throw await deserializeAws_restXmlObjectNotInActiveTierErrorResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_restXmlCreateBucketCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateBucketCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        Location: [, output.headers[\"location\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlCreateBucketCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"BucketAlreadyExists\":\n        case \"com.amazonaws.s3#BucketAlreadyExists\":\n            throw await deserializeAws_restXmlBucketAlreadyExistsResponse(parsedOutput, context);\n        case \"BucketAlreadyOwnedByYou\":\n        case \"com.amazonaws.s3#BucketAlreadyOwnedByYou\":\n            throw await deserializeAws_restXmlBucketAlreadyOwnedByYouResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_restXmlCreateMultipartUploadCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateMultipartUploadCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        AbortDate: [\n            () => void 0 !== output.headers[\"x-amz-abort-date\"],\n            () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"x-amz-abort-date\"])),\n        ],\n        AbortRuleId: [, output.headers[\"x-amz-abort-rule-id\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        SSEKMSEncryptionContext: [, output.headers[\"x-amz-server-side-encryption-context\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n        ChecksumAlgorithm: [, output.headers[\"x-amz-checksum-algorithm\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = __expectString(data[\"Bucket\"]);\n    }\n    if (data[\"Key\"] !== undefined) {\n        contents.Key = __expectString(data[\"Key\"]);\n    }\n    if (data[\"UploadId\"] !== undefined) {\n        contents.UploadId = __expectString(data[\"UploadId\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCreateMultipartUploadCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteBucketCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteBucketCorsCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketCorsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketCorsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteBucketEncryptionCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketEncryptionCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketEncryptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteBucketLifecycleCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketLifecycleCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketLifecycleCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteBucketPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketPolicyCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteBucketReplicationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketReplicationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketReplicationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteBucketTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteBucketWebsiteCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketWebsiteCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketWebsiteCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteObjectCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        DeleteMarker: [\n            () => void 0 !== output.headers[\"x-amz-delete-marker\"],\n            () => __parseBoolean(output.headers[\"x-amz-delete-marker\"]),\n        ],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteObjectsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteObjectsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.Deleted === \"\") {\n        contents.Deleted = [];\n    }\n    else if (data[\"Deleted\"] !== undefined) {\n        contents.Deleted = deserializeAws_restXmlDeletedObjects(__getArrayIfSingleItem(data[\"Deleted\"]), context);\n    }\n    if (data.Error === \"\") {\n        contents.Errors = [];\n    }\n    else if (data[\"Error\"] !== undefined) {\n        contents.Errors = deserializeAws_restXmlErrors(__getArrayIfSingleItem(data[\"Error\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDeleteObjectsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeleteObjectTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteObjectTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteObjectTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlDeletePublicAccessBlockCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeletePublicAccessBlockCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeletePublicAccessBlockCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Status\"] !== undefined) {\n        contents.Status = __expectString(data[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketAclCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.AccessControlList === \"\") {\n        contents.Grants = [];\n    }\n    else if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n        contents.Grants = deserializeAws_restXmlGrants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.AnalyticsConfiguration = deserializeAws_restXmlAnalyticsConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketCorsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketCorsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.CORSRule === \"\") {\n        contents.CORSRules = [];\n    }\n    else if (data[\"CORSRule\"] !== undefined) {\n        contents.CORSRules = deserializeAws_restXmlCORSRules(__getArrayIfSingleItem(data[\"CORSRule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketCorsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketEncryptionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketEncryptionCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.ServerSideEncryptionConfiguration = deserializeAws_restXmlServerSideEncryptionConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketEncryptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.IntelligentTieringConfiguration = deserializeAws_restXmlIntelligentTieringConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketInventoryConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketInventoryConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.InventoryConfiguration = deserializeAws_restXmlInventoryConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketInventoryConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.Rule === \"\") {\n        contents.Rules = [];\n    }\n    else if (data[\"Rule\"] !== undefined) {\n        contents.Rules = deserializeAws_restXmlLifecycleRules(__getArrayIfSingleItem(data[\"Rule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketLocationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketLocationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"LocationConstraint\"] !== undefined) {\n        contents.LocationConstraint = __expectString(data[\"LocationConstraint\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketLocationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketLoggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketLoggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"LoggingEnabled\"] !== undefined) {\n        contents.LoggingEnabled = deserializeAws_restXmlLoggingEnabled(data[\"LoggingEnabled\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketLoggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketMetricsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketMetricsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.MetricsConfiguration = deserializeAws_restXmlMetricsConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketMetricsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketNotificationConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketNotificationConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"EventBridgeConfiguration\"] !== undefined) {\n        contents.EventBridgeConfiguration = deserializeAws_restXmlEventBridgeConfiguration(data[\"EventBridgeConfiguration\"], context);\n    }\n    if (data.CloudFunctionConfiguration === \"\") {\n        contents.LambdaFunctionConfigurations = [];\n    }\n    else if (data[\"CloudFunctionConfiguration\"] !== undefined) {\n        contents.LambdaFunctionConfigurations = deserializeAws_restXmlLambdaFunctionConfigurationList(__getArrayIfSingleItem(data[\"CloudFunctionConfiguration\"]), context);\n    }\n    if (data.QueueConfiguration === \"\") {\n        contents.QueueConfigurations = [];\n    }\n    else if (data[\"QueueConfiguration\"] !== undefined) {\n        contents.QueueConfigurations = deserializeAws_restXmlQueueConfigurationList(__getArrayIfSingleItem(data[\"QueueConfiguration\"]), context);\n    }\n    if (data.TopicConfiguration === \"\") {\n        contents.TopicConfigurations = [];\n    }\n    else if (data[\"TopicConfiguration\"] !== undefined) {\n        contents.TopicConfigurations = deserializeAws_restXmlTopicConfigurationList(__getArrayIfSingleItem(data[\"TopicConfiguration\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketNotificationConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketOwnershipControlsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketOwnershipControlsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.OwnershipControls = deserializeAws_restXmlOwnershipControls(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketOwnershipControlsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketPolicyCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = await collectBodyString(output.body, context);\n    contents.Policy = __expectString(data);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketPolicyStatusCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketPolicyStatusCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.PolicyStatus = deserializeAws_restXmlPolicyStatus(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketPolicyStatusCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketReplicationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketReplicationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.ReplicationConfiguration = deserializeAws_restXmlReplicationConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketReplicationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketRequestPaymentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketRequestPaymentCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Payer\"] !== undefined) {\n        contents.Payer = __expectString(data[\"Payer\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketRequestPaymentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.TagSet === \"\") {\n        contents.TagSet = [];\n    }\n    else if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n        contents.TagSet = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketVersioningCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketVersioningCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"MfaDelete\"] !== undefined) {\n        contents.MFADelete = __expectString(data[\"MfaDelete\"]);\n    }\n    if (data[\"Status\"] !== undefined) {\n        contents.Status = __expectString(data[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketVersioningCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetBucketWebsiteCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketWebsiteCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"ErrorDocument\"] !== undefined) {\n        contents.ErrorDocument = deserializeAws_restXmlErrorDocument(data[\"ErrorDocument\"], context);\n    }\n    if (data[\"IndexDocument\"] !== undefined) {\n        contents.IndexDocument = deserializeAws_restXmlIndexDocument(data[\"IndexDocument\"], context);\n    }\n    if (data[\"RedirectAllRequestsTo\"] !== undefined) {\n        contents.RedirectAllRequestsTo = deserializeAws_restXmlRedirectAllRequestsTo(data[\"RedirectAllRequestsTo\"], context);\n    }\n    if (data.RoutingRules === \"\") {\n        contents.RoutingRules = [];\n    }\n    else if (data[\"RoutingRules\"] !== undefined && data[\"RoutingRules\"][\"RoutingRule\"] !== undefined) {\n        contents.RoutingRules = deserializeAws_restXmlRoutingRules(__getArrayIfSingleItem(data[\"RoutingRules\"][\"RoutingRule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketWebsiteCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        DeleteMarker: [\n            () => void 0 !== output.headers[\"x-amz-delete-marker\"],\n            () => __parseBoolean(output.headers[\"x-amz-delete-marker\"]),\n        ],\n        AcceptRanges: [, output.headers[\"accept-ranges\"]],\n        Expiration: [, output.headers[\"x-amz-expiration\"]],\n        Restore: [, output.headers[\"x-amz-restore\"]],\n        LastModified: [\n            () => void 0 !== output.headers[\"last-modified\"],\n            () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"last-modified\"])),\n        ],\n        ContentLength: [\n            () => void 0 !== output.headers[\"content-length\"],\n            () => __strictParseLong(output.headers[\"content-length\"]),\n        ],\n        ETag: [, output.headers[\"etag\"]],\n        ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n        ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n        ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n        ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n        MissingMeta: [\n            () => void 0 !== output.headers[\"x-amz-missing-meta\"],\n            () => __strictParseInt32(output.headers[\"x-amz-missing-meta\"]),\n        ],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        CacheControl: [, output.headers[\"cache-control\"]],\n        ContentDisposition: [, output.headers[\"content-disposition\"]],\n        ContentEncoding: [, output.headers[\"content-encoding\"]],\n        ContentLanguage: [, output.headers[\"content-language\"]],\n        ContentRange: [, output.headers[\"content-range\"]],\n        ContentType: [, output.headers[\"content-type\"]],\n        Expires: [\n            () => void 0 !== output.headers[\"expires\"],\n            () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"expires\"])),\n        ],\n        WebsiteRedirectLocation: [, output.headers[\"x-amz-website-redirect-location\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        StorageClass: [, output.headers[\"x-amz-storage-class\"]],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n        ReplicationStatus: [, output.headers[\"x-amz-replication-status\"]],\n        PartsCount: [\n            () => void 0 !== output.headers[\"x-amz-mp-parts-count\"],\n            () => __strictParseInt32(output.headers[\"x-amz-mp-parts-count\"]),\n        ],\n        TagCount: [\n            () => void 0 !== output.headers[\"x-amz-tagging-count\"],\n            () => __strictParseInt32(output.headers[\"x-amz-tagging-count\"]),\n        ],\n        ObjectLockMode: [, output.headers[\"x-amz-object-lock-mode\"]],\n        ObjectLockRetainUntilDate: [\n            () => void 0 !== output.headers[\"x-amz-object-lock-retain-until-date\"],\n            () => __expectNonNull(__parseRfc3339DateTimeWithOffset(output.headers[\"x-amz-object-lock-retain-until-date\"])),\n        ],\n        ObjectLockLegalHoldStatus: [, output.headers[\"x-amz-object-lock-legal-hold\"]],\n        Metadata: [\n            ,\n            Object.keys(output.headers)\n                .filter((header) => header.startsWith(\"x-amz-meta-\"))\n                .reduce((acc, header) => {\n                acc[header.substring(11)] = output.headers[header];\n                return acc;\n            }, {}),\n        ],\n    });\n    const data = output.body;\n    context.sdkStreamMixin(data);\n    contents.Body = data;\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidObjectState\":\n        case \"com.amazonaws.s3#InvalidObjectState\":\n            throw await deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput, context);\n        case \"NoSuchKey\":\n        case \"com.amazonaws.s3#NoSuchKey\":\n            throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_restXmlGetObjectAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectAclCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.AccessControlList === \"\") {\n        contents.Grants = [];\n    }\n    else if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n        contents.Grants = deserializeAws_restXmlGrants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchKey\":\n        case \"com.amazonaws.s3#NoSuchKey\":\n            throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_restXmlGetObjectAttributesCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectAttributesCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        DeleteMarker: [\n            () => void 0 !== output.headers[\"x-amz-delete-marker\"],\n            () => __parseBoolean(output.headers[\"x-amz-delete-marker\"]),\n        ],\n        LastModified: [\n            () => void 0 !== output.headers[\"last-modified\"],\n            () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"last-modified\"])),\n        ],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Checksum\"] !== undefined) {\n        contents.Checksum = deserializeAws_restXmlChecksum(data[\"Checksum\"], context);\n    }\n    if (data[\"ETag\"] !== undefined) {\n        contents.ETag = __expectString(data[\"ETag\"]);\n    }\n    if (data[\"ObjectParts\"] !== undefined) {\n        contents.ObjectParts = deserializeAws_restXmlGetObjectAttributesParts(data[\"ObjectParts\"], context);\n    }\n    if (data[\"ObjectSize\"] !== undefined) {\n        contents.ObjectSize = __strictParseLong(data[\"ObjectSize\"]);\n    }\n    if (data[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(data[\"StorageClass\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectAttributesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchKey\":\n        case \"com.amazonaws.s3#NoSuchKey\":\n            throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_restXmlGetObjectLegalHoldCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectLegalHoldCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.LegalHold = deserializeAws_restXmlObjectLockLegalHold(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectLegalHoldCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetObjectLockConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectLockConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.ObjectLockConfiguration = deserializeAws_restXmlObjectLockConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectLockConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetObjectRetentionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectRetentionCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.Retention = deserializeAws_restXmlObjectLockRetention(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectRetentionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetObjectTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.TagSet === \"\") {\n        contents.TagSet = [];\n    }\n    else if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n        contents.TagSet = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetObjectTorrentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectTorrentCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = output.body;\n    context.sdkStreamMixin(data);\n    contents.Body = data;\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectTorrentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlGetPublicAccessBlockCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetPublicAccessBlockCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.PublicAccessBlockConfiguration = deserializeAws_restXmlPublicAccessBlockConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetPublicAccessBlockCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlHeadBucketCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlHeadBucketCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlHeadBucketCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NotFound\":\n        case \"com.amazonaws.s3#NotFound\":\n            throw await deserializeAws_restXmlNotFoundResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_restXmlHeadObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlHeadObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        DeleteMarker: [\n            () => void 0 !== output.headers[\"x-amz-delete-marker\"],\n            () => __parseBoolean(output.headers[\"x-amz-delete-marker\"]),\n        ],\n        AcceptRanges: [, output.headers[\"accept-ranges\"]],\n        Expiration: [, output.headers[\"x-amz-expiration\"]],\n        Restore: [, output.headers[\"x-amz-restore\"]],\n        ArchiveStatus: [, output.headers[\"x-amz-archive-status\"]],\n        LastModified: [\n            () => void 0 !== output.headers[\"last-modified\"],\n            () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"last-modified\"])),\n        ],\n        ContentLength: [\n            () => void 0 !== output.headers[\"content-length\"],\n            () => __strictParseLong(output.headers[\"content-length\"]),\n        ],\n        ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n        ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n        ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n        ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n        ETag: [, output.headers[\"etag\"]],\n        MissingMeta: [\n            () => void 0 !== output.headers[\"x-amz-missing-meta\"],\n            () => __strictParseInt32(output.headers[\"x-amz-missing-meta\"]),\n        ],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        CacheControl: [, output.headers[\"cache-control\"]],\n        ContentDisposition: [, output.headers[\"content-disposition\"]],\n        ContentEncoding: [, output.headers[\"content-encoding\"]],\n        ContentLanguage: [, output.headers[\"content-language\"]],\n        ContentType: [, output.headers[\"content-type\"]],\n        Expires: [\n            () => void 0 !== output.headers[\"expires\"],\n            () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"expires\"])),\n        ],\n        WebsiteRedirectLocation: [, output.headers[\"x-amz-website-redirect-location\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        StorageClass: [, output.headers[\"x-amz-storage-class\"]],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n        ReplicationStatus: [, output.headers[\"x-amz-replication-status\"]],\n        PartsCount: [\n            () => void 0 !== output.headers[\"x-amz-mp-parts-count\"],\n            () => __strictParseInt32(output.headers[\"x-amz-mp-parts-count\"]),\n        ],\n        ObjectLockMode: [, output.headers[\"x-amz-object-lock-mode\"]],\n        ObjectLockRetainUntilDate: [\n            () => void 0 !== output.headers[\"x-amz-object-lock-retain-until-date\"],\n            () => __expectNonNull(__parseRfc3339DateTimeWithOffset(output.headers[\"x-amz-object-lock-retain-until-date\"])),\n        ],\n        ObjectLockLegalHoldStatus: [, output.headers[\"x-amz-object-lock-legal-hold\"]],\n        Metadata: [\n            ,\n            Object.keys(output.headers)\n                .filter((header) => header.startsWith(\"x-amz-meta-\"))\n                .reduce((acc, header) => {\n                acc[header.substring(11)] = output.headers[header];\n                return acc;\n            }, {}),\n        ],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlHeadObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NotFound\":\n        case \"com.amazonaws.s3#NotFound\":\n            throw await deserializeAws_restXmlNotFoundResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.AnalyticsConfiguration === \"\") {\n        contents.AnalyticsConfigurationList = [];\n    }\n    else if (data[\"AnalyticsConfiguration\"] !== undefined) {\n        contents.AnalyticsConfigurationList = deserializeAws_restXmlAnalyticsConfigurationList(__getArrayIfSingleItem(data[\"AnalyticsConfiguration\"]), context);\n    }\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n    }\n    if (data.IntelligentTieringConfiguration === \"\") {\n        contents.IntelligentTieringConfigurationList = [];\n    }\n    else if (data[\"IntelligentTieringConfiguration\"] !== undefined) {\n        contents.IntelligentTieringConfigurationList = deserializeAws_restXmlIntelligentTieringConfigurationList(__getArrayIfSingleItem(data[\"IntelligentTieringConfiguration\"]), context);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlListBucketInventoryConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListBucketInventoryConfigurationsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n    }\n    if (data.InventoryConfiguration === \"\") {\n        contents.InventoryConfigurationList = [];\n    }\n    else if (data[\"InventoryConfiguration\"] !== undefined) {\n        contents.InventoryConfigurationList = deserializeAws_restXmlInventoryConfigurationList(__getArrayIfSingleItem(data[\"InventoryConfiguration\"]), context);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListBucketInventoryConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlListBucketMetricsConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListBucketMetricsConfigurationsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data.MetricsConfiguration === \"\") {\n        contents.MetricsConfigurationList = [];\n    }\n    else if (data[\"MetricsConfiguration\"] !== undefined) {\n        contents.MetricsConfigurationList = deserializeAws_restXmlMetricsConfigurationList(__getArrayIfSingleItem(data[\"MetricsConfiguration\"]), context);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListBucketMetricsConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlListBucketsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListBucketsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.Buckets === \"\") {\n        contents.Buckets = [];\n    }\n    else if (data[\"Buckets\"] !== undefined && data[\"Buckets\"][\"Bucket\"] !== undefined) {\n        contents.Buckets = deserializeAws_restXmlBuckets(__getArrayIfSingleItem(data[\"Buckets\"][\"Bucket\"]), context);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListBucketsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlListMultipartUploadsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListMultipartUploadsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = __expectString(data[\"Bucket\"]);\n    }\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    else if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = __expectString(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = __expectString(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"KeyMarker\"] !== undefined) {\n        contents.KeyMarker = __expectString(data[\"KeyMarker\"]);\n    }\n    if (data[\"MaxUploads\"] !== undefined) {\n        contents.MaxUploads = __strictParseInt32(data[\"MaxUploads\"]);\n    }\n    if (data[\"NextKeyMarker\"] !== undefined) {\n        contents.NextKeyMarker = __expectString(data[\"NextKeyMarker\"]);\n    }\n    if (data[\"NextUploadIdMarker\"] !== undefined) {\n        contents.NextUploadIdMarker = __expectString(data[\"NextUploadIdMarker\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(data[\"Prefix\"]);\n    }\n    if (data[\"UploadIdMarker\"] !== undefined) {\n        contents.UploadIdMarker = __expectString(data[\"UploadIdMarker\"]);\n    }\n    if (data.Upload === \"\") {\n        contents.Uploads = [];\n    }\n    else if (data[\"Upload\"] !== undefined) {\n        contents.Uploads = deserializeAws_restXmlMultipartUploadList(__getArrayIfSingleItem(data[\"Upload\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListMultipartUploadsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlListObjectsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListObjectsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    else if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n    }\n    if (data.Contents === \"\") {\n        contents.Contents = [];\n    }\n    else if (data[\"Contents\"] !== undefined) {\n        contents.Contents = deserializeAws_restXmlObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = __expectString(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = __expectString(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"Marker\"] !== undefined) {\n        contents.Marker = __expectString(data[\"Marker\"]);\n    }\n    if (data[\"MaxKeys\"] !== undefined) {\n        contents.MaxKeys = __strictParseInt32(data[\"MaxKeys\"]);\n    }\n    if (data[\"Name\"] !== undefined) {\n        contents.Name = __expectString(data[\"Name\"]);\n    }\n    if (data[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = __expectString(data[\"NextMarker\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(data[\"Prefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListObjectsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchBucket\":\n        case \"com.amazonaws.s3#NoSuchBucket\":\n            throw await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_restXmlListObjectsV2Command = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListObjectsV2CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    else if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n    }\n    if (data.Contents === \"\") {\n        contents.Contents = [];\n    }\n    else if (data[\"Contents\"] !== undefined) {\n        contents.Contents = deserializeAws_restXmlObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n    }\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = __expectString(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = __expectString(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"KeyCount\"] !== undefined) {\n        contents.KeyCount = __strictParseInt32(data[\"KeyCount\"]);\n    }\n    if (data[\"MaxKeys\"] !== undefined) {\n        contents.MaxKeys = __strictParseInt32(data[\"MaxKeys\"]);\n    }\n    if (data[\"Name\"] !== undefined) {\n        contents.Name = __expectString(data[\"Name\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(data[\"Prefix\"]);\n    }\n    if (data[\"StartAfter\"] !== undefined) {\n        contents.StartAfter = __expectString(data[\"StartAfter\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListObjectsV2CommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchBucket\":\n        case \"com.amazonaws.s3#NoSuchBucket\":\n            throw await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_restXmlListObjectVersionsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListObjectVersionsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    else if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n    }\n    if (data.DeleteMarker === \"\") {\n        contents.DeleteMarkers = [];\n    }\n    else if (data[\"DeleteMarker\"] !== undefined) {\n        contents.DeleteMarkers = deserializeAws_restXmlDeleteMarkers(__getArrayIfSingleItem(data[\"DeleteMarker\"]), context);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = __expectString(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = __expectString(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"KeyMarker\"] !== undefined) {\n        contents.KeyMarker = __expectString(data[\"KeyMarker\"]);\n    }\n    if (data[\"MaxKeys\"] !== undefined) {\n        contents.MaxKeys = __strictParseInt32(data[\"MaxKeys\"]);\n    }\n    if (data[\"Name\"] !== undefined) {\n        contents.Name = __expectString(data[\"Name\"]);\n    }\n    if (data[\"NextKeyMarker\"] !== undefined) {\n        contents.NextKeyMarker = __expectString(data[\"NextKeyMarker\"]);\n    }\n    if (data[\"NextVersionIdMarker\"] !== undefined) {\n        contents.NextVersionIdMarker = __expectString(data[\"NextVersionIdMarker\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(data[\"Prefix\"]);\n    }\n    if (data[\"VersionIdMarker\"] !== undefined) {\n        contents.VersionIdMarker = __expectString(data[\"VersionIdMarker\"]);\n    }\n    if (data.Version === \"\") {\n        contents.Versions = [];\n    }\n    else if (data[\"Version\"] !== undefined) {\n        contents.Versions = deserializeAws_restXmlObjectVersionList(__getArrayIfSingleItem(data[\"Version\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListObjectVersionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlListPartsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListPartsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        AbortDate: [\n            () => void 0 !== output.headers[\"x-amz-abort-date\"],\n            () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"x-amz-abort-date\"])),\n        ],\n        AbortRuleId: [, output.headers[\"x-amz-abort-rule-id\"]],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = __expectString(data[\"Bucket\"]);\n    }\n    if (data[\"ChecksumAlgorithm\"] !== undefined) {\n        contents.ChecksumAlgorithm = __expectString(data[\"ChecksumAlgorithm\"]);\n    }\n    if (data[\"Initiator\"] !== undefined) {\n        contents.Initiator = deserializeAws_restXmlInitiator(data[\"Initiator\"], context);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"Key\"] !== undefined) {\n        contents.Key = __expectString(data[\"Key\"]);\n    }\n    if (data[\"MaxParts\"] !== undefined) {\n        contents.MaxParts = __strictParseInt32(data[\"MaxParts\"]);\n    }\n    if (data[\"NextPartNumberMarker\"] !== undefined) {\n        contents.NextPartNumberMarker = __expectString(data[\"NextPartNumberMarker\"]);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n    }\n    if (data[\"PartNumberMarker\"] !== undefined) {\n        contents.PartNumberMarker = __expectString(data[\"PartNumberMarker\"]);\n    }\n    if (data.Part === \"\") {\n        contents.Parts = [];\n    }\n    else if (data[\"Part\"] !== undefined) {\n        contents.Parts = deserializeAws_restXmlParts(__getArrayIfSingleItem(data[\"Part\"]), context);\n    }\n    if (data[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(data[\"StorageClass\"]);\n    }\n    if (data[\"UploadId\"] !== undefined) {\n        contents.UploadId = __expectString(data[\"UploadId\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListPartsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketAclCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketCorsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketCorsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketCorsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketEncryptionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketEncryptionCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketEncryptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketInventoryConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketInventoryConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketInventoryConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketLoggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketLoggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketLoggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketMetricsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketMetricsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketMetricsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketNotificationConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketNotificationConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketNotificationConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketOwnershipControlsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketOwnershipControlsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketOwnershipControlsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketPolicyCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketReplicationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketReplicationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketReplicationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketRequestPaymentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketRequestPaymentCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketRequestPaymentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketVersioningCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketVersioningCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketVersioningCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutBucketWebsiteCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketWebsiteCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketWebsiteCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        Expiration: [, output.headers[\"x-amz-expiration\"]],\n        ETag: [, output.headers[\"etag\"]],\n        ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n        ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n        ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n        ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        SSEKMSEncryptionContext: [, output.headers[\"x-amz-server-side-encryption-context\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutObjectAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectAclCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutObjectAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchKey\":\n        case \"com.amazonaws.s3#NoSuchKey\":\n            throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_restXmlPutObjectLegalHoldCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectLegalHoldCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutObjectLegalHoldCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutObjectLockConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectLockConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutObjectLockConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutObjectRetentionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectRetentionCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutObjectRetentionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutObjectTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutObjectTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlPutPublicAccessBlockCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutPublicAccessBlockCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutPublicAccessBlockCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlRestoreObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlRestoreObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n        RestoreOutputPath: [, output.headers[\"x-amz-restore-output-path\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlRestoreObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ObjectAlreadyInActiveTierError\":\n        case \"com.amazonaws.s3#ObjectAlreadyInActiveTierError\":\n            throw await deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_restXmlSelectObjectContentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlSelectObjectContentCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = output.body;\n    contents.Payload = deserializeAws_restXmlSelectObjectContentEventStream(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlSelectObjectContentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlUploadPartCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUploadPartCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        ETag: [, output.headers[\"etag\"]],\n        ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n        ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n        ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n        ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlUploadPartCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlUploadPartCopyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUploadPartCopyCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        CopySourceVersionId: [, output.headers[\"x-amz-copy-source-version-id\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.CopyPartResult = deserializeAws_restXmlCopyPartResult(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlUploadPartCopyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_restXmlWriteGetObjectResponseCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlWriteGetObjectResponseCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlWriteGetObjectResponseCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nconst map = __map;\nconst deserializeAws_restXmlBucketAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new BucketAlreadyExists({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlBucketAlreadyOwnedByYouResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new BucketAlreadyOwnedByYou({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlInvalidObjectStateResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    if (data[\"AccessTier\"] !== undefined) {\n        contents.AccessTier = __expectString(data[\"AccessTier\"]);\n    }\n    if (data[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(data[\"StorageClass\"]);\n    }\n    const exception = new InvalidObjectState({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlNoSuchBucketResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new NoSuchBucket({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlNoSuchKeyResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new NoSuchKey({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlNoSuchUploadResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new NoSuchUpload({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlNotFoundResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new NotFound({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new ObjectAlreadyInActiveTierError({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlObjectNotInActiveTierErrorResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new ObjectNotInActiveTierError({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlSelectObjectContentEventStream = (output, context) => {\n    return context.eventStreamMarshaller.deserialize(output, async (event) => {\n        if (event[\"Records\"] != null) {\n            return {\n                Records: await deserializeAws_restXmlRecordsEvent_event(event[\"Records\"], context),\n            };\n        }\n        if (event[\"Stats\"] != null) {\n            return {\n                Stats: await deserializeAws_restXmlStatsEvent_event(event[\"Stats\"], context),\n            };\n        }\n        if (event[\"Progress\"] != null) {\n            return {\n                Progress: await deserializeAws_restXmlProgressEvent_event(event[\"Progress\"], context),\n            };\n        }\n        if (event[\"Cont\"] != null) {\n            return {\n                Cont: await deserializeAws_restXmlContinuationEvent_event(event[\"Cont\"], context),\n            };\n        }\n        if (event[\"End\"] != null) {\n            return {\n                End: await deserializeAws_restXmlEndEvent_event(event[\"End\"], context),\n            };\n        }\n        return { $unknown: output };\n    });\n};\nconst deserializeAws_restXmlContinuationEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, deserializeAws_restXmlContinuationEvent(data, context));\n    return contents;\n};\nconst deserializeAws_restXmlEndEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, deserializeAws_restXmlEndEvent(data, context));\n    return contents;\n};\nconst deserializeAws_restXmlProgressEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    contents.Details = deserializeAws_restXmlProgress(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlRecordsEvent_event = async (output, context) => {\n    const contents = {};\n    contents.Payload = output.body;\n    return contents;\n};\nconst deserializeAws_restXmlStatsEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    contents.Details = deserializeAws_restXmlStats(data, context);\n    return contents;\n};\nconst serializeAws_restXmlAbortIncompleteMultipartUpload = (input, context) => {\n    const bodyNode = new __XmlNode(\"AbortIncompleteMultipartUpload\");\n    if (input.DaysAfterInitiation != null) {\n        const node = __XmlNode.of(\"DaysAfterInitiation\", String(input.DaysAfterInitiation)).withName(\"DaysAfterInitiation\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAccelerateConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"AccelerateConfiguration\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"BucketAccelerateStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAccessControlPolicy = (input, context) => {\n    const bodyNode = new __XmlNode(\"AccessControlPolicy\");\n    if (input.Grants != null) {\n        const nodes = serializeAws_restXmlGrants(input.Grants, context);\n        const containerNode = new __XmlNode(\"AccessControlList\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Owner != null) {\n        const node = serializeAws_restXmlOwner(input.Owner, context).withName(\"Owner\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAccessControlTranslation = (input, context) => {\n    const bodyNode = new __XmlNode(\"AccessControlTranslation\");\n    if (input.Owner != null) {\n        const node = __XmlNode.of(\"OwnerOverride\", input.Owner).withName(\"Owner\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAllowedHeaders = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = __XmlNode.of(\"AllowedHeader\", entry);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlAllowedMethods = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = __XmlNode.of(\"AllowedMethod\", entry);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlAllowedOrigins = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = __XmlNode.of(\"AllowedOrigin\", entry);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlAnalyticsAndOperator = (input, context) => {\n    const bodyNode = new __XmlNode(\"AnalyticsAndOperator\");\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags != null) {\n        const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"AnalyticsConfiguration\");\n    if (input.Id != null) {\n        const node = __XmlNode.of(\"AnalyticsId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlAnalyticsFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClassAnalysis != null) {\n        const node = serializeAws_restXmlStorageClassAnalysis(input.StorageClassAnalysis, context).withName(\"StorageClassAnalysis\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsExportDestination = (input, context) => {\n    const bodyNode = new __XmlNode(\"AnalyticsExportDestination\");\n    if (input.S3BucketDestination != null) {\n        const node = serializeAws_restXmlAnalyticsS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"AnalyticsFilter\");\n    AnalyticsFilter.visit(input, {\n        Prefix: (value) => {\n            const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = serializeAws_restXmlAnalyticsAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsS3BucketDestination = (input, context) => {\n    const bodyNode = new __XmlNode(\"AnalyticsS3BucketDestination\");\n    if (input.Format != null) {\n        const node = __XmlNode.of(\"AnalyticsS3ExportFileFormat\", input.Format).withName(\"Format\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.BucketAccountId != null) {\n        const node = __XmlNode.of(\"AccountId\", input.BucketAccountId).withName(\"BucketAccountId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Bucket != null) {\n        const node = __XmlNode.of(\"BucketName\", input.Bucket).withName(\"Bucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlBucketLifecycleConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"BucketLifecycleConfiguration\");\n    if (input.Rules != null) {\n        const nodes = serializeAws_restXmlLifecycleRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlBucketLoggingStatus = (input, context) => {\n    const bodyNode = new __XmlNode(\"BucketLoggingStatus\");\n    if (input.LoggingEnabled != null) {\n        const node = serializeAws_restXmlLoggingEnabled(input.LoggingEnabled, context).withName(\"LoggingEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCompletedMultipartUpload = (input, context) => {\n    const bodyNode = new __XmlNode(\"CompletedMultipartUpload\");\n    if (input.Parts != null) {\n        const nodes = serializeAws_restXmlCompletedPartList(input.Parts, context);\n        nodes.map((node) => {\n            node = node.withName(\"Part\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCompletedPart = (input, context) => {\n    const bodyNode = new __XmlNode(\"CompletedPart\");\n    if (input.ETag != null) {\n        const node = __XmlNode.of(\"ETag\", input.ETag).withName(\"ETag\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ChecksumCRC32 != null) {\n        const node = __XmlNode.of(\"ChecksumCRC32\", input.ChecksumCRC32).withName(\"ChecksumCRC32\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ChecksumCRC32C != null) {\n        const node = __XmlNode.of(\"ChecksumCRC32C\", input.ChecksumCRC32C).withName(\"ChecksumCRC32C\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ChecksumSHA1 != null) {\n        const node = __XmlNode.of(\"ChecksumSHA1\", input.ChecksumSHA1).withName(\"ChecksumSHA1\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ChecksumSHA256 != null) {\n        const node = __XmlNode.of(\"ChecksumSHA256\", input.ChecksumSHA256).withName(\"ChecksumSHA256\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.PartNumber != null) {\n        const node = __XmlNode.of(\"PartNumber\", String(input.PartNumber)).withName(\"PartNumber\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCompletedPartList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlCompletedPart(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlCondition = (input, context) => {\n    const bodyNode = new __XmlNode(\"Condition\");\n    if (input.HttpErrorCodeReturnedEquals != null) {\n        const node = __XmlNode\n            .of(\"HttpErrorCodeReturnedEquals\", input.HttpErrorCodeReturnedEquals)\n            .withName(\"HttpErrorCodeReturnedEquals\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KeyPrefixEquals != null) {\n        const node = __XmlNode.of(\"KeyPrefixEquals\", input.KeyPrefixEquals).withName(\"KeyPrefixEquals\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCORSConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"CORSConfiguration\");\n    if (input.CORSRules != null) {\n        const nodes = serializeAws_restXmlCORSRules(input.CORSRules, context);\n        nodes.map((node) => {\n            node = node.withName(\"CORSRule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCORSRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"CORSRule\");\n    if (input.ID != null) {\n        const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AllowedHeaders != null) {\n        const nodes = serializeAws_restXmlAllowedHeaders(input.AllowedHeaders, context);\n        nodes.map((node) => {\n            node = node.withName(\"AllowedHeader\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.AllowedMethods != null) {\n        const nodes = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context);\n        nodes.map((node) => {\n            node = node.withName(\"AllowedMethod\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.AllowedOrigins != null) {\n        const nodes = serializeAws_restXmlAllowedOrigins(input.AllowedOrigins, context);\n        nodes.map((node) => {\n            node = node.withName(\"AllowedOrigin\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.ExposeHeaders != null) {\n        const nodes = serializeAws_restXmlExposeHeaders(input.ExposeHeaders, context);\n        nodes.map((node) => {\n            node = node.withName(\"ExposeHeader\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.MaxAgeSeconds != null) {\n        const node = __XmlNode.of(\"MaxAgeSeconds\", String(input.MaxAgeSeconds)).withName(\"MaxAgeSeconds\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCORSRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlCORSRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlCreateBucketConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"CreateBucketConfiguration\");\n    if (input.LocationConstraint != null) {\n        const node = __XmlNode.of(\"BucketLocationConstraint\", input.LocationConstraint).withName(\"LocationConstraint\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCSVInput = (input, context) => {\n    const bodyNode = new __XmlNode(\"CSVInput\");\n    if (input.FileHeaderInfo != null) {\n        const node = __XmlNode.of(\"FileHeaderInfo\", input.FileHeaderInfo).withName(\"FileHeaderInfo\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Comments != null) {\n        const node = __XmlNode.of(\"Comments\", input.Comments).withName(\"Comments\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteEscapeCharacter != null) {\n        const node = __XmlNode.of(\"QuoteEscapeCharacter\", input.QuoteEscapeCharacter).withName(\"QuoteEscapeCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RecordDelimiter != null) {\n        const node = __XmlNode.of(\"RecordDelimiter\", input.RecordDelimiter).withName(\"RecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FieldDelimiter != null) {\n        const node = __XmlNode.of(\"FieldDelimiter\", input.FieldDelimiter).withName(\"FieldDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteCharacter != null) {\n        const node = __XmlNode.of(\"QuoteCharacter\", input.QuoteCharacter).withName(\"QuoteCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AllowQuotedRecordDelimiter != null) {\n        const node = __XmlNode\n            .of(\"AllowQuotedRecordDelimiter\", String(input.AllowQuotedRecordDelimiter))\n            .withName(\"AllowQuotedRecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCSVOutput = (input, context) => {\n    const bodyNode = new __XmlNode(\"CSVOutput\");\n    if (input.QuoteFields != null) {\n        const node = __XmlNode.of(\"QuoteFields\", input.QuoteFields).withName(\"QuoteFields\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteEscapeCharacter != null) {\n        const node = __XmlNode.of(\"QuoteEscapeCharacter\", input.QuoteEscapeCharacter).withName(\"QuoteEscapeCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RecordDelimiter != null) {\n        const node = __XmlNode.of(\"RecordDelimiter\", input.RecordDelimiter).withName(\"RecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FieldDelimiter != null) {\n        const node = __XmlNode.of(\"FieldDelimiter\", input.FieldDelimiter).withName(\"FieldDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteCharacter != null) {\n        const node = __XmlNode.of(\"QuoteCharacter\", input.QuoteCharacter).withName(\"QuoteCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlDefaultRetention = (input, context) => {\n    const bodyNode = new __XmlNode(\"DefaultRetention\");\n    if (input.Mode != null) {\n        const node = __XmlNode.of(\"ObjectLockRetentionMode\", input.Mode).withName(\"Mode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Days != null) {\n        const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Years != null) {\n        const node = __XmlNode.of(\"Years\", String(input.Years)).withName(\"Years\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlDelete = (input, context) => {\n    const bodyNode = new __XmlNode(\"Delete\");\n    if (input.Objects != null) {\n        const nodes = serializeAws_restXmlObjectIdentifierList(input.Objects, context);\n        nodes.map((node) => {\n            node = node.withName(\"Object\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Quiet != null) {\n        const node = __XmlNode.of(\"Quiet\", String(input.Quiet)).withName(\"Quiet\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlDeleteMarkerReplication = (input, context) => {\n    const bodyNode = new __XmlNode(\"DeleteMarkerReplication\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"DeleteMarkerReplicationStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlDestination = (input, context) => {\n    const bodyNode = new __XmlNode(\"Destination\");\n    if (input.Bucket != null) {\n        const node = __XmlNode.of(\"BucketName\", input.Bucket).withName(\"Bucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Account != null) {\n        const node = __XmlNode.of(\"AccountId\", input.Account).withName(\"Account\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClass != null) {\n        const node = __XmlNode.of(\"StorageClass\", input.StorageClass).withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessControlTranslation != null) {\n        const node = serializeAws_restXmlAccessControlTranslation(input.AccessControlTranslation, context).withName(\"AccessControlTranslation\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EncryptionConfiguration != null) {\n        const node = serializeAws_restXmlEncryptionConfiguration(input.EncryptionConfiguration, context).withName(\"EncryptionConfiguration\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplicationTime != null) {\n        const node = serializeAws_restXmlReplicationTime(input.ReplicationTime, context).withName(\"ReplicationTime\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Metrics != null) {\n        const node = serializeAws_restXmlMetrics(input.Metrics, context).withName(\"Metrics\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlEncryption = (input, context) => {\n    const bodyNode = new __XmlNode(\"Encryption\");\n    if (input.EncryptionType != null) {\n        const node = __XmlNode.of(\"ServerSideEncryption\", input.EncryptionType).withName(\"EncryptionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KMSKeyId != null) {\n        const node = __XmlNode.of(\"SSEKMSKeyId\", input.KMSKeyId).withName(\"KMSKeyId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KMSContext != null) {\n        const node = __XmlNode.of(\"KMSContext\", input.KMSContext).withName(\"KMSContext\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlEncryptionConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"EncryptionConfiguration\");\n    if (input.ReplicaKmsKeyID != null) {\n        const node = __XmlNode.of(\"ReplicaKmsKeyID\", input.ReplicaKmsKeyID).withName(\"ReplicaKmsKeyID\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlErrorDocument = (input, context) => {\n    const bodyNode = new __XmlNode(\"ErrorDocument\");\n    if (input.Key != null) {\n        const node = __XmlNode.of(\"ObjectKey\", input.Key).withName(\"Key\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlEventBridgeConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"EventBridgeConfiguration\");\n    return bodyNode;\n};\nconst serializeAws_restXmlEventList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = __XmlNode.of(\"Event\", entry);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlExistingObjectReplication = (input, context) => {\n    const bodyNode = new __XmlNode(\"ExistingObjectReplication\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"ExistingObjectReplicationStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlExposeHeaders = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = __XmlNode.of(\"ExposeHeader\", entry);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlFilterRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"FilterRule\");\n    if (input.Name != null) {\n        const node = __XmlNode.of(\"FilterRuleName\", input.Name).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Value != null) {\n        const node = __XmlNode.of(\"FilterRuleValue\", input.Value).withName(\"Value\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlFilterRuleList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlFilterRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlGlacierJobParameters = (input, context) => {\n    const bodyNode = new __XmlNode(\"GlacierJobParameters\");\n    if (input.Tier != null) {\n        const node = __XmlNode.of(\"Tier\", input.Tier).withName(\"Tier\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlGrant = (input, context) => {\n    const bodyNode = new __XmlNode(\"Grant\");\n    if (input.Grantee != null) {\n        const node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n        node.addAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Permission != null) {\n        const node = __XmlNode.of(\"Permission\", input.Permission).withName(\"Permission\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlGrantee = (input, context) => {\n    const bodyNode = new __XmlNode(\"Grantee\");\n    if (input.DisplayName != null) {\n        const node = __XmlNode.of(\"DisplayName\", input.DisplayName).withName(\"DisplayName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EmailAddress != null) {\n        const node = __XmlNode.of(\"EmailAddress\", input.EmailAddress).withName(\"EmailAddress\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ID != null) {\n        const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.URI != null) {\n        const node = __XmlNode.of(\"URI\", input.URI).withName(\"URI\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Type != null) {\n        bodyNode.addAttribute(\"xsi:type\", input.Type);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlGrants = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlGrant(entry, context);\n        return node.withName(\"Grant\");\n    });\n};\nconst serializeAws_restXmlIndexDocument = (input, context) => {\n    const bodyNode = new __XmlNode(\"IndexDocument\");\n    if (input.Suffix != null) {\n        const node = __XmlNode.of(\"Suffix\", input.Suffix).withName(\"Suffix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInputSerialization = (input, context) => {\n    const bodyNode = new __XmlNode(\"InputSerialization\");\n    if (input.CSV != null) {\n        const node = serializeAws_restXmlCSVInput(input.CSV, context).withName(\"CSV\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CompressionType != null) {\n        const node = __XmlNode.of(\"CompressionType\", input.CompressionType).withName(\"CompressionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.JSON != null) {\n        const node = serializeAws_restXmlJSONInput(input.JSON, context).withName(\"JSON\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Parquet != null) {\n        const node = serializeAws_restXmlParquetInput(input.Parquet, context).withName(\"Parquet\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlIntelligentTieringAndOperator = (input, context) => {\n    const bodyNode = new __XmlNode(\"IntelligentTieringAndOperator\");\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags != null) {\n        const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlIntelligentTieringConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"IntelligentTieringConfiguration\");\n    if (input.Id != null) {\n        const node = __XmlNode.of(\"IntelligentTieringId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlIntelligentTieringFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"IntelligentTieringStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tierings != null) {\n        const nodes = serializeAws_restXmlTieringList(input.Tierings, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tiering\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlIntelligentTieringFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"IntelligentTieringFilter\");\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tag != null) {\n        const node = serializeAws_restXmlTag(input.Tag, context).withName(\"Tag\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.And != null) {\n        const node = serializeAws_restXmlIntelligentTieringAndOperator(input.And, context).withName(\"And\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventoryConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"InventoryConfiguration\");\n    if (input.Destination != null) {\n        const node = serializeAws_restXmlInventoryDestination(input.Destination, context).withName(\"Destination\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IsEnabled != null) {\n        const node = __XmlNode.of(\"IsEnabled\", String(input.IsEnabled)).withName(\"IsEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlInventoryFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Id != null) {\n        const node = __XmlNode.of(\"InventoryId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IncludedObjectVersions != null) {\n        const node = __XmlNode\n            .of(\"InventoryIncludedObjectVersions\", input.IncludedObjectVersions)\n            .withName(\"IncludedObjectVersions\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OptionalFields != null) {\n        const nodes = serializeAws_restXmlInventoryOptionalFields(input.OptionalFields, context);\n        const containerNode = new __XmlNode(\"OptionalFields\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Schedule != null) {\n        const node = serializeAws_restXmlInventorySchedule(input.Schedule, context).withName(\"Schedule\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventoryDestination = (input, context) => {\n    const bodyNode = new __XmlNode(\"InventoryDestination\");\n    if (input.S3BucketDestination != null) {\n        const node = serializeAws_restXmlInventoryS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventoryEncryption = (input, context) => {\n    const bodyNode = new __XmlNode(\"InventoryEncryption\");\n    if (input.SSES3 != null) {\n        const node = serializeAws_restXmlSSES3(input.SSES3, context).withName(\"SSE-S3\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SSEKMS != null) {\n        const node = serializeAws_restXmlSSEKMS(input.SSEKMS, context).withName(\"SSE-KMS\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventoryFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"InventoryFilter\");\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventoryOptionalFields = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = __XmlNode.of(\"InventoryOptionalField\", entry);\n        return node.withName(\"Field\");\n    });\n};\nconst serializeAws_restXmlInventoryS3BucketDestination = (input, context) => {\n    const bodyNode = new __XmlNode(\"InventoryS3BucketDestination\");\n    if (input.AccountId != null) {\n        const node = __XmlNode.of(\"AccountId\", input.AccountId).withName(\"AccountId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Bucket != null) {\n        const node = __XmlNode.of(\"BucketName\", input.Bucket).withName(\"Bucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Format != null) {\n        const node = __XmlNode.of(\"InventoryFormat\", input.Format).withName(\"Format\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Encryption != null) {\n        const node = serializeAws_restXmlInventoryEncryption(input.Encryption, context).withName(\"Encryption\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventorySchedule = (input, context) => {\n    const bodyNode = new __XmlNode(\"InventorySchedule\");\n    if (input.Frequency != null) {\n        const node = __XmlNode.of(\"InventoryFrequency\", input.Frequency).withName(\"Frequency\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlJSONInput = (input, context) => {\n    const bodyNode = new __XmlNode(\"JSONInput\");\n    if (input.Type != null) {\n        const node = __XmlNode.of(\"JSONType\", input.Type).withName(\"Type\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlJSONOutput = (input, context) => {\n    const bodyNode = new __XmlNode(\"JSONOutput\");\n    if (input.RecordDelimiter != null) {\n        const node = __XmlNode.of(\"RecordDelimiter\", input.RecordDelimiter).withName(\"RecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLambdaFunctionConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"LambdaFunctionConfiguration\");\n    if (input.Id != null) {\n        const node = __XmlNode.of(\"NotificationId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.LambdaFunctionArn != null) {\n        const node = __XmlNode.of(\"LambdaFunctionArn\", input.LambdaFunctionArn).withName(\"CloudFunction\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Events != null) {\n        const nodes = serializeAws_restXmlEventList(input.Events, context);\n        nodes.map((node) => {\n            node = node.withName(\"Event\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLambdaFunctionConfigurationList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlLifecycleExpiration = (input, context) => {\n    const bodyNode = new __XmlNode(\"LifecycleExpiration\");\n    if (input.Date != null) {\n        const node = __XmlNode.of(\"Date\", (input.Date.toISOString().split(\".\")[0] + \"Z\").toString()).withName(\"Date\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Days != null) {\n        const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExpiredObjectDeleteMarker != null) {\n        const node = __XmlNode\n            .of(\"ExpiredObjectDeleteMarker\", String(input.ExpiredObjectDeleteMarker))\n            .withName(\"ExpiredObjectDeleteMarker\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"LifecycleRule\");\n    if (input.Expiration != null) {\n        const node = serializeAws_restXmlLifecycleExpiration(input.Expiration, context).withName(\"Expiration\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ID != null) {\n        const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlLifecycleRuleFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"ExpirationStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Transitions != null) {\n        const nodes = serializeAws_restXmlTransitionList(input.Transitions, context);\n        nodes.map((node) => {\n            node = node.withName(\"Transition\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.NoncurrentVersionTransitions != null) {\n        const nodes = serializeAws_restXmlNoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);\n        nodes.map((node) => {\n            node = node.withName(\"NoncurrentVersionTransition\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.NoncurrentVersionExpiration != null) {\n        const node = serializeAws_restXmlNoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName(\"NoncurrentVersionExpiration\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AbortIncompleteMultipartUpload != null) {\n        const node = serializeAws_restXmlAbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName(\"AbortIncompleteMultipartUpload\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRuleAndOperator = (input, context) => {\n    const bodyNode = new __XmlNode(\"LifecycleRuleAndOperator\");\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags != null) {\n        const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.ObjectSizeGreaterThan != null) {\n        const node = __XmlNode\n            .of(\"ObjectSizeGreaterThanBytes\", String(input.ObjectSizeGreaterThan))\n            .withName(\"ObjectSizeGreaterThan\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ObjectSizeLessThan != null) {\n        const node = __XmlNode\n            .of(\"ObjectSizeLessThanBytes\", String(input.ObjectSizeLessThan))\n            .withName(\"ObjectSizeLessThan\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRuleFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"LifecycleRuleFilter\");\n    LifecycleRuleFilter.visit(input, {\n        Prefix: (value) => {\n            const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        ObjectSizeGreaterThan: (value) => {\n            const node = __XmlNode.of(\"ObjectSizeGreaterThanBytes\", String(value)).withName(\"ObjectSizeGreaterThan\");\n            bodyNode.addChildNode(node);\n        },\n        ObjectSizeLessThan: (value) => {\n            const node = __XmlNode.of(\"ObjectSizeLessThanBytes\", String(value)).withName(\"ObjectSizeLessThan\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = serializeAws_restXmlLifecycleRuleAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlLifecycleRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlLoggingEnabled = (input, context) => {\n    const bodyNode = new __XmlNode(\"LoggingEnabled\");\n    if (input.TargetBucket != null) {\n        const node = __XmlNode.of(\"TargetBucket\", input.TargetBucket).withName(\"TargetBucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.TargetGrants != null) {\n        const nodes = serializeAws_restXmlTargetGrants(input.TargetGrants, context);\n        const containerNode = new __XmlNode(\"TargetGrants\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.TargetPrefix != null) {\n        const node = __XmlNode.of(\"TargetPrefix\", input.TargetPrefix).withName(\"TargetPrefix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMetadataEntry = (input, context) => {\n    const bodyNode = new __XmlNode(\"MetadataEntry\");\n    if (input.Name != null) {\n        const node = __XmlNode.of(\"MetadataKey\", input.Name).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Value != null) {\n        const node = __XmlNode.of(\"MetadataValue\", input.Value).withName(\"Value\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMetrics = (input, context) => {\n    const bodyNode = new __XmlNode(\"Metrics\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"MetricsStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EventThreshold != null) {\n        const node = serializeAws_restXmlReplicationTimeValue(input.EventThreshold, context).withName(\"EventThreshold\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMetricsAndOperator = (input, context) => {\n    const bodyNode = new __XmlNode(\"MetricsAndOperator\");\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags != null) {\n        const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.AccessPointArn != null) {\n        const node = __XmlNode.of(\"AccessPointArn\", input.AccessPointArn).withName(\"AccessPointArn\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMetricsConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"MetricsConfiguration\");\n    if (input.Id != null) {\n        const node = __XmlNode.of(\"MetricsId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlMetricsFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMetricsFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"MetricsFilter\");\n    MetricsFilter.visit(input, {\n        Prefix: (value) => {\n            const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        AccessPointArn: (value) => {\n            const node = __XmlNode.of(\"AccessPointArn\", value).withName(\"AccessPointArn\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = serializeAws_restXmlMetricsAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst serializeAws_restXmlNoncurrentVersionExpiration = (input, context) => {\n    const bodyNode = new __XmlNode(\"NoncurrentVersionExpiration\");\n    if (input.NoncurrentDays != null) {\n        const node = __XmlNode.of(\"Days\", String(input.NoncurrentDays)).withName(\"NoncurrentDays\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.NewerNoncurrentVersions != null) {\n        const node = __XmlNode\n            .of(\"VersionCount\", String(input.NewerNoncurrentVersions))\n            .withName(\"NewerNoncurrentVersions\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlNoncurrentVersionTransition = (input, context) => {\n    const bodyNode = new __XmlNode(\"NoncurrentVersionTransition\");\n    if (input.NoncurrentDays != null) {\n        const node = __XmlNode.of(\"Days\", String(input.NoncurrentDays)).withName(\"NoncurrentDays\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClass != null) {\n        const node = __XmlNode.of(\"TransitionStorageClass\", input.StorageClass).withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.NewerNoncurrentVersions != null) {\n        const node = __XmlNode\n            .of(\"VersionCount\", String(input.NewerNoncurrentVersions))\n            .withName(\"NewerNoncurrentVersions\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlNoncurrentVersionTransitionList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlNoncurrentVersionTransition(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlNotificationConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"NotificationConfiguration\");\n    if (input.TopicConfigurations != null) {\n        const nodes = serializeAws_restXmlTopicConfigurationList(input.TopicConfigurations, context);\n        nodes.map((node) => {\n            node = node.withName(\"TopicConfiguration\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.QueueConfigurations != null) {\n        const nodes = serializeAws_restXmlQueueConfigurationList(input.QueueConfigurations, context);\n        nodes.map((node) => {\n            node = node.withName(\"QueueConfiguration\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.LambdaFunctionConfigurations != null) {\n        const nodes = serializeAws_restXmlLambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);\n        nodes.map((node) => {\n            node = node.withName(\"CloudFunctionConfiguration\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.EventBridgeConfiguration != null) {\n        const node = serializeAws_restXmlEventBridgeConfiguration(input.EventBridgeConfiguration, context).withName(\"EventBridgeConfiguration\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlNotificationConfigurationFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"NotificationConfigurationFilter\");\n    if (input.Key != null) {\n        const node = serializeAws_restXmlS3KeyFilter(input.Key, context).withName(\"S3Key\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlObjectIdentifier = (input, context) => {\n    const bodyNode = new __XmlNode(\"ObjectIdentifier\");\n    if (input.Key != null) {\n        const node = __XmlNode.of(\"ObjectKey\", input.Key).withName(\"Key\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.VersionId != null) {\n        const node = __XmlNode.of(\"ObjectVersionId\", input.VersionId).withName(\"VersionId\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlObjectIdentifierList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlObjectIdentifier(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlObjectLockConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"ObjectLockConfiguration\");\n    if (input.ObjectLockEnabled != null) {\n        const node = __XmlNode.of(\"ObjectLockEnabled\", input.ObjectLockEnabled).withName(\"ObjectLockEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Rule != null) {\n        const node = serializeAws_restXmlObjectLockRule(input.Rule, context).withName(\"Rule\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlObjectLockLegalHold = (input, context) => {\n    const bodyNode = new __XmlNode(\"ObjectLockLegalHold\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"ObjectLockLegalHoldStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlObjectLockRetention = (input, context) => {\n    const bodyNode = new __XmlNode(\"ObjectLockRetention\");\n    if (input.Mode != null) {\n        const node = __XmlNode.of(\"ObjectLockRetentionMode\", input.Mode).withName(\"Mode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RetainUntilDate != null) {\n        const node = __XmlNode\n            .of(\"Date\", (input.RetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString())\n            .withName(\"RetainUntilDate\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlObjectLockRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"ObjectLockRule\");\n    if (input.DefaultRetention != null) {\n        const node = serializeAws_restXmlDefaultRetention(input.DefaultRetention, context).withName(\"DefaultRetention\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOutputLocation = (input, context) => {\n    const bodyNode = new __XmlNode(\"OutputLocation\");\n    if (input.S3 != null) {\n        const node = serializeAws_restXmlS3Location(input.S3, context).withName(\"S3\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOutputSerialization = (input, context) => {\n    const bodyNode = new __XmlNode(\"OutputSerialization\");\n    if (input.CSV != null) {\n        const node = serializeAws_restXmlCSVOutput(input.CSV, context).withName(\"CSV\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.JSON != null) {\n        const node = serializeAws_restXmlJSONOutput(input.JSON, context).withName(\"JSON\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOwner = (input, context) => {\n    const bodyNode = new __XmlNode(\"Owner\");\n    if (input.DisplayName != null) {\n        const node = __XmlNode.of(\"DisplayName\", input.DisplayName).withName(\"DisplayName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ID != null) {\n        const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOwnershipControls = (input, context) => {\n    const bodyNode = new __XmlNode(\"OwnershipControls\");\n    if (input.Rules != null) {\n        const nodes = serializeAws_restXmlOwnershipControlsRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOwnershipControlsRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"OwnershipControlsRule\");\n    if (input.ObjectOwnership != null) {\n        const node = __XmlNode.of(\"ObjectOwnership\", input.ObjectOwnership).withName(\"ObjectOwnership\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOwnershipControlsRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlOwnershipControlsRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlParquetInput = (input, context) => {\n    const bodyNode = new __XmlNode(\"ParquetInput\");\n    return bodyNode;\n};\nconst serializeAws_restXmlPublicAccessBlockConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"PublicAccessBlockConfiguration\");\n    if (input.BlockPublicAcls != null) {\n        const node = __XmlNode.of(\"Setting\", String(input.BlockPublicAcls)).withName(\"BlockPublicAcls\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IgnorePublicAcls != null) {\n        const node = __XmlNode.of(\"Setting\", String(input.IgnorePublicAcls)).withName(\"IgnorePublicAcls\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.BlockPublicPolicy != null) {\n        const node = __XmlNode.of(\"Setting\", String(input.BlockPublicPolicy)).withName(\"BlockPublicPolicy\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RestrictPublicBuckets != null) {\n        const node = __XmlNode.of(\"Setting\", String(input.RestrictPublicBuckets)).withName(\"RestrictPublicBuckets\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlQueueConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"QueueConfiguration\");\n    if (input.Id != null) {\n        const node = __XmlNode.of(\"NotificationId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QueueArn != null) {\n        const node = __XmlNode.of(\"QueueArn\", input.QueueArn).withName(\"Queue\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Events != null) {\n        const nodes = serializeAws_restXmlEventList(input.Events, context);\n        nodes.map((node) => {\n            node = node.withName(\"Event\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlQueueConfigurationList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlQueueConfiguration(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlRedirect = (input, context) => {\n    const bodyNode = new __XmlNode(\"Redirect\");\n    if (input.HostName != null) {\n        const node = __XmlNode.of(\"HostName\", input.HostName).withName(\"HostName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.HttpRedirectCode != null) {\n        const node = __XmlNode.of(\"HttpRedirectCode\", input.HttpRedirectCode).withName(\"HttpRedirectCode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Protocol != null) {\n        const node = __XmlNode.of(\"Protocol\", input.Protocol).withName(\"Protocol\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplaceKeyPrefixWith != null) {\n        const node = __XmlNode.of(\"ReplaceKeyPrefixWith\", input.ReplaceKeyPrefixWith).withName(\"ReplaceKeyPrefixWith\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplaceKeyWith != null) {\n        const node = __XmlNode.of(\"ReplaceKeyWith\", input.ReplaceKeyWith).withName(\"ReplaceKeyWith\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRedirectAllRequestsTo = (input, context) => {\n    const bodyNode = new __XmlNode(\"RedirectAllRequestsTo\");\n    if (input.HostName != null) {\n        const node = __XmlNode.of(\"HostName\", input.HostName).withName(\"HostName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Protocol != null) {\n        const node = __XmlNode.of(\"Protocol\", input.Protocol).withName(\"Protocol\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicaModifications = (input, context) => {\n    const bodyNode = new __XmlNode(\"ReplicaModifications\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"ReplicaModificationsStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"ReplicationConfiguration\");\n    if (input.Role != null) {\n        const node = __XmlNode.of(\"Role\", input.Role).withName(\"Role\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Rules != null) {\n        const nodes = serializeAws_restXmlReplicationRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"ReplicationRule\");\n    if (input.ID != null) {\n        const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Priority != null) {\n        const node = __XmlNode.of(\"Priority\", String(input.Priority)).withName(\"Priority\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlReplicationRuleFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"ReplicationRuleStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SourceSelectionCriteria != null) {\n        const node = serializeAws_restXmlSourceSelectionCriteria(input.SourceSelectionCriteria, context).withName(\"SourceSelectionCriteria\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExistingObjectReplication != null) {\n        const node = serializeAws_restXmlExistingObjectReplication(input.ExistingObjectReplication, context).withName(\"ExistingObjectReplication\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Destination != null) {\n        const node = serializeAws_restXmlDestination(input.Destination, context).withName(\"Destination\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.DeleteMarkerReplication != null) {\n        const node = serializeAws_restXmlDeleteMarkerReplication(input.DeleteMarkerReplication, context).withName(\"DeleteMarkerReplication\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationRuleAndOperator = (input, context) => {\n    const bodyNode = new __XmlNode(\"ReplicationRuleAndOperator\");\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags != null) {\n        const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationRuleFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"ReplicationRuleFilter\");\n    ReplicationRuleFilter.visit(input, {\n        Prefix: (value) => {\n            const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = serializeAws_restXmlReplicationRuleAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlReplicationRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlReplicationTime = (input, context) => {\n    const bodyNode = new __XmlNode(\"ReplicationTime\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"ReplicationTimeStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Time != null) {\n        const node = serializeAws_restXmlReplicationTimeValue(input.Time, context).withName(\"Time\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationTimeValue = (input, context) => {\n    const bodyNode = new __XmlNode(\"ReplicationTimeValue\");\n    if (input.Minutes != null) {\n        const node = __XmlNode.of(\"Minutes\", String(input.Minutes)).withName(\"Minutes\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRequestPaymentConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"RequestPaymentConfiguration\");\n    if (input.Payer != null) {\n        const node = __XmlNode.of(\"Payer\", input.Payer).withName(\"Payer\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRequestProgress = (input, context) => {\n    const bodyNode = new __XmlNode(\"RequestProgress\");\n    if (input.Enabled != null) {\n        const node = __XmlNode.of(\"EnableRequestProgress\", String(input.Enabled)).withName(\"Enabled\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRestoreRequest = (input, context) => {\n    const bodyNode = new __XmlNode(\"RestoreRequest\");\n    if (input.Days != null) {\n        const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.GlacierJobParameters != null) {\n        const node = serializeAws_restXmlGlacierJobParameters(input.GlacierJobParameters, context).withName(\"GlacierJobParameters\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Type != null) {\n        const node = __XmlNode.of(\"RestoreRequestType\", input.Type).withName(\"Type\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tier != null) {\n        const node = __XmlNode.of(\"Tier\", input.Tier).withName(\"Tier\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Description != null) {\n        const node = __XmlNode.of(\"Description\", input.Description).withName(\"Description\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SelectParameters != null) {\n        const node = serializeAws_restXmlSelectParameters(input.SelectParameters, context).withName(\"SelectParameters\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OutputLocation != null) {\n        const node = serializeAws_restXmlOutputLocation(input.OutputLocation, context).withName(\"OutputLocation\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRoutingRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"RoutingRule\");\n    if (input.Condition != null) {\n        const node = serializeAws_restXmlCondition(input.Condition, context).withName(\"Condition\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Redirect != null) {\n        const node = serializeAws_restXmlRedirect(input.Redirect, context).withName(\"Redirect\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRoutingRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlRoutingRule(entry, context);\n        return node.withName(\"RoutingRule\");\n    });\n};\nconst serializeAws_restXmlS3KeyFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"S3KeyFilter\");\n    if (input.FilterRules != null) {\n        const nodes = serializeAws_restXmlFilterRuleList(input.FilterRules, context);\n        nodes.map((node) => {\n            node = node.withName(\"FilterRule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlS3Location = (input, context) => {\n    const bodyNode = new __XmlNode(\"S3Location\");\n    if (input.BucketName != null) {\n        const node = __XmlNode.of(\"BucketName\", input.BucketName).withName(\"BucketName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"LocationPrefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Encryption != null) {\n        const node = serializeAws_restXmlEncryption(input.Encryption, context).withName(\"Encryption\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CannedACL != null) {\n        const node = __XmlNode.of(\"ObjectCannedACL\", input.CannedACL).withName(\"CannedACL\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessControlList != null) {\n        const nodes = serializeAws_restXmlGrants(input.AccessControlList, context);\n        const containerNode = new __XmlNode(\"AccessControlList\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Tagging != null) {\n        const node = serializeAws_restXmlTagging(input.Tagging, context).withName(\"Tagging\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.UserMetadata != null) {\n        const nodes = serializeAws_restXmlUserMetadata(input.UserMetadata, context);\n        const containerNode = new __XmlNode(\"UserMetadata\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.StorageClass != null) {\n        const node = __XmlNode.of(\"StorageClass\", input.StorageClass).withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlScanRange = (input, context) => {\n    const bodyNode = new __XmlNode(\"ScanRange\");\n    if (input.Start != null) {\n        const node = __XmlNode.of(\"Start\", String(input.Start)).withName(\"Start\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.End != null) {\n        const node = __XmlNode.of(\"End\", String(input.End)).withName(\"End\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlSelectParameters = (input, context) => {\n    const bodyNode = new __XmlNode(\"SelectParameters\");\n    if (input.InputSerialization != null) {\n        const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExpressionType != null) {\n        const node = __XmlNode.of(\"ExpressionType\", input.ExpressionType).withName(\"ExpressionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Expression != null) {\n        const node = __XmlNode.of(\"Expression\", input.Expression).withName(\"Expression\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OutputSerialization != null) {\n        const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionByDefault = (input, context) => {\n    const bodyNode = new __XmlNode(\"ServerSideEncryptionByDefault\");\n    if (input.SSEAlgorithm != null) {\n        const node = __XmlNode.of(\"ServerSideEncryption\", input.SSEAlgorithm).withName(\"SSEAlgorithm\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KMSMasterKeyID != null) {\n        const node = __XmlNode.of(\"SSEKMSKeyId\", input.KMSMasterKeyID).withName(\"KMSMasterKeyID\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"ServerSideEncryptionConfiguration\");\n    if (input.Rules != null) {\n        const nodes = serializeAws_restXmlServerSideEncryptionRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"ServerSideEncryptionRule\");\n    if (input.ApplyServerSideEncryptionByDefault != null) {\n        const node = serializeAws_restXmlServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName(\"ApplyServerSideEncryptionByDefault\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.BucketKeyEnabled != null) {\n        const node = __XmlNode.of(\"BucketKeyEnabled\", String(input.BucketKeyEnabled)).withName(\"BucketKeyEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlServerSideEncryptionRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlSourceSelectionCriteria = (input, context) => {\n    const bodyNode = new __XmlNode(\"SourceSelectionCriteria\");\n    if (input.SseKmsEncryptedObjects != null) {\n        const node = serializeAws_restXmlSseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName(\"SseKmsEncryptedObjects\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplicaModifications != null) {\n        const node = serializeAws_restXmlReplicaModifications(input.ReplicaModifications, context).withName(\"ReplicaModifications\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlSSEKMS = (input, context) => {\n    const bodyNode = new __XmlNode(\"SSE-KMS\");\n    if (input.KeyId != null) {\n        const node = __XmlNode.of(\"SSEKMSKeyId\", input.KeyId).withName(\"KeyId\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlSseKmsEncryptedObjects = (input, context) => {\n    const bodyNode = new __XmlNode(\"SseKmsEncryptedObjects\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"SseKmsEncryptedObjectsStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlSSES3 = (input, context) => {\n    const bodyNode = new __XmlNode(\"SSE-S3\");\n    return bodyNode;\n};\nconst serializeAws_restXmlStorageClassAnalysis = (input, context) => {\n    const bodyNode = new __XmlNode(\"StorageClassAnalysis\");\n    if (input.DataExport != null) {\n        const node = serializeAws_restXmlStorageClassAnalysisDataExport(input.DataExport, context).withName(\"DataExport\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlStorageClassAnalysisDataExport = (input, context) => {\n    const bodyNode = new __XmlNode(\"StorageClassAnalysisDataExport\");\n    if (input.OutputSchemaVersion != null) {\n        const node = __XmlNode\n            .of(\"StorageClassAnalysisSchemaVersion\", input.OutputSchemaVersion)\n            .withName(\"OutputSchemaVersion\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Destination != null) {\n        const node = serializeAws_restXmlAnalyticsExportDestination(input.Destination, context).withName(\"Destination\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTag = (input, context) => {\n    const bodyNode = new __XmlNode(\"Tag\");\n    if (input.Key != null) {\n        const node = __XmlNode.of(\"ObjectKey\", input.Key).withName(\"Key\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Value != null) {\n        const node = __XmlNode.of(\"Value\", input.Value).withName(\"Value\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTagging = (input, context) => {\n    const bodyNode = new __XmlNode(\"Tagging\");\n    if (input.TagSet != null) {\n        const nodes = serializeAws_restXmlTagSet(input.TagSet, context);\n        const containerNode = new __XmlNode(\"TagSet\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTagSet = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlTag(entry, context);\n        return node.withName(\"Tag\");\n    });\n};\nconst serializeAws_restXmlTargetGrant = (input, context) => {\n    const bodyNode = new __XmlNode(\"TargetGrant\");\n    if (input.Grantee != null) {\n        const node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n        node.addAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Permission != null) {\n        const node = __XmlNode.of(\"BucketLogsPermission\", input.Permission).withName(\"Permission\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTargetGrants = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlTargetGrant(entry, context);\n        return node.withName(\"Grant\");\n    });\n};\nconst serializeAws_restXmlTiering = (input, context) => {\n    const bodyNode = new __XmlNode(\"Tiering\");\n    if (input.Days != null) {\n        const node = __XmlNode.of(\"IntelligentTieringDays\", String(input.Days)).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessTier != null) {\n        const node = __XmlNode.of(\"IntelligentTieringAccessTier\", input.AccessTier).withName(\"AccessTier\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTieringList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlTiering(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlTopicConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"TopicConfiguration\");\n    if (input.Id != null) {\n        const node = __XmlNode.of(\"NotificationId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.TopicArn != null) {\n        const node = __XmlNode.of(\"TopicArn\", input.TopicArn).withName(\"Topic\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Events != null) {\n        const nodes = serializeAws_restXmlEventList(input.Events, context);\n        nodes.map((node) => {\n            node = node.withName(\"Event\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTopicConfigurationList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlTopicConfiguration(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlTransition = (input, context) => {\n    const bodyNode = new __XmlNode(\"Transition\");\n    if (input.Date != null) {\n        const node = __XmlNode.of(\"Date\", (input.Date.toISOString().split(\".\")[0] + \"Z\").toString()).withName(\"Date\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Days != null) {\n        const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClass != null) {\n        const node = __XmlNode.of(\"TransitionStorageClass\", input.StorageClass).withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTransitionList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlTransition(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlUserMetadata = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlMetadataEntry(entry, context);\n        return node.withName(\"MetadataEntry\");\n    });\n};\nconst serializeAws_restXmlVersioningConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"VersioningConfiguration\");\n    if (input.MFADelete != null) {\n        const node = __XmlNode.of(\"MFADelete\", input.MFADelete).withName(\"MfaDelete\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"BucketVersioningStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlWebsiteConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"WebsiteConfiguration\");\n    if (input.ErrorDocument != null) {\n        const node = serializeAws_restXmlErrorDocument(input.ErrorDocument, context).withName(\"ErrorDocument\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IndexDocument != null) {\n        const node = serializeAws_restXmlIndexDocument(input.IndexDocument, context).withName(\"IndexDocument\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RedirectAllRequestsTo != null) {\n        const node = serializeAws_restXmlRedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName(\"RedirectAllRequestsTo\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RoutingRules != null) {\n        const nodes = serializeAws_restXmlRoutingRules(input.RoutingRules, context);\n        const containerNode = new __XmlNode(\"RoutingRules\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst deserializeAws_restXmlAbortIncompleteMultipartUpload = (output, context) => {\n    const contents = {\n        DaysAfterInitiation: undefined,\n    };\n    if (output[\"DaysAfterInitiation\"] !== undefined) {\n        contents.DaysAfterInitiation = __strictParseInt32(output[\"DaysAfterInitiation\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAccessControlTranslation = (output, context) => {\n    const contents = {\n        Owner: undefined,\n    };\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = __expectString(output[\"Owner\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAllowedHeaders = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return __expectString(entry);\n    });\n};\nconst deserializeAws_restXmlAllowedMethods = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return __expectString(entry);\n    });\n};\nconst deserializeAws_restXmlAllowedOrigins = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return __expectString(entry);\n    });\n};\nconst deserializeAws_restXmlAnalyticsAndOperator = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tags: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    else if (output[\"Tag\"] !== undefined) {\n        contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAnalyticsConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        Filter: undefined,\n        StorageClassAnalysis: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = __expectString(output[\"Id\"]);\n    }\n    if (output.Filter === \"\") {\n    }\n    else if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlAnalyticsFilter(__expectUnion(output[\"Filter\"]), context);\n    }\n    if (output[\"StorageClassAnalysis\"] !== undefined) {\n        contents.StorageClassAnalysis = deserializeAws_restXmlStorageClassAnalysis(output[\"StorageClassAnalysis\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAnalyticsConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlAnalyticsConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlAnalyticsExportDestination = (output, context) => {\n    const contents = {\n        S3BucketDestination: undefined,\n    };\n    if (output[\"S3BucketDestination\"] !== undefined) {\n        contents.S3BucketDestination = deserializeAws_restXmlAnalyticsS3BucketDestination(output[\"S3BucketDestination\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAnalyticsFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: __expectString(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: deserializeAws_restXmlAnalyticsAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst deserializeAws_restXmlAnalyticsS3BucketDestination = (output, context) => {\n    const contents = {\n        Format: undefined,\n        BucketAccountId: undefined,\n        Bucket: undefined,\n        Prefix: undefined,\n    };\n    if (output[\"Format\"] !== undefined) {\n        contents.Format = __expectString(output[\"Format\"]);\n    }\n    if (output[\"BucketAccountId\"] !== undefined) {\n        contents.BucketAccountId = __expectString(output[\"BucketAccountId\"]);\n    }\n    if (output[\"Bucket\"] !== undefined) {\n        contents.Bucket = __expectString(output[\"Bucket\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlBucket = (output, context) => {\n    const contents = {\n        Name: undefined,\n        CreationDate: undefined,\n    };\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = __expectString(output[\"Name\"]);\n    }\n    if (output[\"CreationDate\"] !== undefined) {\n        contents.CreationDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"CreationDate\"]));\n    }\n    return contents;\n};\nconst deserializeAws_restXmlBuckets = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlBucket(entry, context);\n    });\n};\nconst deserializeAws_restXmlChecksum = (output, context) => {\n    const contents = {\n        ChecksumCRC32: undefined,\n        ChecksumCRC32C: undefined,\n        ChecksumSHA1: undefined,\n        ChecksumSHA256: undefined,\n    };\n    if (output[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n    }\n    if (output[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n    }\n    if (output[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n    }\n    if (output[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlChecksumAlgorithmList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return __expectString(entry);\n    });\n};\nconst deserializeAws_restXmlCommonPrefix = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCommonPrefixList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlCommonPrefix(entry, context);\n    });\n};\nconst deserializeAws_restXmlCondition = (output, context) => {\n    const contents = {\n        HttpErrorCodeReturnedEquals: undefined,\n        KeyPrefixEquals: undefined,\n    };\n    if (output[\"HttpErrorCodeReturnedEquals\"] !== undefined) {\n        contents.HttpErrorCodeReturnedEquals = __expectString(output[\"HttpErrorCodeReturnedEquals\"]);\n    }\n    if (output[\"KeyPrefixEquals\"] !== undefined) {\n        contents.KeyPrefixEquals = __expectString(output[\"KeyPrefixEquals\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlContinuationEvent = (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst deserializeAws_restXmlCopyObjectResult = (output, context) => {\n    const contents = {\n        ETag: undefined,\n        LastModified: undefined,\n        ChecksumCRC32: undefined,\n        ChecksumCRC32C: undefined,\n        ChecksumSHA1: undefined,\n        ChecksumSHA256: undefined,\n    };\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = __expectString(output[\"ETag\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n    }\n    if (output[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n    }\n    if (output[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n    }\n    if (output[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n    }\n    if (output[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCopyPartResult = (output, context) => {\n    const contents = {\n        ETag: undefined,\n        LastModified: undefined,\n        ChecksumCRC32: undefined,\n        ChecksumCRC32C: undefined,\n        ChecksumSHA1: undefined,\n        ChecksumSHA256: undefined,\n    };\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = __expectString(output[\"ETag\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n    }\n    if (output[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n    }\n    if (output[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n    }\n    if (output[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n    }\n    if (output[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCORSRule = (output, context) => {\n    const contents = {\n        ID: undefined,\n        AllowedHeaders: undefined,\n        AllowedMethods: undefined,\n        AllowedOrigins: undefined,\n        ExposeHeaders: undefined,\n        MaxAgeSeconds: undefined,\n    };\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = __expectString(output[\"ID\"]);\n    }\n    if (output.AllowedHeader === \"\") {\n        contents.AllowedHeaders = [];\n    }\n    else if (output[\"AllowedHeader\"] !== undefined) {\n        contents.AllowedHeaders = deserializeAws_restXmlAllowedHeaders(__getArrayIfSingleItem(output[\"AllowedHeader\"]), context);\n    }\n    if (output.AllowedMethod === \"\") {\n        contents.AllowedMethods = [];\n    }\n    else if (output[\"AllowedMethod\"] !== undefined) {\n        contents.AllowedMethods = deserializeAws_restXmlAllowedMethods(__getArrayIfSingleItem(output[\"AllowedMethod\"]), context);\n    }\n    if (output.AllowedOrigin === \"\") {\n        contents.AllowedOrigins = [];\n    }\n    else if (output[\"AllowedOrigin\"] !== undefined) {\n        contents.AllowedOrigins = deserializeAws_restXmlAllowedOrigins(__getArrayIfSingleItem(output[\"AllowedOrigin\"]), context);\n    }\n    if (output.ExposeHeader === \"\") {\n        contents.ExposeHeaders = [];\n    }\n    else if (output[\"ExposeHeader\"] !== undefined) {\n        contents.ExposeHeaders = deserializeAws_restXmlExposeHeaders(__getArrayIfSingleItem(output[\"ExposeHeader\"]), context);\n    }\n    if (output[\"MaxAgeSeconds\"] !== undefined) {\n        contents.MaxAgeSeconds = __strictParseInt32(output[\"MaxAgeSeconds\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCORSRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlCORSRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlDefaultRetention = (output, context) => {\n    const contents = {\n        Mode: undefined,\n        Days: undefined,\n        Years: undefined,\n    };\n    if (output[\"Mode\"] !== undefined) {\n        contents.Mode = __expectString(output[\"Mode\"]);\n    }\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = __strictParseInt32(output[\"Days\"]);\n    }\n    if (output[\"Years\"] !== undefined) {\n        contents.Years = __strictParseInt32(output[\"Years\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDeletedObject = (output, context) => {\n    const contents = {\n        Key: undefined,\n        VersionId: undefined,\n        DeleteMarker: undefined,\n        DeleteMarkerVersionId: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = __expectString(output[\"VersionId\"]);\n    }\n    if (output[\"DeleteMarker\"] !== undefined) {\n        contents.DeleteMarker = __parseBoolean(output[\"DeleteMarker\"]);\n    }\n    if (output[\"DeleteMarkerVersionId\"] !== undefined) {\n        contents.DeleteMarkerVersionId = __expectString(output[\"DeleteMarkerVersionId\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDeletedObjects = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlDeletedObject(entry, context);\n    });\n};\nconst deserializeAws_restXmlDeleteMarkerEntry = (output, context) => {\n    const contents = {\n        Owner: undefined,\n        Key: undefined,\n        VersionId: undefined,\n        IsLatest: undefined,\n        LastModified: undefined,\n    };\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n    }\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = __expectString(output[\"VersionId\"]);\n    }\n    if (output[\"IsLatest\"] !== undefined) {\n        contents.IsLatest = __parseBoolean(output[\"IsLatest\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDeleteMarkerReplication = (output, context) => {\n    const contents = {\n        Status: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDeleteMarkers = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlDeleteMarkerEntry(entry, context);\n    });\n};\nconst deserializeAws_restXmlDestination = (output, context) => {\n    const contents = {\n        Bucket: undefined,\n        Account: undefined,\n        StorageClass: undefined,\n        AccessControlTranslation: undefined,\n        EncryptionConfiguration: undefined,\n        ReplicationTime: undefined,\n        Metrics: undefined,\n    };\n    if (output[\"Bucket\"] !== undefined) {\n        contents.Bucket = __expectString(output[\"Bucket\"]);\n    }\n    if (output[\"Account\"] !== undefined) {\n        contents.Account = __expectString(output[\"Account\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(output[\"StorageClass\"]);\n    }\n    if (output[\"AccessControlTranslation\"] !== undefined) {\n        contents.AccessControlTranslation = deserializeAws_restXmlAccessControlTranslation(output[\"AccessControlTranslation\"], context);\n    }\n    if (output[\"EncryptionConfiguration\"] !== undefined) {\n        contents.EncryptionConfiguration = deserializeAws_restXmlEncryptionConfiguration(output[\"EncryptionConfiguration\"], context);\n    }\n    if (output[\"ReplicationTime\"] !== undefined) {\n        contents.ReplicationTime = deserializeAws_restXmlReplicationTime(output[\"ReplicationTime\"], context);\n    }\n    if (output[\"Metrics\"] !== undefined) {\n        contents.Metrics = deserializeAws_restXmlMetrics(output[\"Metrics\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlEncryptionConfiguration = (output, context) => {\n    const contents = {\n        ReplicaKmsKeyID: undefined,\n    };\n    if (output[\"ReplicaKmsKeyID\"] !== undefined) {\n        contents.ReplicaKmsKeyID = __expectString(output[\"ReplicaKmsKeyID\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlEndEvent = (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst deserializeAws_restXml_Error = (output, context) => {\n    const contents = {\n        Key: undefined,\n        VersionId: undefined,\n        Code: undefined,\n        Message: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = __expectString(output[\"VersionId\"]);\n    }\n    if (output[\"Code\"] !== undefined) {\n        contents.Code = __expectString(output[\"Code\"]);\n    }\n    if (output[\"Message\"] !== undefined) {\n        contents.Message = __expectString(output[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlErrorDocument = (output, context) => {\n    const contents = {\n        Key: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlErrors = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXml_Error(entry, context);\n    });\n};\nconst deserializeAws_restXmlEventBridgeConfiguration = (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst deserializeAws_restXmlEventList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return __expectString(entry);\n    });\n};\nconst deserializeAws_restXmlExistingObjectReplication = (output, context) => {\n    const contents = {\n        Status: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlExposeHeaders = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return __expectString(entry);\n    });\n};\nconst deserializeAws_restXmlFilterRule = (output, context) => {\n    const contents = {\n        Name: undefined,\n        Value: undefined,\n    };\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = __expectString(output[\"Name\"]);\n    }\n    if (output[\"Value\"] !== undefined) {\n        contents.Value = __expectString(output[\"Value\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFilterRuleList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlFilterRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlGetObjectAttributesParts = (output, context) => {\n    const contents = {\n        TotalPartsCount: undefined,\n        PartNumberMarker: undefined,\n        NextPartNumberMarker: undefined,\n        MaxParts: undefined,\n        IsTruncated: undefined,\n        Parts: undefined,\n    };\n    if (output[\"PartsCount\"] !== undefined) {\n        contents.TotalPartsCount = __strictParseInt32(output[\"PartsCount\"]);\n    }\n    if (output[\"PartNumberMarker\"] !== undefined) {\n        contents.PartNumberMarker = __expectString(output[\"PartNumberMarker\"]);\n    }\n    if (output[\"NextPartNumberMarker\"] !== undefined) {\n        contents.NextPartNumberMarker = __expectString(output[\"NextPartNumberMarker\"]);\n    }\n    if (output[\"MaxParts\"] !== undefined) {\n        contents.MaxParts = __strictParseInt32(output[\"MaxParts\"]);\n    }\n    if (output[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(output[\"IsTruncated\"]);\n    }\n    if (output.Part === \"\") {\n        contents.Parts = [];\n    }\n    else if (output[\"Part\"] !== undefined) {\n        contents.Parts = deserializeAws_restXmlPartsList(__getArrayIfSingleItem(output[\"Part\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGrant = (output, context) => {\n    const contents = {\n        Grantee: undefined,\n        Permission: undefined,\n    };\n    if (output[\"Grantee\"] !== undefined) {\n        contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n    }\n    if (output[\"Permission\"] !== undefined) {\n        contents.Permission = __expectString(output[\"Permission\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGrantee = (output, context) => {\n    const contents = {\n        DisplayName: undefined,\n        EmailAddress: undefined,\n        ID: undefined,\n        URI: undefined,\n        Type: undefined,\n    };\n    if (output[\"DisplayName\"] !== undefined) {\n        contents.DisplayName = __expectString(output[\"DisplayName\"]);\n    }\n    if (output[\"EmailAddress\"] !== undefined) {\n        contents.EmailAddress = __expectString(output[\"EmailAddress\"]);\n    }\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = __expectString(output[\"ID\"]);\n    }\n    if (output[\"URI\"] !== undefined) {\n        contents.URI = __expectString(output[\"URI\"]);\n    }\n    if (output[\"xsi:type\"] !== undefined) {\n        contents.Type = __expectString(output[\"xsi:type\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGrants = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlGrant(entry, context);\n    });\n};\nconst deserializeAws_restXmlIndexDocument = (output, context) => {\n    const contents = {\n        Suffix: undefined,\n    };\n    if (output[\"Suffix\"] !== undefined) {\n        contents.Suffix = __expectString(output[\"Suffix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInitiator = (output, context) => {\n    const contents = {\n        ID: undefined,\n        DisplayName: undefined,\n    };\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = __expectString(output[\"ID\"]);\n    }\n    if (output[\"DisplayName\"] !== undefined) {\n        contents.DisplayName = __expectString(output[\"DisplayName\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlIntelligentTieringAndOperator = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tags: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    else if (output[\"Tag\"] !== undefined) {\n        contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlIntelligentTieringConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        Filter: undefined,\n        Status: undefined,\n        Tierings: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = __expectString(output[\"Id\"]);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlIntelligentTieringFilter(output[\"Filter\"], context);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    if (output.Tiering === \"\") {\n        contents.Tierings = [];\n    }\n    else if (output[\"Tiering\"] !== undefined) {\n        contents.Tierings = deserializeAws_restXmlTieringList(__getArrayIfSingleItem(output[\"Tiering\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlIntelligentTieringConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlIntelligentTieringConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlIntelligentTieringFilter = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tag: undefined,\n        And: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output[\"Tag\"] !== undefined) {\n        contents.Tag = deserializeAws_restXmlTag(output[\"Tag\"], context);\n    }\n    if (output[\"And\"] !== undefined) {\n        contents.And = deserializeAws_restXmlIntelligentTieringAndOperator(output[\"And\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventoryConfiguration = (output, context) => {\n    const contents = {\n        Destination: undefined,\n        IsEnabled: undefined,\n        Filter: undefined,\n        Id: undefined,\n        IncludedObjectVersions: undefined,\n        OptionalFields: undefined,\n        Schedule: undefined,\n    };\n    if (output[\"Destination\"] !== undefined) {\n        contents.Destination = deserializeAws_restXmlInventoryDestination(output[\"Destination\"], context);\n    }\n    if (output[\"IsEnabled\"] !== undefined) {\n        contents.IsEnabled = __parseBoolean(output[\"IsEnabled\"]);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlInventoryFilter(output[\"Filter\"], context);\n    }\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = __expectString(output[\"Id\"]);\n    }\n    if (output[\"IncludedObjectVersions\"] !== undefined) {\n        contents.IncludedObjectVersions = __expectString(output[\"IncludedObjectVersions\"]);\n    }\n    if (output.OptionalFields === \"\") {\n        contents.OptionalFields = [];\n    }\n    else if (output[\"OptionalFields\"] !== undefined && output[\"OptionalFields\"][\"Field\"] !== undefined) {\n        contents.OptionalFields = deserializeAws_restXmlInventoryOptionalFields(__getArrayIfSingleItem(output[\"OptionalFields\"][\"Field\"]), context);\n    }\n    if (output[\"Schedule\"] !== undefined) {\n        contents.Schedule = deserializeAws_restXmlInventorySchedule(output[\"Schedule\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventoryConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlInventoryConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlInventoryDestination = (output, context) => {\n    const contents = {\n        S3BucketDestination: undefined,\n    };\n    if (output[\"S3BucketDestination\"] !== undefined) {\n        contents.S3BucketDestination = deserializeAws_restXmlInventoryS3BucketDestination(output[\"S3BucketDestination\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventoryEncryption = (output, context) => {\n    const contents = {\n        SSES3: undefined,\n        SSEKMS: undefined,\n    };\n    if (output[\"SSE-S3\"] !== undefined) {\n        contents.SSES3 = deserializeAws_restXmlSSES3(output[\"SSE-S3\"], context);\n    }\n    if (output[\"SSE-KMS\"] !== undefined) {\n        contents.SSEKMS = deserializeAws_restXmlSSEKMS(output[\"SSE-KMS\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventoryFilter = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventoryOptionalFields = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return __expectString(entry);\n    });\n};\nconst deserializeAws_restXmlInventoryS3BucketDestination = (output, context) => {\n    const contents = {\n        AccountId: undefined,\n        Bucket: undefined,\n        Format: undefined,\n        Prefix: undefined,\n        Encryption: undefined,\n    };\n    if (output[\"AccountId\"] !== undefined) {\n        contents.AccountId = __expectString(output[\"AccountId\"]);\n    }\n    if (output[\"Bucket\"] !== undefined) {\n        contents.Bucket = __expectString(output[\"Bucket\"]);\n    }\n    if (output[\"Format\"] !== undefined) {\n        contents.Format = __expectString(output[\"Format\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output[\"Encryption\"] !== undefined) {\n        contents.Encryption = deserializeAws_restXmlInventoryEncryption(output[\"Encryption\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventorySchedule = (output, context) => {\n    const contents = {\n        Frequency: undefined,\n    };\n    if (output[\"Frequency\"] !== undefined) {\n        contents.Frequency = __expectString(output[\"Frequency\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLambdaFunctionConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        LambdaFunctionArn: undefined,\n        Events: undefined,\n        Filter: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = __expectString(output[\"Id\"]);\n    }\n    if (output[\"CloudFunction\"] !== undefined) {\n        contents.LambdaFunctionArn = __expectString(output[\"CloudFunction\"]);\n    }\n    if (output.Event === \"\") {\n        contents.Events = [];\n    }\n    else if (output[\"Event\"] !== undefined) {\n        contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLambdaFunctionConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlLifecycleExpiration = (output, context) => {\n    const contents = {\n        Date: undefined,\n        Days: undefined,\n        ExpiredObjectDeleteMarker: undefined,\n    };\n    if (output[\"Date\"] !== undefined) {\n        contents.Date = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Date\"]));\n    }\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = __strictParseInt32(output[\"Days\"]);\n    }\n    if (output[\"ExpiredObjectDeleteMarker\"] !== undefined) {\n        contents.ExpiredObjectDeleteMarker = __parseBoolean(output[\"ExpiredObjectDeleteMarker\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLifecycleRule = (output, context) => {\n    const contents = {\n        Expiration: undefined,\n        ID: undefined,\n        Prefix: undefined,\n        Filter: undefined,\n        Status: undefined,\n        Transitions: undefined,\n        NoncurrentVersionTransitions: undefined,\n        NoncurrentVersionExpiration: undefined,\n        AbortIncompleteMultipartUpload: undefined,\n    };\n    if (output[\"Expiration\"] !== undefined) {\n        contents.Expiration = deserializeAws_restXmlLifecycleExpiration(output[\"Expiration\"], context);\n    }\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = __expectString(output[\"ID\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output.Filter === \"\") {\n    }\n    else if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlLifecycleRuleFilter(__expectUnion(output[\"Filter\"]), context);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    if (output.Transition === \"\") {\n        contents.Transitions = [];\n    }\n    else if (output[\"Transition\"] !== undefined) {\n        contents.Transitions = deserializeAws_restXmlTransitionList(__getArrayIfSingleItem(output[\"Transition\"]), context);\n    }\n    if (output.NoncurrentVersionTransition === \"\") {\n        contents.NoncurrentVersionTransitions = [];\n    }\n    else if (output[\"NoncurrentVersionTransition\"] !== undefined) {\n        contents.NoncurrentVersionTransitions = deserializeAws_restXmlNoncurrentVersionTransitionList(__getArrayIfSingleItem(output[\"NoncurrentVersionTransition\"]), context);\n    }\n    if (output[\"NoncurrentVersionExpiration\"] !== undefined) {\n        contents.NoncurrentVersionExpiration = deserializeAws_restXmlNoncurrentVersionExpiration(output[\"NoncurrentVersionExpiration\"], context);\n    }\n    if (output[\"AbortIncompleteMultipartUpload\"] !== undefined) {\n        contents.AbortIncompleteMultipartUpload = deserializeAws_restXmlAbortIncompleteMultipartUpload(output[\"AbortIncompleteMultipartUpload\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLifecycleRuleAndOperator = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tags: undefined,\n        ObjectSizeGreaterThan: undefined,\n        ObjectSizeLessThan: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    else if (output[\"Tag\"] !== undefined) {\n        contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n    }\n    if (output[\"ObjectSizeGreaterThan\"] !== undefined) {\n        contents.ObjectSizeGreaterThan = __strictParseLong(output[\"ObjectSizeGreaterThan\"]);\n    }\n    if (output[\"ObjectSizeLessThan\"] !== undefined) {\n        contents.ObjectSizeLessThan = __strictParseLong(output[\"ObjectSizeLessThan\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLifecycleRuleFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: __expectString(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"ObjectSizeGreaterThan\"] !== undefined) {\n        return {\n            ObjectSizeGreaterThan: __strictParseLong(output[\"ObjectSizeGreaterThan\"]),\n        };\n    }\n    if (output[\"ObjectSizeLessThan\"] !== undefined) {\n        return {\n            ObjectSizeLessThan: __strictParseLong(output[\"ObjectSizeLessThan\"]),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: deserializeAws_restXmlLifecycleRuleAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst deserializeAws_restXmlLifecycleRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlLifecycleRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlLoggingEnabled = (output, context) => {\n    const contents = {\n        TargetBucket: undefined,\n        TargetGrants: undefined,\n        TargetPrefix: undefined,\n    };\n    if (output[\"TargetBucket\"] !== undefined) {\n        contents.TargetBucket = __expectString(output[\"TargetBucket\"]);\n    }\n    if (output.TargetGrants === \"\") {\n        contents.TargetGrants = [];\n    }\n    else if (output[\"TargetGrants\"] !== undefined && output[\"TargetGrants\"][\"Grant\"] !== undefined) {\n        contents.TargetGrants = deserializeAws_restXmlTargetGrants(__getArrayIfSingleItem(output[\"TargetGrants\"][\"Grant\"]), context);\n    }\n    if (output[\"TargetPrefix\"] !== undefined) {\n        contents.TargetPrefix = __expectString(output[\"TargetPrefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMetrics = (output, context) => {\n    const contents = {\n        Status: undefined,\n        EventThreshold: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    if (output[\"EventThreshold\"] !== undefined) {\n        contents.EventThreshold = deserializeAws_restXmlReplicationTimeValue(output[\"EventThreshold\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMetricsAndOperator = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tags: undefined,\n        AccessPointArn: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    else if (output[\"Tag\"] !== undefined) {\n        contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n    }\n    if (output[\"AccessPointArn\"] !== undefined) {\n        contents.AccessPointArn = __expectString(output[\"AccessPointArn\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMetricsConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        Filter: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = __expectString(output[\"Id\"]);\n    }\n    if (output.Filter === \"\") {\n    }\n    else if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlMetricsFilter(__expectUnion(output[\"Filter\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMetricsConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlMetricsConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlMetricsFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: __expectString(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"AccessPointArn\"] !== undefined) {\n        return {\n            AccessPointArn: __expectString(output[\"AccessPointArn\"]),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: deserializeAws_restXmlMetricsAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst deserializeAws_restXmlMultipartUpload = (output, context) => {\n    const contents = {\n        UploadId: undefined,\n        Key: undefined,\n        Initiated: undefined,\n        StorageClass: undefined,\n        Owner: undefined,\n        Initiator: undefined,\n        ChecksumAlgorithm: undefined,\n    };\n    if (output[\"UploadId\"] !== undefined) {\n        contents.UploadId = __expectString(output[\"UploadId\"]);\n    }\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    if (output[\"Initiated\"] !== undefined) {\n        contents.Initiated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Initiated\"]));\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(output[\"StorageClass\"]);\n    }\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n    }\n    if (output[\"Initiator\"] !== undefined) {\n        contents.Initiator = deserializeAws_restXmlInitiator(output[\"Initiator\"], context);\n    }\n    if (output[\"ChecksumAlgorithm\"] !== undefined) {\n        contents.ChecksumAlgorithm = __expectString(output[\"ChecksumAlgorithm\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMultipartUploadList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlMultipartUpload(entry, context);\n    });\n};\nconst deserializeAws_restXmlNoncurrentVersionExpiration = (output, context) => {\n    const contents = {\n        NoncurrentDays: undefined,\n        NewerNoncurrentVersions: undefined,\n    };\n    if (output[\"NoncurrentDays\"] !== undefined) {\n        contents.NoncurrentDays = __strictParseInt32(output[\"NoncurrentDays\"]);\n    }\n    if (output[\"NewerNoncurrentVersions\"] !== undefined) {\n        contents.NewerNoncurrentVersions = __strictParseInt32(output[\"NewerNoncurrentVersions\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoncurrentVersionTransition = (output, context) => {\n    const contents = {\n        NoncurrentDays: undefined,\n        StorageClass: undefined,\n        NewerNoncurrentVersions: undefined,\n    };\n    if (output[\"NoncurrentDays\"] !== undefined) {\n        contents.NoncurrentDays = __strictParseInt32(output[\"NoncurrentDays\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(output[\"StorageClass\"]);\n    }\n    if (output[\"NewerNoncurrentVersions\"] !== undefined) {\n        contents.NewerNoncurrentVersions = __strictParseInt32(output[\"NewerNoncurrentVersions\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoncurrentVersionTransitionList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlNoncurrentVersionTransition(entry, context);\n    });\n};\nconst deserializeAws_restXmlNotificationConfigurationFilter = (output, context) => {\n    const contents = {\n        Key: undefined,\n    };\n    if (output[\"S3Key\"] !== undefined) {\n        contents.Key = deserializeAws_restXmlS3KeyFilter(output[\"S3Key\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXml_Object = (output, context) => {\n    const contents = {\n        Key: undefined,\n        LastModified: undefined,\n        ETag: undefined,\n        ChecksumAlgorithm: undefined,\n        Size: undefined,\n        StorageClass: undefined,\n        Owner: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n    }\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = __expectString(output[\"ETag\"]);\n    }\n    if (output.ChecksumAlgorithm === \"\") {\n        contents.ChecksumAlgorithm = [];\n    }\n    else if (output[\"ChecksumAlgorithm\"] !== undefined) {\n        contents.ChecksumAlgorithm = deserializeAws_restXmlChecksumAlgorithmList(__getArrayIfSingleItem(output[\"ChecksumAlgorithm\"]), context);\n    }\n    if (output[\"Size\"] !== undefined) {\n        contents.Size = __strictParseLong(output[\"Size\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(output[\"StorageClass\"]);\n    }\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXml_Object(entry, context);\n    });\n};\nconst deserializeAws_restXmlObjectLockConfiguration = (output, context) => {\n    const contents = {\n        ObjectLockEnabled: undefined,\n        Rule: undefined,\n    };\n    if (output[\"ObjectLockEnabled\"] !== undefined) {\n        contents.ObjectLockEnabled = __expectString(output[\"ObjectLockEnabled\"]);\n    }\n    if (output[\"Rule\"] !== undefined) {\n        contents.Rule = deserializeAws_restXmlObjectLockRule(output[\"Rule\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectLockLegalHold = (output, context) => {\n    const contents = {\n        Status: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectLockRetention = (output, context) => {\n    const contents = {\n        Mode: undefined,\n        RetainUntilDate: undefined,\n    };\n    if (output[\"Mode\"] !== undefined) {\n        contents.Mode = __expectString(output[\"Mode\"]);\n    }\n    if (output[\"RetainUntilDate\"] !== undefined) {\n        contents.RetainUntilDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"RetainUntilDate\"]));\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectLockRule = (output, context) => {\n    const contents = {\n        DefaultRetention: undefined,\n    };\n    if (output[\"DefaultRetention\"] !== undefined) {\n        contents.DefaultRetention = deserializeAws_restXmlDefaultRetention(output[\"DefaultRetention\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectPart = (output, context) => {\n    const contents = {\n        PartNumber: undefined,\n        Size: undefined,\n        ChecksumCRC32: undefined,\n        ChecksumCRC32C: undefined,\n        ChecksumSHA1: undefined,\n        ChecksumSHA256: undefined,\n    };\n    if (output[\"PartNumber\"] !== undefined) {\n        contents.PartNumber = __strictParseInt32(output[\"PartNumber\"]);\n    }\n    if (output[\"Size\"] !== undefined) {\n        contents.Size = __strictParseLong(output[\"Size\"]);\n    }\n    if (output[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n    }\n    if (output[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n    }\n    if (output[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n    }\n    if (output[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectVersion = (output, context) => {\n    const contents = {\n        ETag: undefined,\n        ChecksumAlgorithm: undefined,\n        Size: undefined,\n        StorageClass: undefined,\n        Key: undefined,\n        VersionId: undefined,\n        IsLatest: undefined,\n        LastModified: undefined,\n        Owner: undefined,\n    };\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = __expectString(output[\"ETag\"]);\n    }\n    if (output.ChecksumAlgorithm === \"\") {\n        contents.ChecksumAlgorithm = [];\n    }\n    else if (output[\"ChecksumAlgorithm\"] !== undefined) {\n        contents.ChecksumAlgorithm = deserializeAws_restXmlChecksumAlgorithmList(__getArrayIfSingleItem(output[\"ChecksumAlgorithm\"]), context);\n    }\n    if (output[\"Size\"] !== undefined) {\n        contents.Size = __strictParseLong(output[\"Size\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(output[\"StorageClass\"]);\n    }\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = __expectString(output[\"VersionId\"]);\n    }\n    if (output[\"IsLatest\"] !== undefined) {\n        contents.IsLatest = __parseBoolean(output[\"IsLatest\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n    }\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectVersionList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlObjectVersion(entry, context);\n    });\n};\nconst deserializeAws_restXmlOwner = (output, context) => {\n    const contents = {\n        DisplayName: undefined,\n        ID: undefined,\n    };\n    if (output[\"DisplayName\"] !== undefined) {\n        contents.DisplayName = __expectString(output[\"DisplayName\"]);\n    }\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = __expectString(output[\"ID\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOwnershipControls = (output, context) => {\n    const contents = {\n        Rules: undefined,\n    };\n    if (output.Rule === \"\") {\n        contents.Rules = [];\n    }\n    else if (output[\"Rule\"] !== undefined) {\n        contents.Rules = deserializeAws_restXmlOwnershipControlsRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOwnershipControlsRule = (output, context) => {\n    const contents = {\n        ObjectOwnership: undefined,\n    };\n    if (output[\"ObjectOwnership\"] !== undefined) {\n        contents.ObjectOwnership = __expectString(output[\"ObjectOwnership\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOwnershipControlsRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlOwnershipControlsRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlPart = (output, context) => {\n    const contents = {\n        PartNumber: undefined,\n        LastModified: undefined,\n        ETag: undefined,\n        Size: undefined,\n        ChecksumCRC32: undefined,\n        ChecksumCRC32C: undefined,\n        ChecksumSHA1: undefined,\n        ChecksumSHA256: undefined,\n    };\n    if (output[\"PartNumber\"] !== undefined) {\n        contents.PartNumber = __strictParseInt32(output[\"PartNumber\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n    }\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = __expectString(output[\"ETag\"]);\n    }\n    if (output[\"Size\"] !== undefined) {\n        contents.Size = __strictParseLong(output[\"Size\"]);\n    }\n    if (output[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n    }\n    if (output[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n    }\n    if (output[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n    }\n    if (output[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlParts = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlPart(entry, context);\n    });\n};\nconst deserializeAws_restXmlPartsList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlObjectPart(entry, context);\n    });\n};\nconst deserializeAws_restXmlPolicyStatus = (output, context) => {\n    const contents = {\n        IsPublic: undefined,\n    };\n    if (output[\"IsPublic\"] !== undefined) {\n        contents.IsPublic = __parseBoolean(output[\"IsPublic\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlProgress = (output, context) => {\n    const contents = {\n        BytesScanned: undefined,\n        BytesProcessed: undefined,\n        BytesReturned: undefined,\n    };\n    if (output[\"BytesScanned\"] !== undefined) {\n        contents.BytesScanned = __strictParseLong(output[\"BytesScanned\"]);\n    }\n    if (output[\"BytesProcessed\"] !== undefined) {\n        contents.BytesProcessed = __strictParseLong(output[\"BytesProcessed\"]);\n    }\n    if (output[\"BytesReturned\"] !== undefined) {\n        contents.BytesReturned = __strictParseLong(output[\"BytesReturned\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlPublicAccessBlockConfiguration = (output, context) => {\n    const contents = {\n        BlockPublicAcls: undefined,\n        IgnorePublicAcls: undefined,\n        BlockPublicPolicy: undefined,\n        RestrictPublicBuckets: undefined,\n    };\n    if (output[\"BlockPublicAcls\"] !== undefined) {\n        contents.BlockPublicAcls = __parseBoolean(output[\"BlockPublicAcls\"]);\n    }\n    if (output[\"IgnorePublicAcls\"] !== undefined) {\n        contents.IgnorePublicAcls = __parseBoolean(output[\"IgnorePublicAcls\"]);\n    }\n    if (output[\"BlockPublicPolicy\"] !== undefined) {\n        contents.BlockPublicPolicy = __parseBoolean(output[\"BlockPublicPolicy\"]);\n    }\n    if (output[\"RestrictPublicBuckets\"] !== undefined) {\n        contents.RestrictPublicBuckets = __parseBoolean(output[\"RestrictPublicBuckets\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlQueueConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        QueueArn: undefined,\n        Events: undefined,\n        Filter: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = __expectString(output[\"Id\"]);\n    }\n    if (output[\"Queue\"] !== undefined) {\n        contents.QueueArn = __expectString(output[\"Queue\"]);\n    }\n    if (output.Event === \"\") {\n        contents.Events = [];\n    }\n    else if (output[\"Event\"] !== undefined) {\n        contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlQueueConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlQueueConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlRedirect = (output, context) => {\n    const contents = {\n        HostName: undefined,\n        HttpRedirectCode: undefined,\n        Protocol: undefined,\n        ReplaceKeyPrefixWith: undefined,\n        ReplaceKeyWith: undefined,\n    };\n    if (output[\"HostName\"] !== undefined) {\n        contents.HostName = __expectString(output[\"HostName\"]);\n    }\n    if (output[\"HttpRedirectCode\"] !== undefined) {\n        contents.HttpRedirectCode = __expectString(output[\"HttpRedirectCode\"]);\n    }\n    if (output[\"Protocol\"] !== undefined) {\n        contents.Protocol = __expectString(output[\"Protocol\"]);\n    }\n    if (output[\"ReplaceKeyPrefixWith\"] !== undefined) {\n        contents.ReplaceKeyPrefixWith = __expectString(output[\"ReplaceKeyPrefixWith\"]);\n    }\n    if (output[\"ReplaceKeyWith\"] !== undefined) {\n        contents.ReplaceKeyWith = __expectString(output[\"ReplaceKeyWith\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRedirectAllRequestsTo = (output, context) => {\n    const contents = {\n        HostName: undefined,\n        Protocol: undefined,\n    };\n    if (output[\"HostName\"] !== undefined) {\n        contents.HostName = __expectString(output[\"HostName\"]);\n    }\n    if (output[\"Protocol\"] !== undefined) {\n        contents.Protocol = __expectString(output[\"Protocol\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicaModifications = (output, context) => {\n    const contents = {\n        Status: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicationConfiguration = (output, context) => {\n    const contents = {\n        Role: undefined,\n        Rules: undefined,\n    };\n    if (output[\"Role\"] !== undefined) {\n        contents.Role = __expectString(output[\"Role\"]);\n    }\n    if (output.Rule === \"\") {\n        contents.Rules = [];\n    }\n    else if (output[\"Rule\"] !== undefined) {\n        contents.Rules = deserializeAws_restXmlReplicationRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicationRule = (output, context) => {\n    const contents = {\n        ID: undefined,\n        Priority: undefined,\n        Prefix: undefined,\n        Filter: undefined,\n        Status: undefined,\n        SourceSelectionCriteria: undefined,\n        ExistingObjectReplication: undefined,\n        Destination: undefined,\n        DeleteMarkerReplication: undefined,\n    };\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = __expectString(output[\"ID\"]);\n    }\n    if (output[\"Priority\"] !== undefined) {\n        contents.Priority = __strictParseInt32(output[\"Priority\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output.Filter === \"\") {\n    }\n    else if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlReplicationRuleFilter(__expectUnion(output[\"Filter\"]), context);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    if (output[\"SourceSelectionCriteria\"] !== undefined) {\n        contents.SourceSelectionCriteria = deserializeAws_restXmlSourceSelectionCriteria(output[\"SourceSelectionCriteria\"], context);\n    }\n    if (output[\"ExistingObjectReplication\"] !== undefined) {\n        contents.ExistingObjectReplication = deserializeAws_restXmlExistingObjectReplication(output[\"ExistingObjectReplication\"], context);\n    }\n    if (output[\"Destination\"] !== undefined) {\n        contents.Destination = deserializeAws_restXmlDestination(output[\"Destination\"], context);\n    }\n    if (output[\"DeleteMarkerReplication\"] !== undefined) {\n        contents.DeleteMarkerReplication = deserializeAws_restXmlDeleteMarkerReplication(output[\"DeleteMarkerReplication\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicationRuleAndOperator = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tags: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    else if (output[\"Tag\"] !== undefined) {\n        contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicationRuleFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: __expectString(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: deserializeAws_restXmlReplicationRuleAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst deserializeAws_restXmlReplicationRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlReplicationRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlReplicationTime = (output, context) => {\n    const contents = {\n        Status: undefined,\n        Time: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    if (output[\"Time\"] !== undefined) {\n        contents.Time = deserializeAws_restXmlReplicationTimeValue(output[\"Time\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicationTimeValue = (output, context) => {\n    const contents = {\n        Minutes: undefined,\n    };\n    if (output[\"Minutes\"] !== undefined) {\n        contents.Minutes = __strictParseInt32(output[\"Minutes\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRoutingRule = (output, context) => {\n    const contents = {\n        Condition: undefined,\n        Redirect: undefined,\n    };\n    if (output[\"Condition\"] !== undefined) {\n        contents.Condition = deserializeAws_restXmlCondition(output[\"Condition\"], context);\n    }\n    if (output[\"Redirect\"] !== undefined) {\n        contents.Redirect = deserializeAws_restXmlRedirect(output[\"Redirect\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRoutingRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlRoutingRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlS3KeyFilter = (output, context) => {\n    const contents = {\n        FilterRules: undefined,\n    };\n    if (output.FilterRule === \"\") {\n        contents.FilterRules = [];\n    }\n    else if (output[\"FilterRule\"] !== undefined) {\n        contents.FilterRules = deserializeAws_restXmlFilterRuleList(__getArrayIfSingleItem(output[\"FilterRule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlServerSideEncryptionByDefault = (output, context) => {\n    const contents = {\n        SSEAlgorithm: undefined,\n        KMSMasterKeyID: undefined,\n    };\n    if (output[\"SSEAlgorithm\"] !== undefined) {\n        contents.SSEAlgorithm = __expectString(output[\"SSEAlgorithm\"]);\n    }\n    if (output[\"KMSMasterKeyID\"] !== undefined) {\n        contents.KMSMasterKeyID = __expectString(output[\"KMSMasterKeyID\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlServerSideEncryptionConfiguration = (output, context) => {\n    const contents = {\n        Rules: undefined,\n    };\n    if (output.Rule === \"\") {\n        contents.Rules = [];\n    }\n    else if (output[\"Rule\"] !== undefined) {\n        contents.Rules = deserializeAws_restXmlServerSideEncryptionRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlServerSideEncryptionRule = (output, context) => {\n    const contents = {\n        ApplyServerSideEncryptionByDefault: undefined,\n        BucketKeyEnabled: undefined,\n    };\n    if (output[\"ApplyServerSideEncryptionByDefault\"] !== undefined) {\n        contents.ApplyServerSideEncryptionByDefault = deserializeAws_restXmlServerSideEncryptionByDefault(output[\"ApplyServerSideEncryptionByDefault\"], context);\n    }\n    if (output[\"BucketKeyEnabled\"] !== undefined) {\n        contents.BucketKeyEnabled = __parseBoolean(output[\"BucketKeyEnabled\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlServerSideEncryptionRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlServerSideEncryptionRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlSourceSelectionCriteria = (output, context) => {\n    const contents = {\n        SseKmsEncryptedObjects: undefined,\n        ReplicaModifications: undefined,\n    };\n    if (output[\"SseKmsEncryptedObjects\"] !== undefined) {\n        contents.SseKmsEncryptedObjects = deserializeAws_restXmlSseKmsEncryptedObjects(output[\"SseKmsEncryptedObjects\"], context);\n    }\n    if (output[\"ReplicaModifications\"] !== undefined) {\n        contents.ReplicaModifications = deserializeAws_restXmlReplicaModifications(output[\"ReplicaModifications\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlSSEKMS = (output, context) => {\n    const contents = {\n        KeyId: undefined,\n    };\n    if (output[\"KeyId\"] !== undefined) {\n        contents.KeyId = __expectString(output[\"KeyId\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlSseKmsEncryptedObjects = (output, context) => {\n    const contents = {\n        Status: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlSSES3 = (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst deserializeAws_restXmlStats = (output, context) => {\n    const contents = {\n        BytesScanned: undefined,\n        BytesProcessed: undefined,\n        BytesReturned: undefined,\n    };\n    if (output[\"BytesScanned\"] !== undefined) {\n        contents.BytesScanned = __strictParseLong(output[\"BytesScanned\"]);\n    }\n    if (output[\"BytesProcessed\"] !== undefined) {\n        contents.BytesProcessed = __strictParseLong(output[\"BytesProcessed\"]);\n    }\n    if (output[\"BytesReturned\"] !== undefined) {\n        contents.BytesReturned = __strictParseLong(output[\"BytesReturned\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlStorageClassAnalysis = (output, context) => {\n    const contents = {\n        DataExport: undefined,\n    };\n    if (output[\"DataExport\"] !== undefined) {\n        contents.DataExport = deserializeAws_restXmlStorageClassAnalysisDataExport(output[\"DataExport\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlStorageClassAnalysisDataExport = (output, context) => {\n    const contents = {\n        OutputSchemaVersion: undefined,\n        Destination: undefined,\n    };\n    if (output[\"OutputSchemaVersion\"] !== undefined) {\n        contents.OutputSchemaVersion = __expectString(output[\"OutputSchemaVersion\"]);\n    }\n    if (output[\"Destination\"] !== undefined) {\n        contents.Destination = deserializeAws_restXmlAnalyticsExportDestination(output[\"Destination\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTag = (output, context) => {\n    const contents = {\n        Key: undefined,\n        Value: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    if (output[\"Value\"] !== undefined) {\n        contents.Value = __expectString(output[\"Value\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTagSet = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlTag(entry, context);\n    });\n};\nconst deserializeAws_restXmlTargetGrant = (output, context) => {\n    const contents = {\n        Grantee: undefined,\n        Permission: undefined,\n    };\n    if (output[\"Grantee\"] !== undefined) {\n        contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n    }\n    if (output[\"Permission\"] !== undefined) {\n        contents.Permission = __expectString(output[\"Permission\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTargetGrants = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlTargetGrant(entry, context);\n    });\n};\nconst deserializeAws_restXmlTiering = (output, context) => {\n    const contents = {\n        Days: undefined,\n        AccessTier: undefined,\n    };\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = __strictParseInt32(output[\"Days\"]);\n    }\n    if (output[\"AccessTier\"] !== undefined) {\n        contents.AccessTier = __expectString(output[\"AccessTier\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTieringList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlTiering(entry, context);\n    });\n};\nconst deserializeAws_restXmlTopicConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        TopicArn: undefined,\n        Events: undefined,\n        Filter: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = __expectString(output[\"Id\"]);\n    }\n    if (output[\"Topic\"] !== undefined) {\n        contents.TopicArn = __expectString(output[\"Topic\"]);\n    }\n    if (output.Event === \"\") {\n        contents.Events = [];\n    }\n    else if (output[\"Event\"] !== undefined) {\n        contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTopicConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlTopicConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlTransition = (output, context) => {\n    const contents = {\n        Date: undefined,\n        Days: undefined,\n        StorageClass: undefined,\n    };\n    if (output[\"Date\"] !== undefined) {\n        contents.Date = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Date\"]));\n    }\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = __strictParseInt32(output[\"Days\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(output[\"StorageClass\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTransitionList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlTransition(entry, context);\n    });\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst isSerializableHeaderValue = (value) => value !== undefined &&\n    value !== null &&\n    value !== \"\" &&\n    (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n    (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        const parser = new XMLParser({\n            attributeNamePrefix: \"\",\n            htmlEntities: true,\n            ignoreAttributes: false,\n            ignoreDeclaration: true,\n            parseTagValue: false,\n            trimValues: false,\n            tagValueProcessor: (_, val) => (val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : undefined),\n        });\n        parser.addEntity(\"#xD\", \"\\r\");\n        parser.addEntity(\"#10\", \"\\n\");\n        const parsedObj = parser.parse(encoded);\n        const textNodeName = \"#text\";\n        const key = Object.keys(parsedObj)[0];\n        const parsedObjToReturn = parsedObj[key];\n        if (parsedObjToReturn[textNodeName]) {\n            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n            delete parsedObjToReturn[textNodeName];\n        }\n        return __getValueFromTextNode(parsedObjToReturn);\n    }\n    return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n    const value = await parseBody(errorBody, context);\n    if (value.Error) {\n        value.Error.message = value.Error.message ?? value.Error.Message;\n    }\n    return value;\n};\nconst loadRestXmlErrorCode = (output, data) => {\n    if (data?.Code !== undefined) {\n        return data.Code;\n    }\n    if (output.statusCode == 404) {\n        return \"NotFound\";\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}