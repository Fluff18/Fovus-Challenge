{"ast":null,"code":"// Generated by CoffeeScript 1.9.1\n(function () {\n  var XMLStringifier,\n    bind = function (fn, me) {\n      return function () {\n        return fn.apply(me, arguments);\n      };\n    },\n    hasProp = {}.hasOwnProperty;\n  module.exports = XMLStringifier = function () {\n    function XMLStringifier(options) {\n      this.assertLegalChar = bind(this.assertLegalChar, this);\n      var key, ref, value;\n      this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;\n      this.noDoubleEncoding = options != null ? options.noDoubleEncoding : void 0;\n      ref = (options != null ? options.stringify : void 0) || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[key] = value;\n      }\n    }\n    XMLStringifier.prototype.eleName = function (val) {\n      val = '' + val || '';\n      return this.assertLegalChar(val);\n    };\n    XMLStringifier.prototype.eleText = function (val) {\n      val = '' + val || '';\n      return this.assertLegalChar(this.elEscape(val));\n    };\n    XMLStringifier.prototype.cdata = function (val) {\n      val = '' + val || '';\n      if (val.match(/]]>/)) {\n        throw new Error(\"Invalid CDATA text: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n    XMLStringifier.prototype.comment = function (val) {\n      val = '' + val || '';\n      if (val.match(/--/)) {\n        throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n    XMLStringifier.prototype.raw = function (val) {\n      return '' + val || '';\n    };\n    XMLStringifier.prototype.attName = function (val) {\n      return '' + val || '';\n    };\n    XMLStringifier.prototype.attValue = function (val) {\n      val = '' + val || '';\n      return this.attEscape(val);\n    };\n    XMLStringifier.prototype.insTarget = function (val) {\n      return '' + val || '';\n    };\n    XMLStringifier.prototype.insValue = function (val) {\n      val = '' + val || '';\n      if (val.match(/\\?>/)) {\n        throw new Error(\"Invalid processing instruction value: \" + val);\n      }\n      return val;\n    };\n    XMLStringifier.prototype.xmlVersion = function (val) {\n      val = '' + val || '';\n      if (!val.match(/1\\.[0-9]+/)) {\n        throw new Error(\"Invalid version number: \" + val);\n      }\n      return val;\n    };\n    XMLStringifier.prototype.xmlEncoding = function (val) {\n      val = '' + val || '';\n      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {\n        throw new Error(\"Invalid encoding: \" + val);\n      }\n      return val;\n    };\n    XMLStringifier.prototype.xmlStandalone = function (val) {\n      if (val) {\n        return \"yes\";\n      } else {\n        return \"no\";\n      }\n    };\n    XMLStringifier.prototype.dtdPubID = function (val) {\n      return '' + val || '';\n    };\n    XMLStringifier.prototype.dtdSysID = function (val) {\n      return '' + val || '';\n    };\n    XMLStringifier.prototype.dtdElementValue = function (val) {\n      return '' + val || '';\n    };\n    XMLStringifier.prototype.dtdAttType = function (val) {\n      return '' + val || '';\n    };\n    XMLStringifier.prototype.dtdAttDefault = function (val) {\n      if (val != null) {\n        return '' + val || '';\n      } else {\n        return val;\n      }\n    };\n    XMLStringifier.prototype.dtdEntityValue = function (val) {\n      return '' + val || '';\n    };\n    XMLStringifier.prototype.dtdNData = function (val) {\n      return '' + val || '';\n    };\n    XMLStringifier.prototype.convertAttKey = '@';\n    XMLStringifier.prototype.convertPIKey = '?';\n    XMLStringifier.prototype.convertTextKey = '#text';\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n    XMLStringifier.prototype.convertRawKey = '#raw';\n    XMLStringifier.prototype.assertLegalChar = function (str) {\n      var chars, chr;\n      if (this.allowSurrogateChars) {\n        chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uFFFE-\\uFFFF]/;\n      } else {\n        chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uD800-\\uDFFF\\uFFFE-\\uFFFF]/;\n      }\n      chr = str.match(chars);\n      if (chr) {\n        throw new Error(\"Invalid character (\" + chr + \") in string: \" + str + \" at index \" + chr.index);\n      }\n      return str;\n    };\n    XMLStringifier.prototype.elEscape = function (str) {\n      var ampregex;\n      ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n    };\n    XMLStringifier.prototype.attEscape = function (str) {\n      var ampregex;\n      ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;');\n    };\n    return XMLStringifier;\n  }();\n}).call(this);","map":{"version":3,"names":["XMLStringifier","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","module","exports","options","assertLegalChar","key","ref","value","allowSurrogateChars","noDoubleEncoding","stringify","call","prototype","eleName","val","eleText","elEscape","cdata","match","Error","comment","raw","attName","attValue","attEscape","insTarget","insValue","xmlVersion","xmlEncoding","xmlStandalone","dtdPubID","dtdSysID","dtdElementValue","dtdAttType","dtdAttDefault","dtdEntityValue","dtdNData","convertAttKey","convertPIKey","convertTextKey","convertCDataKey","convertCommentKey","convertRawKey","str","chars","chr","index","ampregex","replace"],"sources":["/Users/luminosity/Desktop/Fovus/node_modules/xmlbuilder/lib/XMLStringifier.js"],"sourcesContent":["// Generated by CoffeeScript 1.9.1\n(function() {\n  var XMLStringifier,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = (function() {\n    function XMLStringifier(options) {\n      this.assertLegalChar = bind(this.assertLegalChar, this);\n      var key, ref, value;\n      this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;\n      this.noDoubleEncoding = options != null ? options.noDoubleEncoding : void 0;\n      ref = (options != null ? options.stringify : void 0) || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[key] = value;\n      }\n    }\n\n    XMLStringifier.prototype.eleName = function(val) {\n      val = '' + val || '';\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.eleText = function(val) {\n      val = '' + val || '';\n      return this.assertLegalChar(this.elEscape(val));\n    };\n\n    XMLStringifier.prototype.cdata = function(val) {\n      val = '' + val || '';\n      if (val.match(/]]>/)) {\n        throw new Error(\"Invalid CDATA text: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.comment = function(val) {\n      val = '' + val || '';\n      if (val.match(/--/)) {\n        throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.raw = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.attName = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.attValue = function(val) {\n      val = '' + val || '';\n      return this.attEscape(val);\n    };\n\n    XMLStringifier.prototype.insTarget = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.insValue = function(val) {\n      val = '' + val || '';\n      if (val.match(/\\?>/)) {\n        throw new Error(\"Invalid processing instruction value: \" + val);\n      }\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlVersion = function(val) {\n      val = '' + val || '';\n      if (!val.match(/1\\.[0-9]+/)) {\n        throw new Error(\"Invalid version number: \" + val);\n      }\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlEncoding = function(val) {\n      val = '' + val || '';\n      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {\n        throw new Error(\"Invalid encoding: \" + val);\n      }\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlStandalone = function(val) {\n      if (val) {\n        return \"yes\";\n      } else {\n        return \"no\";\n      }\n    };\n\n    XMLStringifier.prototype.dtdPubID = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdSysID = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdElementValue = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdAttType = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdAttDefault = function(val) {\n      if (val != null) {\n        return '' + val || '';\n      } else {\n        return val;\n      }\n    };\n\n    XMLStringifier.prototype.dtdEntityValue = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdNData = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.convertAttKey = '@';\n\n    XMLStringifier.prototype.convertPIKey = '?';\n\n    XMLStringifier.prototype.convertTextKey = '#text';\n\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n\n    XMLStringifier.prototype.convertRawKey = '#raw';\n\n    XMLStringifier.prototype.assertLegalChar = function(str) {\n      var chars, chr;\n      if (this.allowSurrogateChars) {\n        chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uFFFE-\\uFFFF]/;\n      } else {\n        chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uD800-\\uDFFF\\uFFFE-\\uFFFF]/;\n      }\n      chr = str.match(chars);\n      if (chr) {\n        throw new Error(\"Invalid character (\" + chr + \") in string: \" + str + \" at index \" + chr.index);\n      }\n      return str;\n    };\n\n    XMLStringifier.prototype.elEscape = function(str) {\n      var ampregex;\n      ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n    };\n\n    XMLStringifier.prototype.attEscape = function(str) {\n      var ampregex;\n      ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;');\n    };\n\n    return XMLStringifier;\n\n  })();\n\n}).call(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}