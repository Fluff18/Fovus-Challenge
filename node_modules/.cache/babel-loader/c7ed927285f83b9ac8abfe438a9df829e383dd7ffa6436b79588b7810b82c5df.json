{"ast":null,"code":"var AWS = require('./core');\nvar SequentialExecutor = require('./sequential_executor');\n/**\n * The namespace used to register global event listeners for request building\n * and sending.\n */\nAWS.EventListeners = {\n  /**\n   * @!attribute VALIDATE_CREDENTIALS\n   *   A request listener that validates whether the request is being\n   *   sent with credentials.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating credentials\n   *     var listener = AWS.EventListeners.Core.VALIDATE_CREDENTIALS;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_REGION\n   *   A request listener that validates whether the region is set\n   *   for a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating region configuration\n   *     var listener = AWS.EventListeners.Core.VALIDATE_REGION;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_PARAMETERS\n   *   A request listener that validates input parameters in a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating parameters\n   *     var listener = AWS.EventListeners.Core.VALIDATE_PARAMETERS;\n   *     request.removeListener('validate', listener);\n   *   @example Disable parameter validation globally\n   *     AWS.EventListeners.Core.removeListener('validate',\n   *       AWS.EventListeners.Core.VALIDATE_REGION);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute SEND\n   *   A request listener that initiates the HTTP connection for a\n   *   request being sent. Handles the {AWS.Request~send 'send' Request event}\n   *   @example Replacing the HTTP handler\n   *     var listener = AWS.EventListeners.Core.SEND;\n   *     request.removeListener('send', listener);\n   *     request.on('send', function(response) {\n   *       customHandler.send(response);\n   *     });\n   *   @return [Function]\n   *   @readonly\n   * @!attribute HTTP_DATA\n   *   A request listener that reads data from the HTTP connection in order\n   *   to build the response data.\n   *   Handles the {AWS.Request~httpData 'httpData' Request event}.\n   *   Remove this handler if you are overriding the 'httpData' event and\n   *   do not want extra data processing and buffering overhead.\n   *   @example Disabling default data processing\n   *     var listener = AWS.EventListeners.Core.HTTP_DATA;\n   *     request.removeListener('httpData', listener);\n   *   @return [Function]\n   *   @readonly\n   */\n  Core: {} /* doc hack */\n};\n\nAWS.EventListeners = {\n  Core: new SequentialExecutor().addNamedListeners(function (add, addAsync) {\n    addAsync('VALIDATE_CREDENTIALS', 'validate', function VALIDATE_CREDENTIALS(req, done) {\n      if (!req.service.api.signatureVersion) return done(); // none\n      req.service.config.getCredentials(function (err) {\n        if (err) {\n          req.response.error = AWS.util.error(err, {\n            code: 'CredentialsError',\n            message: 'Missing credentials in config'\n          });\n        }\n        done();\n      });\n    });\n    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {\n      if (!req.service.config.region && !req.service.isGlobalEndpoint) {\n        req.response.error = AWS.util.error(new Error(), {\n          code: 'ConfigError',\n          message: 'Missing region in config'\n        });\n      }\n    });\n    add('BUILD_IDEMPOTENCY_TOKENS', 'validate', function BUILD_IDEMPOTENCY_TOKENS(req) {\n      if (!req.service.api.operations) {\n        return;\n      }\n      var operation = req.service.api.operations[req.operation];\n      if (!operation) {\n        return;\n      }\n      var idempotentMembers = operation.idempotentMembers;\n      if (!idempotentMembers.length) {\n        return;\n      }\n      // creates a copy of params so user's param object isn't mutated\n      var params = AWS.util.copy(req.params);\n      for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {\n        if (!params[idempotentMembers[i]]) {\n          // add the member\n          params[idempotentMembers[i]] = AWS.util.uuid.v4();\n        }\n      }\n      req.params = params;\n    });\n    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {\n      if (!req.service.api.operations) {\n        return;\n      }\n      var rules = req.service.api.operations[req.operation].input;\n      var validation = req.service.config.paramValidation;\n      new AWS.ParamValidator(validation).validate(rules, req.params);\n    });\n    addAsync('COMPUTE_SHA256', 'afterBuild', function COMPUTE_SHA256(req, done) {\n      req.haltHandlersOnError();\n      if (!req.service.api.operations) {\n        return;\n      }\n      var operation = req.service.api.operations[req.operation];\n      var authtype = operation ? operation.authtype : '';\n      if (!req.service.api.signatureVersion && !authtype) return done(); // none\n      if (req.service.getSignerClass(req) === AWS.Signers.V4) {\n        var body = req.httpRequest.body || '';\n        if (authtype.indexOf('unsigned-body') >= 0) {\n          req.httpRequest.headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n          return done();\n        }\n        AWS.util.computeSha256(body, function (err, sha) {\n          if (err) {\n            done(err);\n          } else {\n            req.httpRequest.headers['X-Amz-Content-Sha256'] = sha;\n            done();\n          }\n        });\n      } else {\n        done();\n      }\n    });\n    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {\n      if (req.httpRequest.headers['Content-Length'] === undefined) {\n        var length = AWS.util.string.byteLength(req.httpRequest.body);\n        req.httpRequest.headers['Content-Length'] = length;\n      }\n    });\n    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {\n      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;\n    });\n    add('RESTART', 'restart', function RESTART() {\n      var err = this.response.error;\n      if (!err || !err.retryable) return;\n      this.httpRequest = new AWS.HttpRequest(this.service.endpoint, this.service.region);\n      if (this.response.retryCount < this.service.config.maxRetries) {\n        this.response.retryCount++;\n      } else {\n        this.response.error = null;\n      }\n    });\n    addAsync('SIGN', 'sign', function SIGN(req, done) {\n      var service = req.service;\n      var operations = req.service.api.operations || {};\n      var operation = operations[req.operation];\n      var authtype = operation ? operation.authtype : '';\n      if (!service.api.signatureVersion && !authtype) return done(); // none\n\n      service.config.getCredentials(function (err, credentials) {\n        if (err) {\n          req.response.error = err;\n          return done();\n        }\n        try {\n          var date = AWS.util.date.getDate();\n          var SignerClass = service.getSignerClass(req);\n          var signer = new SignerClass(req.httpRequest, service.api.signingName || service.api.endpointPrefix, {\n            signatureCache: service.config.signatureCache,\n            operation: operation\n          });\n          signer.setServiceClientId(service._clientId);\n\n          // clear old authorization headers\n          delete req.httpRequest.headers['Authorization'];\n          delete req.httpRequest.headers['Date'];\n          delete req.httpRequest.headers['X-Amz-Date'];\n\n          // add new authorization\n          signer.addAuthorization(credentials, date);\n          req.signedAt = date;\n        } catch (e) {\n          req.response.error = e;\n        }\n        done();\n      });\n    });\n    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {\n      if (this.service.successfulResponse(resp, this)) {\n        resp.data = {};\n        resp.error = null;\n      } else {\n        resp.data = null;\n        resp.error = AWS.util.error(new Error(), {\n          code: 'UnknownError',\n          message: 'An unknown error occurred.'\n        });\n      }\n    });\n    addAsync('SEND', 'send', function SEND(resp, done) {\n      resp.httpResponse._abortCallback = done;\n      resp.error = null;\n      resp.data = null;\n      function callback(httpResp) {\n        resp.httpResponse.stream = httpResp;\n        var stream = resp.request.httpRequest.stream;\n        httpResp.on('headers', function onHeaders(statusCode, headers, statusMessage) {\n          resp.request.emit('httpHeaders', [statusCode, headers, resp, statusMessage]);\n          if (!resp.httpResponse.streaming) {\n            if (AWS.HttpClient.streamsApiVersion === 2) {\n              // streams2 API check\n              httpResp.on('readable', function onReadable() {\n                var data = httpResp.read();\n                if (data !== null) {\n                  resp.request.emit('httpData', [data, resp]);\n                }\n              });\n            } else {\n              // legacy streams API\n              httpResp.on('data', function onData(data) {\n                resp.request.emit('httpData', [data, resp]);\n              });\n            }\n          }\n        });\n        httpResp.on('end', function onEnd() {\n          if (!stream || !stream.didCallback) {\n            resp.request.emit('httpDone');\n            done();\n          }\n        });\n      }\n      function progress(httpResp) {\n        httpResp.on('sendProgress', function onSendProgress(value) {\n          resp.request.emit('httpUploadProgress', [value, resp]);\n        });\n        httpResp.on('receiveProgress', function onReceiveProgress(value) {\n          resp.request.emit('httpDownloadProgress', [value, resp]);\n        });\n      }\n      function error(err) {\n        resp.error = AWS.util.error(err, {\n          code: 'NetworkingError',\n          region: resp.request.httpRequest.region,\n          hostname: resp.request.httpRequest.endpoint.hostname,\n          retryable: true\n        });\n        resp.request.emit('httpError', [resp.error, resp], function () {\n          done();\n        });\n      }\n      function executeSend() {\n        var http = AWS.HttpClient.getInstance();\n        var httpOptions = resp.request.service.config.httpOptions || {};\n        try {\n          var stream = http.handleRequest(resp.request.httpRequest, httpOptions, callback, error);\n          progress(stream);\n        } catch (err) {\n          error(err);\n        }\n      }\n      var timeDiff = (AWS.util.date.getDate() - this.signedAt) / 1000;\n      if (timeDiff >= 60 * 10) {\n        // if we signed 10min ago, re-sign\n        this.emit('sign', [this], function (err) {\n          if (err) done(err);else executeSend();\n        });\n      } else {\n        executeSend();\n      }\n    });\n    add('HTTP_HEADERS', 'httpHeaders', function HTTP_HEADERS(statusCode, headers, resp, statusMessage) {\n      resp.httpResponse.statusCode = statusCode;\n      resp.httpResponse.statusMessage = statusMessage;\n      resp.httpResponse.headers = headers;\n      resp.httpResponse.body = new AWS.util.Buffer('');\n      resp.httpResponse.buffers = [];\n      resp.httpResponse.numBytes = 0;\n      var dateHeader = headers.date || headers.Date;\n      if (dateHeader) {\n        var serverTime = Date.parse(dateHeader);\n        if (resp.request.service.config.correctClockSkew && AWS.util.isClockSkewed(serverTime)) {\n          AWS.util.applyClockOffset(serverTime);\n        }\n      }\n    });\n    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {\n      if (chunk) {\n        if (AWS.util.isNode()) {\n          resp.httpResponse.numBytes += chunk.length;\n          var total = resp.httpResponse.headers['content-length'];\n          var progress = {\n            loaded: resp.httpResponse.numBytes,\n            total: total\n          };\n          resp.request.emit('httpDownloadProgress', [progress, resp]);\n        }\n        resp.httpResponse.buffers.push(new AWS.util.Buffer(chunk));\n      }\n    });\n    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {\n      // convert buffers array into single buffer\n      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {\n        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);\n        resp.httpResponse.body = body;\n      }\n      delete resp.httpResponse.numBytes;\n      delete resp.httpResponse.buffers;\n    });\n    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {\n      if (resp.httpResponse.statusCode) {\n        resp.error.statusCode = resp.httpResponse.statusCode;\n        if (resp.error.retryable === undefined) {\n          resp.error.retryable = this.service.retryableError(resp.error, this);\n        }\n      }\n    });\n    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {\n      if (!resp.error) return;\n      switch (resp.error.code) {\n        case 'RequestExpired': // EC2 only\n        case 'ExpiredTokenException':\n        case 'ExpiredToken':\n          resp.error.retryable = true;\n          resp.request.service.config.credentials.expired = true;\n      }\n    });\n    add('EXPIRED_SIGNATURE', 'retry', function EXPIRED_SIGNATURE(resp) {\n      var err = resp.error;\n      if (!err) return;\n      if (typeof err.code === 'string' && typeof err.message === 'string') {\n        if (err.code.match(/Signature/) && err.message.match(/expired/)) {\n          resp.error.retryable = true;\n        }\n      }\n    });\n    add('CLOCK_SKEWED', 'retry', function CLOCK_SKEWED(resp) {\n      if (!resp.error) return;\n      if (this.service.clockSkewError(resp.error) && this.service.config.correctClockSkew && AWS.config.isClockSkewed) {\n        resp.error.retryable = true;\n      }\n    });\n    add('REDIRECT', 'retry', function REDIRECT(resp) {\n      if (resp.error && resp.error.statusCode >= 300 && resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {\n        this.httpRequest.endpoint = new AWS.Endpoint(resp.httpResponse.headers['location']);\n        this.httpRequest.headers['Host'] = this.httpRequest.endpoint.host;\n        resp.error.redirect = true;\n        resp.error.retryable = true;\n      }\n    });\n    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {\n      if (resp.error) {\n        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.error.retryDelay = 0;\n        } else if (resp.retryCount < resp.maxRetries) {\n          resp.error.retryDelay = this.service.retryDelays(resp.retryCount) || 0;\n        }\n      }\n    });\n    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {\n      var delay,\n        willRetry = false;\n      if (resp.error) {\n        delay = resp.error.retryDelay || 0;\n        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {\n          resp.retryCount++;\n          willRetry = true;\n        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.redirectCount++;\n          willRetry = true;\n        }\n      }\n      if (willRetry) {\n        resp.error = null;\n        setTimeout(done, delay);\n      } else {\n        done();\n      }\n    });\n  }),\n  CorePost: new SequentialExecutor().addNamedListeners(function (add) {\n    add('EXTRACT_REQUEST_ID', 'extractData', AWS.util.extractRequestId);\n    add('EXTRACT_REQUEST_ID', 'extractError', AWS.util.extractRequestId);\n    add('ENOTFOUND_ERROR', 'httpError', function ENOTFOUND_ERROR(err) {\n      if (err.code === 'NetworkingError' && err.errno === 'ENOTFOUND') {\n        var message = 'Inaccessible host: `' + err.hostname + '\\'. This service may not be available in the `' + err.region + '\\' region.';\n        this.response.error = AWS.util.error(new Error(message), {\n          code: 'UnknownEndpoint',\n          region: err.region,\n          hostname: err.hostname,\n          retryable: true,\n          originalError: err\n        });\n      }\n    });\n  }),\n  Logger: new SequentialExecutor().addNamedListeners(function (add) {\n    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {\n      var req = resp.request;\n      var logger = req.service.config.logger;\n      if (!logger) return;\n      function buildMessage() {\n        var time = AWS.util.date.getDate().getTime();\n        var delta = (time - req.startTime.getTime()) / 1000;\n        var ansi = logger.isTTY ? true : false;\n        var status = resp.httpResponse.statusCode;\n        var params = require('util').inspect(req.params, true, null);\n        var message = '';\n        if (ansi) message += '\\x1B[33m';\n        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;\n        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';\n        if (ansi) message += '\\x1B[0;1m';\n        message += ' ' + AWS.util.string.lowerFirst(req.operation);\n        message += '(' + params + ')';\n        if (ansi) message += '\\x1B[0m';\n        return message;\n      }\n      var line = buildMessage();\n      if (typeof logger.log === 'function') {\n        logger.log(line);\n      } else if (typeof logger.write === 'function') {\n        logger.write(line + '\\n');\n      }\n    });\n  }),\n  Json: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/json');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  Rest: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/rest');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  RestJson: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/rest_json');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  RestXml: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/rest_xml');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  Query: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/query');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  })\n};","map":{"version":3,"names":["AWS","require","SequentialExecutor","EventListeners","Core","addNamedListeners","add","addAsync","VALIDATE_CREDENTIALS","req","done","service","api","signatureVersion","config","getCredentials","err","response","error","util","code","message","VALIDATE_REGION","region","isGlobalEndpoint","Error","BUILD_IDEMPOTENCY_TOKENS","operations","operation","idempotentMembers","length","params","copy","i","iLen","uuid","v4","VALIDATE_PARAMETERS","rules","input","validation","paramValidation","ParamValidator","validate","COMPUTE_SHA256","haltHandlersOnError","authtype","getSignerClass","Signers","V4","body","httpRequest","indexOf","headers","computeSha256","sha","SET_CONTENT_LENGTH","undefined","string","byteLength","SET_HTTP_HOST","endpoint","host","RESTART","retryable","HttpRequest","retryCount","maxRetries","SIGN","credentials","date","getDate","SignerClass","signer","signingName","endpointPrefix","signatureCache","setServiceClientId","_clientId","addAuthorization","signedAt","e","VALIDATE_RESPONSE","resp","successfulResponse","data","SEND","httpResponse","_abortCallback","callback","httpResp","stream","request","on","onHeaders","statusCode","statusMessage","emit","streaming","HttpClient","streamsApiVersion","onReadable","read","onData","onEnd","didCallback","progress","onSendProgress","value","onReceiveProgress","hostname","executeSend","http","getInstance","httpOptions","handleRequest","timeDiff","HTTP_HEADERS","Buffer","buffers","numBytes","dateHeader","Date","serverTime","parse","correctClockSkew","isClockSkewed","applyClockOffset","HTTP_DATA","chunk","isNode","total","loaded","push","HTTP_DONE","buffer","concat","FINALIZE_ERROR","retryableError","INVALIDATE_CREDENTIALS","expired","EXPIRED_SIGNATURE","match","CLOCK_SKEWED","clockSkewError","REDIRECT","Endpoint","redirect","RETRY_CHECK","redirectCount","maxRedirects","retryDelay","retryDelays","RESET_RETRY_STATE","delay","willRetry","setTimeout","CorePost","extractRequestId","ENOTFOUND_ERROR","errno","originalError","Logger","LOG_REQUEST","logger","buildMessage","time","getTime","delta","startTime","ansi","isTTY","status","inspect","serviceIdentifier","toString","lowerFirst","line","log","write","Json","svc","buildRequest","extractData","extractError","Rest","RestJson","RestXml","Query"],"sources":["/Users/luminosity/Desktop/Fovus/node_modules/aws-sdk/lib/event_listeners.js"],"sourcesContent":["var AWS = require('./core');\nvar SequentialExecutor = require('./sequential_executor');\n/**\n * The namespace used to register global event listeners for request building\n * and sending.\n */\nAWS.EventListeners = {\n  /**\n   * @!attribute VALIDATE_CREDENTIALS\n   *   A request listener that validates whether the request is being\n   *   sent with credentials.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating credentials\n   *     var listener = AWS.EventListeners.Core.VALIDATE_CREDENTIALS;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_REGION\n   *   A request listener that validates whether the region is set\n   *   for a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating region configuration\n   *     var listener = AWS.EventListeners.Core.VALIDATE_REGION;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_PARAMETERS\n   *   A request listener that validates input parameters in a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating parameters\n   *     var listener = AWS.EventListeners.Core.VALIDATE_PARAMETERS;\n   *     request.removeListener('validate', listener);\n   *   @example Disable parameter validation globally\n   *     AWS.EventListeners.Core.removeListener('validate',\n   *       AWS.EventListeners.Core.VALIDATE_REGION);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute SEND\n   *   A request listener that initiates the HTTP connection for a\n   *   request being sent. Handles the {AWS.Request~send 'send' Request event}\n   *   @example Replacing the HTTP handler\n   *     var listener = AWS.EventListeners.Core.SEND;\n   *     request.removeListener('send', listener);\n   *     request.on('send', function(response) {\n   *       customHandler.send(response);\n   *     });\n   *   @return [Function]\n   *   @readonly\n   * @!attribute HTTP_DATA\n   *   A request listener that reads data from the HTTP connection in order\n   *   to build the response data.\n   *   Handles the {AWS.Request~httpData 'httpData' Request event}.\n   *   Remove this handler if you are overriding the 'httpData' event and\n   *   do not want extra data processing and buffering overhead.\n   *   @example Disabling default data processing\n   *     var listener = AWS.EventListeners.Core.HTTP_DATA;\n   *     request.removeListener('httpData', listener);\n   *   @return [Function]\n   *   @readonly\n   */\n  Core: {} /* doc hack */\n};\n\nAWS.EventListeners = {\n  Core: new SequentialExecutor().addNamedListeners(function(add, addAsync) {\n    addAsync('VALIDATE_CREDENTIALS', 'validate',\n        function VALIDATE_CREDENTIALS(req, done) {\n      if (!req.service.api.signatureVersion) return done(); // none\n      req.service.config.getCredentials(function(err) {\n        if (err) {\n          req.response.error = AWS.util.error(err,\n            {code: 'CredentialsError', message: 'Missing credentials in config'});\n        }\n        done();\n      });\n    });\n\n    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {\n      if (!req.service.config.region && !req.service.isGlobalEndpoint) {\n        req.response.error = AWS.util.error(new Error(),\n          {code: 'ConfigError', message: 'Missing region in config'});\n      }\n    });\n\n    add('BUILD_IDEMPOTENCY_TOKENS', 'validate', function BUILD_IDEMPOTENCY_TOKENS(req) {\n      if (!req.service.api.operations) {\n        return;\n      }\n      var operation = req.service.api.operations[req.operation];\n      if (!operation) {\n        return;\n      }\n      var idempotentMembers = operation.idempotentMembers;\n      if (!idempotentMembers.length) {\n        return;\n      }\n      // creates a copy of params so user's param object isn't mutated\n      var params = AWS.util.copy(req.params);\n      for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {\n        if (!params[idempotentMembers[i]]) {\n          // add the member\n          params[idempotentMembers[i]] = AWS.util.uuid.v4();\n        }\n      }\n      req.params = params;\n    });\n\n    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {\n      if (!req.service.api.operations) {\n        return;\n      }\n      var rules = req.service.api.operations[req.operation].input;\n      var validation = req.service.config.paramValidation;\n      new AWS.ParamValidator(validation).validate(rules, req.params);\n    });\n\n    addAsync('COMPUTE_SHA256', 'afterBuild', function COMPUTE_SHA256(req, done) {\n      req.haltHandlersOnError();\n      if (!req.service.api.operations) {\n        return;\n      }\n      var operation = req.service.api.operations[req.operation];\n      var authtype = operation ? operation.authtype : '';\n      if (!req.service.api.signatureVersion && !authtype) return done(); // none\n      if (req.service.getSignerClass(req) === AWS.Signers.V4) {\n        var body = req.httpRequest.body || '';\n        if (authtype.indexOf('unsigned-body') >= 0) {\n          req.httpRequest.headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n          return done();\n        }\n        AWS.util.computeSha256(body, function(err, sha) {\n          if (err) {\n            done(err);\n          }\n          else {\n            req.httpRequest.headers['X-Amz-Content-Sha256'] = sha;\n            done();\n          }\n        });\n      } else {\n        done();\n      }\n    });\n\n    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {\n      if (req.httpRequest.headers['Content-Length'] === undefined) {\n        var length = AWS.util.string.byteLength(req.httpRequest.body);\n        req.httpRequest.headers['Content-Length'] = length;\n      }\n    });\n\n    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {\n      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;\n    });\n\n    add('RESTART', 'restart', function RESTART() {\n      var err = this.response.error;\n      if (!err || !err.retryable) return;\n\n      this.httpRequest = new AWS.HttpRequest(\n        this.service.endpoint,\n        this.service.region\n      );\n\n      if (this.response.retryCount < this.service.config.maxRetries) {\n        this.response.retryCount++;\n      } else {\n        this.response.error = null;\n      }\n    });\n\n    addAsync('SIGN', 'sign', function SIGN(req, done) {\n      var service = req.service;\n      var operations = req.service.api.operations || {};\n      var operation = operations[req.operation];\n      var authtype = operation ? operation.authtype : '';\n      if (!service.api.signatureVersion && !authtype) return done(); // none\n\n      service.config.getCredentials(function (err, credentials) {\n        if (err) {\n          req.response.error = err;\n          return done();\n        }\n\n        try {\n          var date = AWS.util.date.getDate();\n          var SignerClass = service.getSignerClass(req);\n          var signer = new SignerClass(req.httpRequest,\n            service.api.signingName || service.api.endpointPrefix,\n            {\n              signatureCache: service.config.signatureCache,\n              operation: operation\n            });\n          signer.setServiceClientId(service._clientId);\n\n          // clear old authorization headers\n          delete req.httpRequest.headers['Authorization'];\n          delete req.httpRequest.headers['Date'];\n          delete req.httpRequest.headers['X-Amz-Date'];\n\n          // add new authorization\n          signer.addAuthorization(credentials, date);\n          req.signedAt = date;\n        } catch (e) {\n          req.response.error = e;\n        }\n        done();\n      });\n    });\n\n    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {\n      if (this.service.successfulResponse(resp, this)) {\n        resp.data = {};\n        resp.error = null;\n      } else {\n        resp.data = null;\n        resp.error = AWS.util.error(new Error(),\n          {code: 'UnknownError', message: 'An unknown error occurred.'});\n      }\n    });\n\n    addAsync('SEND', 'send', function SEND(resp, done) {\n      resp.httpResponse._abortCallback = done;\n      resp.error = null;\n      resp.data = null;\n\n      function callback(httpResp) {\n        resp.httpResponse.stream = httpResp;\n        var stream = resp.request.httpRequest.stream;\n\n        httpResp.on('headers', function onHeaders(statusCode, headers, statusMessage) {\n          resp.request.emit(\n            'httpHeaders',\n            [statusCode, headers, resp, statusMessage]\n          );\n\n          if (!resp.httpResponse.streaming) {\n            if (AWS.HttpClient.streamsApiVersion === 2) { // streams2 API check\n              httpResp.on('readable', function onReadable() {\n                var data = httpResp.read();\n                if (data !== null) {\n                  resp.request.emit('httpData', [data, resp]);\n                }\n              });\n            } else { // legacy streams API\n              httpResp.on('data', function onData(data) {\n                resp.request.emit('httpData', [data, resp]);\n              });\n            }\n          }\n        });\n\n        httpResp.on('end', function onEnd() {\n          if (!stream || !stream.didCallback) {\n            resp.request.emit('httpDone');\n            done();\n          }\n        });\n      }\n\n      function progress(httpResp) {\n        httpResp.on('sendProgress', function onSendProgress(value) {\n          resp.request.emit('httpUploadProgress', [value, resp]);\n        });\n\n        httpResp.on('receiveProgress', function onReceiveProgress(value) {\n          resp.request.emit('httpDownloadProgress', [value, resp]);\n        });\n      }\n\n      function error(err) {\n        resp.error = AWS.util.error(err, {\n          code: 'NetworkingError',\n          region: resp.request.httpRequest.region,\n          hostname: resp.request.httpRequest.endpoint.hostname,\n          retryable: true\n        });\n        resp.request.emit('httpError', [resp.error, resp], function() {\n          done();\n        });\n      }\n\n      function executeSend() {\n        var http = AWS.HttpClient.getInstance();\n        var httpOptions = resp.request.service.config.httpOptions || {};\n        try {\n          var stream = http.handleRequest(resp.request.httpRequest, httpOptions,\n                                          callback, error);\n          progress(stream);\n        } catch (err) {\n          error(err);\n        }\n      }\n\n      var timeDiff = (AWS.util.date.getDate() - this.signedAt) / 1000;\n      if (timeDiff >= 60 * 10) { // if we signed 10min ago, re-sign\n        this.emit('sign', [this], function(err) {\n          if (err) done(err);\n          else executeSend();\n        });\n      } else {\n        executeSend();\n      }\n    });\n\n    add('HTTP_HEADERS', 'httpHeaders',\n        function HTTP_HEADERS(statusCode, headers, resp, statusMessage) {\n      resp.httpResponse.statusCode = statusCode;\n      resp.httpResponse.statusMessage = statusMessage;\n      resp.httpResponse.headers = headers;\n      resp.httpResponse.body = new AWS.util.Buffer('');\n      resp.httpResponse.buffers = [];\n      resp.httpResponse.numBytes = 0;\n      var dateHeader = headers.date || headers.Date;\n      if (dateHeader) {\n        var serverTime = Date.parse(dateHeader);\n        if (resp.request.service.config.correctClockSkew\n            && AWS.util.isClockSkewed(serverTime)) {\n          AWS.util.applyClockOffset(serverTime);\n        }\n      }\n    });\n\n    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {\n      if (chunk) {\n        if (AWS.util.isNode()) {\n          resp.httpResponse.numBytes += chunk.length;\n\n          var total = resp.httpResponse.headers['content-length'];\n          var progress = { loaded: resp.httpResponse.numBytes, total: total };\n          resp.request.emit('httpDownloadProgress', [progress, resp]);\n        }\n\n        resp.httpResponse.buffers.push(new AWS.util.Buffer(chunk));\n      }\n    });\n\n    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {\n      // convert buffers array into single buffer\n      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {\n        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);\n        resp.httpResponse.body = body;\n      }\n      delete resp.httpResponse.numBytes;\n      delete resp.httpResponse.buffers;\n    });\n\n    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {\n      if (resp.httpResponse.statusCode) {\n        resp.error.statusCode = resp.httpResponse.statusCode;\n        if (resp.error.retryable === undefined) {\n          resp.error.retryable = this.service.retryableError(resp.error, this);\n        }\n      }\n    });\n\n    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {\n      if (!resp.error) return;\n      switch (resp.error.code) {\n        case 'RequestExpired': // EC2 only\n        case 'ExpiredTokenException':\n        case 'ExpiredToken':\n          resp.error.retryable = true;\n          resp.request.service.config.credentials.expired = true;\n      }\n    });\n\n    add('EXPIRED_SIGNATURE', 'retry', function EXPIRED_SIGNATURE(resp) {\n      var err = resp.error;\n      if (!err) return;\n      if (typeof err.code === 'string' && typeof err.message === 'string') {\n        if (err.code.match(/Signature/) && err.message.match(/expired/)) {\n          resp.error.retryable = true;\n        }\n      }\n    });\n\n    add('CLOCK_SKEWED', 'retry', function CLOCK_SKEWED(resp) {\n      if (!resp.error) return;\n      if (this.service.clockSkewError(resp.error)\n          && this.service.config.correctClockSkew\n          && AWS.config.isClockSkewed) {\n        resp.error.retryable = true;\n      }\n    });\n\n    add('REDIRECT', 'retry', function REDIRECT(resp) {\n      if (resp.error && resp.error.statusCode >= 300 &&\n          resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {\n        this.httpRequest.endpoint =\n          new AWS.Endpoint(resp.httpResponse.headers['location']);\n        this.httpRequest.headers['Host'] = this.httpRequest.endpoint.host;\n        resp.error.redirect = true;\n        resp.error.retryable = true;\n      }\n    });\n\n    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {\n      if (resp.error) {\n        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.error.retryDelay = 0;\n        } else if (resp.retryCount < resp.maxRetries) {\n          resp.error.retryDelay = this.service.retryDelays(resp.retryCount) || 0;\n        }\n      }\n    });\n\n    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {\n      var delay, willRetry = false;\n\n      if (resp.error) {\n        delay = resp.error.retryDelay || 0;\n        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {\n          resp.retryCount++;\n          willRetry = true;\n        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.redirectCount++;\n          willRetry = true;\n        }\n      }\n\n      if (willRetry) {\n        resp.error = null;\n        setTimeout(done, delay);\n      } else {\n        done();\n      }\n    });\n  }),\n\n  CorePost: new SequentialExecutor().addNamedListeners(function(add) {\n    add('EXTRACT_REQUEST_ID', 'extractData', AWS.util.extractRequestId);\n    add('EXTRACT_REQUEST_ID', 'extractError', AWS.util.extractRequestId);\n\n    add('ENOTFOUND_ERROR', 'httpError', function ENOTFOUND_ERROR(err) {\n      if (err.code === 'NetworkingError' && err.errno === 'ENOTFOUND') {\n        var message = 'Inaccessible host: `' + err.hostname +\n          '\\'. This service may not be available in the `' + err.region +\n          '\\' region.';\n        this.response.error = AWS.util.error(new Error(message), {\n          code: 'UnknownEndpoint',\n          region: err.region,\n          hostname: err.hostname,\n          retryable: true,\n          originalError: err\n        });\n      }\n    });\n  }),\n\n  Logger: new SequentialExecutor().addNamedListeners(function(add) {\n    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {\n      var req = resp.request;\n      var logger = req.service.config.logger;\n      if (!logger) return;\n\n      function buildMessage() {\n        var time = AWS.util.date.getDate().getTime();\n        var delta = (time - req.startTime.getTime()) / 1000;\n        var ansi = logger.isTTY ? true : false;\n        var status = resp.httpResponse.statusCode;\n        var params = require('util').inspect(req.params, true, null);\n\n        var message = '';\n        if (ansi) message += '\\x1B[33m';\n        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;\n        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';\n        if (ansi) message += '\\x1B[0;1m';\n        message += ' ' + AWS.util.string.lowerFirst(req.operation);\n        message += '(' + params + ')';\n        if (ansi) message += '\\x1B[0m';\n        return message;\n      }\n\n      var line = buildMessage();\n      if (typeof logger.log === 'function') {\n        logger.log(line);\n      } else if (typeof logger.write === 'function') {\n        logger.write(line + '\\n');\n      }\n    });\n  }),\n\n  Json: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/json');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  Rest: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/rest');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  RestJson: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/rest_json');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  RestXml: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/rest_xml');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  Query: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/query');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  })\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}