{"ast":null,"code":"\"use strict\";\n\n// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsCrc32c = void 0;\nvar tslib_1 = require(\"tslib\");\nvar util_1 = require(\"@aws-crypto/util\");\nvar index_1 = require(\"./index\");\nvar AwsCrc32c = /** @class */function () {\n  function AwsCrc32c() {\n    this.crc32c = new index_1.Crc32c();\n  }\n  AwsCrc32c.prototype.update = function (toHash) {\n    if ((0, util_1.isEmptyData)(toHash)) return;\n    this.crc32c.update((0, util_1.convertToBuffer)(toHash));\n  };\n  AwsCrc32c.prototype.digest = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2 /*return*/, (0, util_1.numToUint8)(this.crc32c.digest())];\n      });\n    });\n  };\n  AwsCrc32c.prototype.reset = function () {\n    this.crc32c = new index_1.Crc32c();\n  };\n  return AwsCrc32c;\n}();\nexports.AwsCrc32c = AwsCrc32c;","map":{"version":3,"mappings":";;AAAA;AACA;;;;;;AAGA;AACA;AAEA;EAAA;IACU,WAAM,GAAG,IAAIA,cAAM,EAAE;EAe/B;EAbEC,0BAAM,GAAN,UAAOC,MAAkB;IACvB,IAAI,sBAAW,EAACA,MAAM,CAAC,EAAE;IAEzB,IAAI,CAACC,MAAM,CAACC,MAAM,CAAC,0BAAe,EAACF,MAAM,CAAC,CAAC;EAC7C,CAAC;EAEKD,0BAAM,GAAZ;;;QACE,sBAAO,qBAAU,EAAC,IAAI,CAACE,MAAM,CAACE,MAAM,EAAE,CAAC;;;GACxC;EAEDJ,yBAAK,GAAL;IACE,IAAI,CAACE,MAAM,GAAG,IAAIH,cAAM,EAAE;EAC5B,CAAC;EACH,gBAAC;AAAD,CAAC,EAhBD;AAAaM","names":["index_1","AwsCrc32c","toHash","crc32c","update","digest","exports"],"sources":["/Users/luminosity/Desktop/Fovus/node_modules/@aws-crypto/crc32c/src/aws_crc32c.ts"],"sourcesContent":["// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Checksum, SourceData } from \"@aws-sdk/types\";\nimport { convertToBuffer, isEmptyData, numToUint8 } from \"@aws-crypto/util\";\nimport { Crc32c } from \"./index\";\n\nexport class AwsCrc32c implements Checksum {\n  private crc32c = new Crc32c();\n\n  update(toHash: SourceData) {\n    if (isEmptyData(toHash)) return;\n\n    this.crc32c.update(convertToBuffer(toHash));\n  }\n\n  async digest(): Promise<Uint8Array> {\n    return numToUint8(this.crc32c.digest());\n  }\n\n  reset(): void {\n    this.crc32c = new Crc32c();\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}