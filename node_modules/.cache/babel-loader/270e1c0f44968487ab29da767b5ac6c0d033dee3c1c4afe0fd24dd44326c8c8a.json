{"ast":null,"code":"var util = require('../core').util;\nvar typeOf = require('./types').typeOf;\n\n/**\n * @api private\n */\nvar DynamoDBSet = util.inherit({\n  constructor: function Set(list, options) {\n    options = options || {};\n    this.initialize(list, options.validate);\n  },\n  initialize: function (list, validate) {\n    var self = this;\n    self.values = [].concat(list);\n    self.detectType();\n    if (validate) {\n      self.validate();\n    }\n  },\n  detectType: function () {\n    var self = this;\n    var value = self.values[0];\n    if (typeOf(value) === 'String') {\n      self.type = 'String';\n    } else if (typeOf(value) === 'Number') {\n      self.type = 'Number';\n    } else if (typeOf(value) === 'Binary') {\n      self.type = 'Binary';\n    } else {\n      throw util.error(new Error(), {\n        code: 'InvalidSetType',\n        message: 'Sets can contain string, number, or binary values'\n      });\n    }\n  },\n  validate: function () {\n    var self = this;\n    var length = self.values.length;\n    var values = self.values;\n    for (var i = 0; i < length; i++) {\n      if (typeOf(values[i]) !== self.type) {\n        throw util.error(new Error(), {\n          code: 'InvalidType',\n          message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'\n        });\n      }\n    }\n  }\n});\nmodule.exports = DynamoDBSet;","map":{"version":3,"names":["util","require","typeOf","DynamoDBSet","inherit","constructor","Set","list","options","initialize","validate","self","values","concat","detectType","value","type","error","Error","code","message","length","i","module","exports"],"sources":["/Users/luminosity/Desktop/Fovus/node_modules/aws-sdk/lib/dynamodb/set.js"],"sourcesContent":["var util = require('../core').util;\nvar typeOf = require('./types').typeOf;\n\n/**\n * @api private\n */\nvar DynamoDBSet = util.inherit({\n\n  constructor: function Set(list, options) {\n    options = options || {};\n    this.initialize(list, options.validate);\n  },\n\n  initialize: function(list, validate) {\n    var self = this;\n    self.values = [].concat(list);\n    self.detectType();\n    if (validate) {\n      self.validate();\n    }\n  },\n\n  detectType: function() {\n    var self = this;\n    var value = self.values[0];\n    if (typeOf(value) === 'String') {\n      self.type = 'String';\n    } else if (typeOf(value) === 'Number') {\n      self.type = 'Number';\n    } else if (typeOf(value) === 'Binary') {\n      self.type = 'Binary';\n    } else {\n      throw util.error(new Error(), {\n        code: 'InvalidSetType',\n        message: 'Sets can contain string, number, or binary values'\n      });\n    }\n  },\n\n  validate: function() {\n    var self = this;\n    var length = self.values.length;\n    var values = self.values;\n    for (var i = 0; i < length; i++) {\n      if (typeOf(values[i]) !== self.type) {\n        throw util.error(new Error(), {\n          code: 'InvalidType',\n          message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'\n        });\n      }\n    }\n  }\n\n});\n\nmodule.exports = DynamoDBSet;\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACD,IAAI;AAClC,IAAIE,MAAM,GAAGD,OAAO,CAAC,SAAS,CAAC,CAACC,MAAM;;AAEtC;AACA;AACA;AACA,IAAIC,WAAW,GAAGH,IAAI,CAACI,OAAO,CAAC;EAE7BC,WAAW,EAAE,SAASC,GAAG,CAACC,IAAI,EAAEC,OAAO,EAAE;IACvCA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,IAAI,CAACC,UAAU,CAACF,IAAI,EAAEC,OAAO,CAACE,QAAQ,CAAC;EACzC,CAAC;EAEDD,UAAU,EAAE,UAASF,IAAI,EAAEG,QAAQ,EAAE;IACnC,IAAIC,IAAI,GAAG,IAAI;IACfA,IAAI,CAACC,MAAM,GAAG,EAAE,CAACC,MAAM,CAACN,IAAI,CAAC;IAC7BI,IAAI,CAACG,UAAU,EAAE;IACjB,IAAIJ,QAAQ,EAAE;MACZC,IAAI,CAACD,QAAQ,EAAE;IACjB;EACF,CAAC;EAEDI,UAAU,EAAE,YAAW;IACrB,IAAIH,IAAI,GAAG,IAAI;IACf,IAAII,KAAK,GAAGJ,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;IAC1B,IAAIV,MAAM,CAACa,KAAK,CAAC,KAAK,QAAQ,EAAE;MAC9BJ,IAAI,CAACK,IAAI,GAAG,QAAQ;IACtB,CAAC,MAAM,IAAId,MAAM,CAACa,KAAK,CAAC,KAAK,QAAQ,EAAE;MACrCJ,IAAI,CAACK,IAAI,GAAG,QAAQ;IACtB,CAAC,MAAM,IAAId,MAAM,CAACa,KAAK,CAAC,KAAK,QAAQ,EAAE;MACrCJ,IAAI,CAACK,IAAI,GAAG,QAAQ;IACtB,CAAC,MAAM;MACL,MAAMhB,IAAI,CAACiB,KAAK,CAAC,IAAIC,KAAK,EAAE,EAAE;QAC5BC,IAAI,EAAE,gBAAgB;QACtBC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC;EAEDV,QAAQ,EAAE,YAAW;IACnB,IAAIC,IAAI,GAAG,IAAI;IACf,IAAIU,MAAM,GAAGV,IAAI,CAACC,MAAM,CAACS,MAAM;IAC/B,IAAIT,MAAM,GAAGD,IAAI,CAACC,MAAM;IACxB,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC/B,IAAIpB,MAAM,CAACU,MAAM,CAACU,CAAC,CAAC,CAAC,KAAKX,IAAI,CAACK,IAAI,EAAE;QACnC,MAAMhB,IAAI,CAACiB,KAAK,CAAC,IAAIC,KAAK,EAAE,EAAE;UAC5BC,IAAI,EAAE,aAAa;UACnBC,OAAO,EAAET,IAAI,CAACK,IAAI,GAAG,gBAAgB,GAAGd,MAAM,CAACU,MAAM,CAACU,CAAC,CAAC,CAAC,GAAG;QAC9D,CAAC,CAAC;MACJ;IACF;EACF;AAEF,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAGrB,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}