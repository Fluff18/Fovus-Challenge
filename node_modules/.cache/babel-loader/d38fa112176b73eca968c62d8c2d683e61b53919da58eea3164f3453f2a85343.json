{"ast":null,"code":"var AWS = require('./core');\n\n/**\n * @api private\n * @!method on(eventName, callback)\n *   Registers an event listener callback for the event given by `eventName`.\n *   Parameters passed to the callback function depend on the individual event\n *   being triggered. See the event documentation for those parameters.\n *\n *   @param eventName [String] the event name to register the listener for\n *   @param callback [Function] the listener callback function\n *   @return [AWS.SequentialExecutor] the same object for chaining\n */\nAWS.SequentialExecutor = AWS.util.inherit({\n  constructor: function SequentialExecutor() {\n    this._events = {};\n  },\n  /**\n   * @api private\n   */\n  listeners: function listeners(eventName) {\n    return this._events[eventName] ? this._events[eventName].slice(0) : [];\n  },\n  on: function on(eventName, listener) {\n    if (this._events[eventName]) {\n      this._events[eventName].push(listener);\n    } else {\n      this._events[eventName] = [listener];\n    }\n    return this;\n  },\n  /**\n   * @api private\n   */\n  onAsync: function onAsync(eventName, listener) {\n    listener._isAsync = true;\n    return this.on(eventName, listener);\n  },\n  removeListener: function removeListener(eventName, listener) {\n    var listeners = this._events[eventName];\n    if (listeners) {\n      var length = listeners.length;\n      var position = -1;\n      for (var i = 0; i < length; ++i) {\n        if (listeners[i] === listener) {\n          position = i;\n        }\n      }\n      if (position > -1) {\n        listeners.splice(position, 1);\n      }\n    }\n    return this;\n  },\n  removeAllListeners: function removeAllListeners(eventName) {\n    if (eventName) {\n      delete this._events[eventName];\n    } else {\n      this._events = {};\n    }\n    return this;\n  },\n  /**\n   * @api private\n   */\n  emit: function emit(eventName, eventArgs, doneCallback) {\n    if (!doneCallback) doneCallback = function () {};\n    var listeners = this.listeners(eventName);\n    var count = listeners.length;\n    this.callListeners(listeners, eventArgs, doneCallback);\n    return count > 0;\n  },\n  /**\n   * @api private\n   */\n  callListeners: function callListeners(listeners, args, doneCallback, prevError) {\n    var self = this;\n    var error = prevError || null;\n    function callNextListener(err) {\n      if (err) {\n        error = AWS.util.error(error || new Error(), err);\n        if (self._haltHandlersOnError) {\n          return doneCallback.call(self, error);\n        }\n      }\n      self.callListeners(listeners, args, doneCallback, error);\n    }\n    while (listeners.length > 0) {\n      var listener = listeners.shift();\n      if (listener._isAsync) {\n        // asynchronous listener\n        listener.apply(self, args.concat([callNextListener]));\n        return; // stop here, callNextListener will continue\n      } else {\n        // synchronous listener\n        try {\n          listener.apply(self, args);\n        } catch (err) {\n          error = AWS.util.error(error || new Error(), err);\n        }\n        if (error && self._haltHandlersOnError) {\n          doneCallback.call(self, error);\n          return;\n        }\n      }\n    }\n    doneCallback.call(self, error);\n  },\n  /**\n   * Adds or copies a set of listeners from another list of\n   * listeners or SequentialExecutor object.\n   *\n   * @param listeners [map<String,Array<Function>>, AWS.SequentialExecutor]\n   *   a list of events and callbacks, or an event emitter object\n   *   containing listeners to add to this emitter object.\n   * @return [AWS.SequentialExecutor] the emitter object, for chaining.\n   * @example Adding listeners from a map of listeners\n   *   emitter.addListeners({\n   *     event1: [function() { ... }, function() { ... }],\n   *     event2: [function() { ... }]\n   *   });\n   *   emitter.emit('event1'); // emitter has event1\n   *   emitter.emit('event2'); // emitter has event2\n   * @example Adding listeners from another emitter object\n   *   var emitter1 = new AWS.SequentialExecutor();\n   *   emitter1.on('event1', function() { ... });\n   *   emitter1.on('event2', function() { ... });\n   *   var emitter2 = new AWS.SequentialExecutor();\n   *   emitter2.addListeners(emitter1);\n   *   emitter2.emit('event1'); // emitter2 has event1\n   *   emitter2.emit('event2'); // emitter2 has event2\n   */\n  addListeners: function addListeners(listeners) {\n    var self = this;\n\n    // extract listeners if parameter is an SequentialExecutor object\n    if (listeners._events) listeners = listeners._events;\n    AWS.util.each(listeners, function (event, callbacks) {\n      if (typeof callbacks === 'function') callbacks = [callbacks];\n      AWS.util.arrayEach(callbacks, function (callback) {\n        self.on(event, callback);\n      });\n    });\n    return self;\n  },\n  /**\n   * Registers an event with {on} and saves the callback handle function\n   * as a property on the emitter object using a given `name`.\n   *\n   * @param name [String] the property name to set on this object containing\n   *   the callback function handle so that the listener can be removed in\n   *   the future.\n   * @param (see on)\n   * @return (see on)\n   * @example Adding a named listener DATA_CALLBACK\n   *   var listener = function() { doSomething(); };\n   *   emitter.addNamedListener('DATA_CALLBACK', 'data', listener);\n   *\n   *   // the following prints: true\n   *   console.log(emitter.DATA_CALLBACK == listener);\n   */\n  addNamedListener: function addNamedListener(name, eventName, callback) {\n    this[name] = callback;\n    this.addListener(eventName, callback);\n    return this;\n  },\n  /**\n   * @api private\n   */\n  addNamedAsyncListener: function addNamedAsyncListener(name, eventName, callback) {\n    callback._isAsync = true;\n    return this.addNamedListener(name, eventName, callback);\n  },\n  /**\n   * Helper method to add a set of named listeners using\n   * {addNamedListener}. The callback contains a parameter\n   * with a handle to the `addNamedListener` method.\n   *\n   * @callback callback function(add)\n   *   The callback function is called immediately in order to provide\n   *   the `add` function to the block. This simplifies the addition of\n   *   a large group of named listeners.\n   *   @param add [Function] the {addNamedListener} function to call\n   *     when registering listeners.\n   * @example Adding a set of named listeners\n   *   emitter.addNamedListeners(function(add) {\n   *     add('DATA_CALLBACK', 'data', function() { ... });\n   *     add('OTHER', 'otherEvent', function() { ... });\n   *     add('LAST', 'lastEvent', function() { ... });\n   *   });\n   *\n   *   // these properties are now set:\n   *   emitter.DATA_CALLBACK;\n   *   emitter.OTHER;\n   *   emitter.LAST;\n   */\n  addNamedListeners: function addNamedListeners(callback) {\n    var self = this;\n    callback(function () {\n      self.addNamedListener.apply(self, arguments);\n    }, function () {\n      self.addNamedAsyncListener.apply(self, arguments);\n    });\n    return this;\n  }\n});\n\n/**\n * {on} is the prefered method.\n * @api private\n */\nAWS.SequentialExecutor.prototype.addListener = AWS.SequentialExecutor.prototype.on;\nmodule.exports = AWS.SequentialExecutor;","map":{"version":3,"names":["AWS","require","SequentialExecutor","util","inherit","constructor","_events","listeners","eventName","slice","on","listener","push","onAsync","_isAsync","removeListener","length","position","i","splice","removeAllListeners","emit","eventArgs","doneCallback","count","callListeners","args","prevError","self","error","callNextListener","err","Error","_haltHandlersOnError","call","shift","apply","concat","addListeners","each","event","callbacks","arrayEach","callback","addNamedListener","name","addListener","addNamedAsyncListener","addNamedListeners","arguments","prototype","module","exports"],"sources":["/Users/luminosity/Desktop/Fovus/node_modules/aws-sdk/lib/sequential_executor.js"],"sourcesContent":["var AWS = require('./core');\n\n/**\n * @api private\n * @!method on(eventName, callback)\n *   Registers an event listener callback for the event given by `eventName`.\n *   Parameters passed to the callback function depend on the individual event\n *   being triggered. See the event documentation for those parameters.\n *\n *   @param eventName [String] the event name to register the listener for\n *   @param callback [Function] the listener callback function\n *   @return [AWS.SequentialExecutor] the same object for chaining\n */\nAWS.SequentialExecutor = AWS.util.inherit({\n\n  constructor: function SequentialExecutor() {\n    this._events = {};\n  },\n\n  /**\n   * @api private\n   */\n  listeners: function listeners(eventName) {\n    return this._events[eventName] ? this._events[eventName].slice(0) : [];\n  },\n\n  on: function on(eventName, listener) {\n    if (this._events[eventName]) {\n      this._events[eventName].push(listener);\n    } else {\n      this._events[eventName] = [listener];\n    }\n    return this;\n  },\n\n  /**\n   * @api private\n   */\n  onAsync: function onAsync(eventName, listener) {\n    listener._isAsync = true;\n    return this.on(eventName, listener);\n  },\n\n  removeListener: function removeListener(eventName, listener) {\n    var listeners = this._events[eventName];\n    if (listeners) {\n      var length = listeners.length;\n      var position = -1;\n      for (var i = 0; i < length; ++i) {\n        if (listeners[i] === listener) {\n          position = i;\n        }\n      }\n      if (position > -1) {\n        listeners.splice(position, 1);\n      }\n    }\n    return this;\n  },\n\n  removeAllListeners: function removeAllListeners(eventName) {\n    if (eventName) {\n      delete this._events[eventName];\n    } else {\n      this._events = {};\n    }\n    return this;\n  },\n\n  /**\n   * @api private\n   */\n  emit: function emit(eventName, eventArgs, doneCallback) {\n    if (!doneCallback) doneCallback = function() { };\n    var listeners = this.listeners(eventName);\n    var count = listeners.length;\n    this.callListeners(listeners, eventArgs, doneCallback);\n    return count > 0;\n  },\n\n  /**\n   * @api private\n   */\n  callListeners: function callListeners(listeners, args, doneCallback, prevError) {\n    var self = this;\n    var error = prevError || null;\n\n    function callNextListener(err) {\n      if (err) {\n        error = AWS.util.error(error || new Error(), err);\n        if (self._haltHandlersOnError) {\n          return doneCallback.call(self, error);\n        }\n      }\n      self.callListeners(listeners, args, doneCallback, error);\n    }\n\n    while (listeners.length > 0) {\n      var listener = listeners.shift();\n      if (listener._isAsync) { // asynchronous listener\n        listener.apply(self, args.concat([callNextListener]));\n        return; // stop here, callNextListener will continue\n      } else { // synchronous listener\n        try {\n          listener.apply(self, args);\n        } catch (err) {\n          error = AWS.util.error(error || new Error(), err);\n        }\n        if (error && self._haltHandlersOnError) {\n          doneCallback.call(self, error);\n          return;\n        }\n      }\n    }\n    doneCallback.call(self, error);\n  },\n\n  /**\n   * Adds or copies a set of listeners from another list of\n   * listeners or SequentialExecutor object.\n   *\n   * @param listeners [map<String,Array<Function>>, AWS.SequentialExecutor]\n   *   a list of events and callbacks, or an event emitter object\n   *   containing listeners to add to this emitter object.\n   * @return [AWS.SequentialExecutor] the emitter object, for chaining.\n   * @example Adding listeners from a map of listeners\n   *   emitter.addListeners({\n   *     event1: [function() { ... }, function() { ... }],\n   *     event2: [function() { ... }]\n   *   });\n   *   emitter.emit('event1'); // emitter has event1\n   *   emitter.emit('event2'); // emitter has event2\n   * @example Adding listeners from another emitter object\n   *   var emitter1 = new AWS.SequentialExecutor();\n   *   emitter1.on('event1', function() { ... });\n   *   emitter1.on('event2', function() { ... });\n   *   var emitter2 = new AWS.SequentialExecutor();\n   *   emitter2.addListeners(emitter1);\n   *   emitter2.emit('event1'); // emitter2 has event1\n   *   emitter2.emit('event2'); // emitter2 has event2\n   */\n  addListeners: function addListeners(listeners) {\n    var self = this;\n\n    // extract listeners if parameter is an SequentialExecutor object\n    if (listeners._events) listeners = listeners._events;\n\n    AWS.util.each(listeners, function(event, callbacks) {\n      if (typeof callbacks === 'function') callbacks = [callbacks];\n      AWS.util.arrayEach(callbacks, function(callback) {\n        self.on(event, callback);\n      });\n    });\n\n    return self;\n  },\n\n  /**\n   * Registers an event with {on} and saves the callback handle function\n   * as a property on the emitter object using a given `name`.\n   *\n   * @param name [String] the property name to set on this object containing\n   *   the callback function handle so that the listener can be removed in\n   *   the future.\n   * @param (see on)\n   * @return (see on)\n   * @example Adding a named listener DATA_CALLBACK\n   *   var listener = function() { doSomething(); };\n   *   emitter.addNamedListener('DATA_CALLBACK', 'data', listener);\n   *\n   *   // the following prints: true\n   *   console.log(emitter.DATA_CALLBACK == listener);\n   */\n  addNamedListener: function addNamedListener(name, eventName, callback) {\n    this[name] = callback;\n    this.addListener(eventName, callback);\n    return this;\n  },\n\n  /**\n   * @api private\n   */\n  addNamedAsyncListener: function addNamedAsyncListener(name, eventName, callback) {\n    callback._isAsync = true;\n    return this.addNamedListener(name, eventName, callback);\n  },\n\n  /**\n   * Helper method to add a set of named listeners using\n   * {addNamedListener}. The callback contains a parameter\n   * with a handle to the `addNamedListener` method.\n   *\n   * @callback callback function(add)\n   *   The callback function is called immediately in order to provide\n   *   the `add` function to the block. This simplifies the addition of\n   *   a large group of named listeners.\n   *   @param add [Function] the {addNamedListener} function to call\n   *     when registering listeners.\n   * @example Adding a set of named listeners\n   *   emitter.addNamedListeners(function(add) {\n   *     add('DATA_CALLBACK', 'data', function() { ... });\n   *     add('OTHER', 'otherEvent', function() { ... });\n   *     add('LAST', 'lastEvent', function() { ... });\n   *   });\n   *\n   *   // these properties are now set:\n   *   emitter.DATA_CALLBACK;\n   *   emitter.OTHER;\n   *   emitter.LAST;\n   */\n  addNamedListeners: function addNamedListeners(callback) {\n    var self = this;\n    callback(\n      function() {\n        self.addNamedListener.apply(self, arguments);\n      },\n      function() {\n        self.addNamedAsyncListener.apply(self, arguments);\n      }\n    );\n    return this;\n  }\n});\n\n/**\n * {on} is the prefered method.\n * @api private\n */\nAWS.SequentialExecutor.prototype.addListener = AWS.SequentialExecutor.prototype.on;\n\nmodule.exports = AWS.SequentialExecutor;\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,GAAG,CAACE,kBAAkB,GAAGF,GAAG,CAACG,IAAI,CAACC,OAAO,CAAC;EAExCC,WAAW,EAAE,SAASH,kBAAkB,GAAG;IACzC,IAAI,CAACI,OAAO,GAAG,CAAC,CAAC;EACnB,CAAC;EAED;AACF;AACA;EACEC,SAAS,EAAE,SAASA,SAAS,CAACC,SAAS,EAAE;IACvC,OAAO,IAAI,CAACF,OAAO,CAACE,SAAS,CAAC,GAAG,IAAI,CAACF,OAAO,CAACE,SAAS,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;EACxE,CAAC;EAEDC,EAAE,EAAE,SAASA,EAAE,CAACF,SAAS,EAAEG,QAAQ,EAAE;IACnC,IAAI,IAAI,CAACL,OAAO,CAACE,SAAS,CAAC,EAAE;MAC3B,IAAI,CAACF,OAAO,CAACE,SAAS,CAAC,CAACI,IAAI,CAACD,QAAQ,CAAC;IACxC,CAAC,MAAM;MACL,IAAI,CAACL,OAAO,CAACE,SAAS,CAAC,GAAG,CAACG,QAAQ,CAAC;IACtC;IACA,OAAO,IAAI;EACb,CAAC;EAED;AACF;AACA;EACEE,OAAO,EAAE,SAASA,OAAO,CAACL,SAAS,EAAEG,QAAQ,EAAE;IAC7CA,QAAQ,CAACG,QAAQ,GAAG,IAAI;IACxB,OAAO,IAAI,CAACJ,EAAE,CAACF,SAAS,EAAEG,QAAQ,CAAC;EACrC,CAAC;EAEDI,cAAc,EAAE,SAASA,cAAc,CAACP,SAAS,EAAEG,QAAQ,EAAE;IAC3D,IAAIJ,SAAS,GAAG,IAAI,CAACD,OAAO,CAACE,SAAS,CAAC;IACvC,IAAID,SAAS,EAAE;MACb,IAAIS,MAAM,GAAGT,SAAS,CAACS,MAAM;MAC7B,IAAIC,QAAQ,GAAG,CAAC,CAAC;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,EAAE,EAAEE,CAAC,EAAE;QAC/B,IAAIX,SAAS,CAACW,CAAC,CAAC,KAAKP,QAAQ,EAAE;UAC7BM,QAAQ,GAAGC,CAAC;QACd;MACF;MACA,IAAID,QAAQ,GAAG,CAAC,CAAC,EAAE;QACjBV,SAAS,CAACY,MAAM,CAACF,QAAQ,EAAE,CAAC,CAAC;MAC/B;IACF;IACA,OAAO,IAAI;EACb,CAAC;EAEDG,kBAAkB,EAAE,SAASA,kBAAkB,CAACZ,SAAS,EAAE;IACzD,IAAIA,SAAS,EAAE;MACb,OAAO,IAAI,CAACF,OAAO,CAACE,SAAS,CAAC;IAChC,CAAC,MAAM;MACL,IAAI,CAACF,OAAO,GAAG,CAAC,CAAC;IACnB;IACA,OAAO,IAAI;EACb,CAAC;EAED;AACF;AACA;EACEe,IAAI,EAAE,SAASA,IAAI,CAACb,SAAS,EAAEc,SAAS,EAAEC,YAAY,EAAE;IACtD,IAAI,CAACA,YAAY,EAAEA,YAAY,GAAG,YAAW,CAAE,CAAC;IAChD,IAAIhB,SAAS,GAAG,IAAI,CAACA,SAAS,CAACC,SAAS,CAAC;IACzC,IAAIgB,KAAK,GAAGjB,SAAS,CAACS,MAAM;IAC5B,IAAI,CAACS,aAAa,CAAClB,SAAS,EAAEe,SAAS,EAAEC,YAAY,CAAC;IACtD,OAAOC,KAAK,GAAG,CAAC;EAClB,CAAC;EAED;AACF;AACA;EACEC,aAAa,EAAE,SAASA,aAAa,CAAClB,SAAS,EAAEmB,IAAI,EAAEH,YAAY,EAAEI,SAAS,EAAE;IAC9E,IAAIC,IAAI,GAAG,IAAI;IACf,IAAIC,KAAK,GAAGF,SAAS,IAAI,IAAI;IAE7B,SAASG,gBAAgB,CAACC,GAAG,EAAE;MAC7B,IAAIA,GAAG,EAAE;QACPF,KAAK,GAAG7B,GAAG,CAACG,IAAI,CAAC0B,KAAK,CAACA,KAAK,IAAI,IAAIG,KAAK,EAAE,EAAED,GAAG,CAAC;QACjD,IAAIH,IAAI,CAACK,oBAAoB,EAAE;UAC7B,OAAOV,YAAY,CAACW,IAAI,CAACN,IAAI,EAAEC,KAAK,CAAC;QACvC;MACF;MACAD,IAAI,CAACH,aAAa,CAAClB,SAAS,EAAEmB,IAAI,EAAEH,YAAY,EAAEM,KAAK,CAAC;IAC1D;IAEA,OAAOtB,SAAS,CAACS,MAAM,GAAG,CAAC,EAAE;MAC3B,IAAIL,QAAQ,GAAGJ,SAAS,CAAC4B,KAAK,EAAE;MAChC,IAAIxB,QAAQ,CAACG,QAAQ,EAAE;QAAE;QACvBH,QAAQ,CAACyB,KAAK,CAACR,IAAI,EAAEF,IAAI,CAACW,MAAM,CAAC,CAACP,gBAAgB,CAAC,CAAC,CAAC;QACrD,OAAO,CAAC;MACV,CAAC,MAAM;QAAE;QACP,IAAI;UACFnB,QAAQ,CAACyB,KAAK,CAACR,IAAI,EAAEF,IAAI,CAAC;QAC5B,CAAC,CAAC,OAAOK,GAAG,EAAE;UACZF,KAAK,GAAG7B,GAAG,CAACG,IAAI,CAAC0B,KAAK,CAACA,KAAK,IAAI,IAAIG,KAAK,EAAE,EAAED,GAAG,CAAC;QACnD;QACA,IAAIF,KAAK,IAAID,IAAI,CAACK,oBAAoB,EAAE;UACtCV,YAAY,CAACW,IAAI,CAACN,IAAI,EAAEC,KAAK,CAAC;UAC9B;QACF;MACF;IACF;IACAN,YAAY,CAACW,IAAI,CAACN,IAAI,EAAEC,KAAK,CAAC;EAChC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACES,YAAY,EAAE,SAASA,YAAY,CAAC/B,SAAS,EAAE;IAC7C,IAAIqB,IAAI,GAAG,IAAI;;IAEf;IACA,IAAIrB,SAAS,CAACD,OAAO,EAAEC,SAAS,GAAGA,SAAS,CAACD,OAAO;IAEpDN,GAAG,CAACG,IAAI,CAACoC,IAAI,CAAChC,SAAS,EAAE,UAASiC,KAAK,EAAEC,SAAS,EAAE;MAClD,IAAI,OAAOA,SAAS,KAAK,UAAU,EAAEA,SAAS,GAAG,CAACA,SAAS,CAAC;MAC5DzC,GAAG,CAACG,IAAI,CAACuC,SAAS,CAACD,SAAS,EAAE,UAASE,QAAQ,EAAE;QAC/Cf,IAAI,CAAClB,EAAE,CAAC8B,KAAK,EAAEG,QAAQ,CAAC;MAC1B,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAOf,IAAI;EACb,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEgB,gBAAgB,EAAE,SAASA,gBAAgB,CAACC,IAAI,EAAErC,SAAS,EAAEmC,QAAQ,EAAE;IACrE,IAAI,CAACE,IAAI,CAAC,GAAGF,QAAQ;IACrB,IAAI,CAACG,WAAW,CAACtC,SAAS,EAAEmC,QAAQ,CAAC;IACrC,OAAO,IAAI;EACb,CAAC;EAED;AACF;AACA;EACEI,qBAAqB,EAAE,SAASA,qBAAqB,CAACF,IAAI,EAAErC,SAAS,EAAEmC,QAAQ,EAAE;IAC/EA,QAAQ,CAAC7B,QAAQ,GAAG,IAAI;IACxB,OAAO,IAAI,CAAC8B,gBAAgB,CAACC,IAAI,EAAErC,SAAS,EAAEmC,QAAQ,CAAC;EACzD,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,iBAAiB,EAAE,SAASA,iBAAiB,CAACL,QAAQ,EAAE;IACtD,IAAIf,IAAI,GAAG,IAAI;IACfe,QAAQ,CACN,YAAW;MACTf,IAAI,CAACgB,gBAAgB,CAACR,KAAK,CAACR,IAAI,EAAEqB,SAAS,CAAC;IAC9C,CAAC,EACD,YAAW;MACTrB,IAAI,CAACmB,qBAAqB,CAACX,KAAK,CAACR,IAAI,EAAEqB,SAAS,CAAC;IACnD,CAAC,CACF;IACD,OAAO,IAAI;EACb;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACAjD,GAAG,CAACE,kBAAkB,CAACgD,SAAS,CAACJ,WAAW,GAAG9C,GAAG,CAACE,kBAAkB,CAACgD,SAAS,CAACxC,EAAE;AAElFyC,MAAM,CAACC,OAAO,GAAGpD,GAAG,CAACE,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}