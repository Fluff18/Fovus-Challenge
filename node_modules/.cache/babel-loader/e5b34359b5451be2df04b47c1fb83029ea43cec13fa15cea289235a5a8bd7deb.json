{"ast":null,"code":"var AWS = require('../core');\nvar util = AWS.util;\nvar typeOf = require('./types').typeOf;\nvar DynamoDBSet = require('./set');\n\n/**\n * Convert a JavaScript value to its equivalent DynamoDB AttributeValue type\n *\n * @param data [any] The data to convert to a DynamoDB AttributeValue\n * @param options [map]\n * @option options convertEmptyValues [Boolean] Whether to automatically convert\n *                                              empty strings, blobs, and sets\n *                                              to `null`\n * @returns [AWS.DynamoDB.AttributeValue]\n */\nfunction convertInput(data, options) {\n  options = options || {};\n  var type = typeOf(data);\n  if (type === 'Object') {\n    return formatMap(data, options);\n  } else if (type === 'Array') {\n    return formatList(data, options);\n  } else if (type === 'Set') {\n    return formatSet(data, options);\n  } else if (type === 'String') {\n    if (data.length === 0 && options.convertEmptyValues) {\n      return convertInput(null);\n    }\n    return {\n      S: data\n    };\n  } else if (type === 'Number') {\n    return {\n      N: data.toString()\n    };\n  } else if (type === 'Binary') {\n    if (data.length === 0 && options.convertEmptyValues) {\n      return convertInput(null);\n    }\n    return {\n      B: data\n    };\n  } else if (type === 'Boolean') {\n    return {\n      BOOL: data\n    };\n  } else if (type === 'null') {\n    return {\n      NULL: true\n    };\n  } else if (type !== 'undefined' && type !== 'Function') {\n    // this value has a custom constructor\n    return formatMap(data, options);\n  }\n}\n\n/**\n * @api private\n * @param data [Array]\n * @param options [map]\n */\nfunction formatList(data, options) {\n  var list = {\n    L: []\n  };\n  for (var i = 0; i < data.length; i++) {\n    list['L'].push(convertInput(data[i], options));\n  }\n  return list;\n}\n\n/**\n * @api private\n * @param data [map]\n * @param options [map]\n */\nfunction formatMap(data, options) {\n  var map = {\n    M: {}\n  };\n  for (var key in data) {\n    var formatted = convertInput(data[key], options);\n    if (formatted !== void 0) {\n      map['M'][key] = formatted;\n    }\n  }\n  return map;\n}\n\n/**\n * @api private\n */\nfunction formatSet(data, options) {\n  options = options || {};\n  var values = data.values;\n  if (options.convertEmptyValues) {\n    values = filterEmptySetValues(data);\n    if (values.length === 0) {\n      return convertInput(null);\n    }\n  }\n  var map = {};\n  switch (data.type) {\n    case 'String':\n      map['SS'] = values;\n      break;\n    case 'Binary':\n      map['BS'] = values;\n      break;\n    case 'Number':\n      map['NS'] = values.map(function (value) {\n        return value.toString();\n      });\n  }\n  return map;\n}\n\n/**\n * @api private\n */\nfunction filterEmptySetValues(set) {\n  var nonEmptyValues = [];\n  var potentiallyEmptyTypes = {\n    String: true,\n    Binary: true,\n    Number: false\n  };\n  if (potentiallyEmptyTypes[set.type]) {\n    for (var i = 0; i < set.values.length; i++) {\n      if (set.values[i].length === 0) {\n        continue;\n      }\n      nonEmptyValues.push(set.values[i]);\n    }\n    return nonEmptyValues;\n  }\n  return set.values;\n}\n\n/**\n * Convert a DynamoDB AttributeValue object to its equivalent JavaScript type.\n *\n * @param data [AWS.DynamoDB.AttributeValue]\n * @returns [Object|Array|String|Number|Boolean|null]\n */\nfunction convertOutput(data) {\n  var list, map, i;\n  for (var type in data) {\n    var values = data[type];\n    if (type === 'M') {\n      map = {};\n      for (var key in values) {\n        map[key] = convertOutput(values[key]);\n      }\n      return map;\n    } else if (type === 'L') {\n      list = [];\n      for (i = 0; i < values.length; i++) {\n        list.push(convertOutput(values[i]));\n      }\n      return list;\n    } else if (type === 'SS') {\n      list = [];\n      for (i = 0; i < values.length; i++) {\n        list.push(values[i] + '');\n      }\n      return new DynamoDBSet(list);\n    } else if (type === 'NS') {\n      list = [];\n      for (i = 0; i < values.length; i++) {\n        list.push(Number(values[i]));\n      }\n      return new DynamoDBSet(list);\n    } else if (type === 'BS') {\n      list = [];\n      for (i = 0; i < values.length; i++) {\n        list.push(new util.Buffer(values[i]));\n      }\n      return new DynamoDBSet(list);\n    } else if (type === 'S') {\n      return values + '';\n    } else if (type === 'N') {\n      return Number(values);\n    } else if (type === 'B') {\n      return new util.Buffer(values);\n    } else if (type === 'BOOL') {\n      return values === 'true' || values === 'TRUE' || values === true;\n    } else if (type === 'NULL') {\n      return null;\n    }\n  }\n}\nAWS.DynamoDB.Converter = {\n  input: convertInput,\n  output: convertOutput\n};\nmodule.exports = AWS.DynamoDB.Converter;","map":{"version":3,"names":["AWS","require","util","typeOf","DynamoDBSet","convertInput","data","options","type","formatMap","formatList","formatSet","length","convertEmptyValues","S","N","toString","B","BOOL","NULL","list","L","i","push","map","M","key","formatted","values","filterEmptySetValues","value","set","nonEmptyValues","potentiallyEmptyTypes","String","Binary","Number","convertOutput","Buffer","DynamoDB","Converter","input","output","module","exports"],"sources":["/Users/luminosity/Desktop/Fovus/node_modules/aws-sdk/lib/dynamodb/converter.js"],"sourcesContent":["var AWS = require('../core');\nvar util = AWS.util;\nvar typeOf = require('./types').typeOf;\nvar DynamoDBSet = require('./set');\n\n/**\n * Convert a JavaScript value to its equivalent DynamoDB AttributeValue type\n *\n * @param data [any] The data to convert to a DynamoDB AttributeValue\n * @param options [map]\n * @option options convertEmptyValues [Boolean] Whether to automatically convert\n *                                              empty strings, blobs, and sets\n *                                              to `null`\n * @returns [AWS.DynamoDB.AttributeValue]\n */\nfunction convertInput(data, options) {\n  options = options || {};\n  var type = typeOf(data);\n  if (type === 'Object') {\n    return formatMap(data, options);\n  } else if (type === 'Array') {\n    return formatList(data, options);\n  } else if (type === 'Set') {\n    return formatSet(data, options);\n  } else if (type === 'String') {\n    if (data.length === 0 && options.convertEmptyValues) {\n      return convertInput(null);\n    }\n    return { S: data };\n  } else if (type === 'Number') {\n    return { N: data.toString() };\n  } else if (type === 'Binary') {\n    if (data.length === 0 && options.convertEmptyValues) {\n      return convertInput(null);\n    }\n    return { B: data };\n  } else if (type === 'Boolean') {\n    return { BOOL: data };\n  } else if (type === 'null') {\n    return { NULL: true };\n  } else if (type !== 'undefined' && type !== 'Function') {\n    // this value has a custom constructor\n    return formatMap(data, options);\n  }\n}\n\n/**\n * @api private\n * @param data [Array]\n * @param options [map]\n */\nfunction formatList(data, options) {\n  var list = {L: []};\n  for (var i = 0; i < data.length; i++) {\n    list['L'].push(convertInput(data[i], options));\n  }\n  return list;\n}\n\n/**\n * @api private\n * @param data [map]\n * @param options [map]\n */\nfunction formatMap(data, options) {\n  var map = {M: {}};\n  for (var key in data) {\n    var formatted = convertInput(data[key], options);\n    if (formatted !== void 0) {\n      map['M'][key] = formatted;\n    }\n  }\n  return map;\n}\n\n/**\n * @api private\n */\nfunction formatSet(data, options) {\n  options = options || {};\n  var values = data.values;\n  if (options.convertEmptyValues) {\n    values = filterEmptySetValues(data);\n    if (values.length === 0) {\n      return convertInput(null);\n    }\n  }\n\n  var map = {};\n  switch (data.type) {\n    case 'String': map['SS'] = values; break;\n    case 'Binary': map['BS'] = values; break;\n    case 'Number': map['NS'] = values.map(function (value) {\n      return value.toString();\n    });\n  }\n  return map;\n}\n\n/**\n * @api private\n */\nfunction filterEmptySetValues(set) {\n    var nonEmptyValues = [];\n    var potentiallyEmptyTypes = {\n        String: true,\n        Binary: true,\n        Number: false\n    };\n    if (potentiallyEmptyTypes[set.type]) {\n        for (var i = 0; i < set.values.length; i++) {\n            if (set.values[i].length === 0) {\n                continue;\n            }\n            nonEmptyValues.push(set.values[i]);\n        }\n\n        return nonEmptyValues;\n    }\n\n    return set.values;\n}\n\n/**\n * Convert a DynamoDB AttributeValue object to its equivalent JavaScript type.\n *\n * @param data [AWS.DynamoDB.AttributeValue]\n * @returns [Object|Array|String|Number|Boolean|null]\n */\nfunction convertOutput(data) {\n  var list, map, i;\n  for (var type in data) {\n    var values = data[type];\n    if (type === 'M') {\n      map = {};\n      for (var key in values) {\n        map[key] = convertOutput(values[key]);\n      }\n      return map;\n    } else if (type === 'L') {\n      list = [];\n      for (i = 0; i < values.length; i++) {\n        list.push(convertOutput(values[i]));\n      }\n      return list;\n    } else if (type === 'SS') {\n      list = [];\n      for (i = 0; i < values.length; i++) {\n        list.push(values[i] + '');\n      }\n      return new DynamoDBSet(list);\n    } else if (type === 'NS') {\n      list = [];\n      for (i = 0; i < values.length; i++) {\n        list.push(Number(values[i]));\n      }\n      return new DynamoDBSet(list);\n    } else if (type === 'BS') {\n      list = [];\n      for (i = 0; i < values.length; i++) {\n        list.push(new util.Buffer(values[i]));\n      }\n      return new DynamoDBSet(list);\n    } else if (type === 'S') {\n      return values + '';\n    } else if (type === 'N') {\n      return Number(values);\n    } else if (type === 'B') {\n      return new util.Buffer(values);\n    } else if (type === 'BOOL') {\n      return (values === 'true' || values === 'TRUE' || values === true);\n    } else if (type === 'NULL') {\n      return null;\n    }\n  }\n}\n\nAWS.DynamoDB.Converter = {\n  input: convertInput,\n  output: convertOutput\n};\n\nmodule.exports = AWS.DynamoDB.Converter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}