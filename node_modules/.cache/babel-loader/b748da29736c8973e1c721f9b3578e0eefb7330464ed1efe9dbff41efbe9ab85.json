{"ast":null,"code":"import { ListPartsCommand } from \"../commands/ListPartsCommand\";\nimport { S3 } from \"../S3\";\nimport { S3Client } from \"../S3Client\";\nconst makePagedClientRequest = async function (client, input) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n  return await client.send(new ListPartsCommand(input), ...args);\n};\nconst makePagedRequest = async function (client, input) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    args[_key2 - 2] = arguments[_key2];\n  }\n  return await client.listParts(input, ...args);\n};\nexport async function* paginateListParts(config, input) {\n  let token = config.startingToken || undefined;\n  let hasNext = true;\n  let page;\n  for (var _len3 = arguments.length, additionalArguments = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n    additionalArguments[_key3 - 2] = arguments[_key3];\n  }\n  while (hasNext) {\n    input.PartNumberMarker = token;\n    input[\"MaxParts\"] = config.pageSize;\n    if (config.client instanceof S3) {\n      page = await makePagedRequest(config.client, input, ...additionalArguments);\n    } else if (config.client instanceof S3Client) {\n      page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n    } else {\n      throw new Error(\"Invalid client, expected S3 | S3Client\");\n    }\n    yield page;\n    const prevToken = token;\n    token = page.NextPartNumberMarker;\n    hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));\n  }\n  return undefined;\n}","map":{"version":3,"names":["ListPartsCommand","S3","S3Client","makePagedClientRequest","client","input","args","send","makePagedRequest","listParts","paginateListParts","config","token","startingToken","undefined","hasNext","page","additionalArguments","PartNumberMarker","pageSize","Error","prevToken","NextPartNumberMarker","stopOnSameToken"],"sources":["/Users/luminosity/Desktop/Fovus/node_modules/@aws-sdk/client-s3/dist-es/pagination/ListPartsPaginator.js"],"sourcesContent":["import { ListPartsCommand } from \"../commands/ListPartsCommand\";\nimport { S3 } from \"../S3\";\nimport { S3Client } from \"../S3Client\";\nconst makePagedClientRequest = async (client, input, ...args) => {\n    return await client.send(new ListPartsCommand(input), ...args);\n};\nconst makePagedRequest = async (client, input, ...args) => {\n    return await client.listParts(input, ...args);\n};\nexport async function* paginateListParts(config, input, ...additionalArguments) {\n    let token = config.startingToken || undefined;\n    let hasNext = true;\n    let page;\n    while (hasNext) {\n        input.PartNumberMarker = token;\n        input[\"MaxParts\"] = config.pageSize;\n        if (config.client instanceof S3) {\n            page = await makePagedRequest(config.client, input, ...additionalArguments);\n        }\n        else if (config.client instanceof S3Client) {\n            page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n        }\n        else {\n            throw new Error(\"Invalid client, expected S3 | S3Client\");\n        }\n        yield page;\n        const prevToken = token;\n        token = page.NextPartNumberMarker;\n        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));\n    }\n    return undefined;\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,EAAE,QAAQ,OAAO;AAC1B,SAASC,QAAQ,QAAQ,aAAa;AACtC,MAAMC,sBAAsB,GAAG,gBAAOC,MAAM,EAAEC,KAAK,EAAc;EAAA,kCAATC,IAAI;IAAJA,IAAI;EAAA;EACxD,OAAO,MAAMF,MAAM,CAACG,IAAI,CAAC,IAAIP,gBAAgB,CAACK,KAAK,CAAC,EAAE,GAAGC,IAAI,CAAC;AAClE,CAAC;AACD,MAAME,gBAAgB,GAAG,gBAAOJ,MAAM,EAAEC,KAAK,EAAc;EAAA,mCAATC,IAAI;IAAJA,IAAI;EAAA;EAClD,OAAO,MAAMF,MAAM,CAACK,SAAS,CAACJ,KAAK,EAAE,GAAGC,IAAI,CAAC;AACjD,CAAC;AACD,OAAO,gBAAgBI,iBAAiB,CAACC,MAAM,EAAEN,KAAK,EAA0B;EAC5E,IAAIO,KAAK,GAAGD,MAAM,CAACE,aAAa,IAAIC,SAAS;EAC7C,IAAIC,OAAO,GAAG,IAAI;EAClB,IAAIC,IAAI;EAAC,mCAH8CC,mBAAmB;IAAnBA,mBAAmB;EAAA;EAI1E,OAAOF,OAAO,EAAE;IACZV,KAAK,CAACa,gBAAgB,GAAGN,KAAK;IAC9BP,KAAK,CAAC,UAAU,CAAC,GAAGM,MAAM,CAACQ,QAAQ;IACnC,IAAIR,MAAM,CAACP,MAAM,YAAYH,EAAE,EAAE;MAC7Be,IAAI,GAAG,MAAMR,gBAAgB,CAACG,MAAM,CAACP,MAAM,EAAEC,KAAK,EAAE,GAAGY,mBAAmB,CAAC;IAC/E,CAAC,MACI,IAAIN,MAAM,CAACP,MAAM,YAAYF,QAAQ,EAAE;MACxCc,IAAI,GAAG,MAAMb,sBAAsB,CAACQ,MAAM,CAACP,MAAM,EAAEC,KAAK,EAAE,GAAGY,mBAAmB,CAAC;IACrF,CAAC,MACI;MACD,MAAM,IAAIG,KAAK,CAAC,wCAAwC,CAAC;IAC7D;IACA,MAAMJ,IAAI;IACV,MAAMK,SAAS,GAAGT,KAAK;IACvBA,KAAK,GAAGI,IAAI,CAACM,oBAAoB;IACjCP,OAAO,GAAG,CAAC,EAAEH,KAAK,KAAK,CAACD,MAAM,CAACY,eAAe,IAAIX,KAAK,KAAKS,SAAS,CAAC,CAAC;EAC3E;EACA,OAAOP,SAAS;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}