{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha1 = void 0;\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\nvar isEmptyData_1 = require(\"./isEmptyData\");\nvar constants_1 = require(\"./constants\");\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\nvar Sha1 = /** @class */function () {\n  function Sha1(secret) {\n    this.toHash = new Uint8Array(0);\n    if (secret !== void 0) {\n      this.key = new Promise(function (resolve, reject) {\n        (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey(\"raw\", convertToBuffer(secret), constants_1.SHA_1_HMAC_ALGO, false, [\"sign\"]).then(resolve, reject);\n      });\n      this.key.catch(function () {});\n    }\n  }\n  Sha1.prototype.update = function (data) {\n    if ((0, isEmptyData_1.isEmptyData)(data)) {\n      return;\n    }\n    var update = convertToBuffer(data);\n    var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  };\n  Sha1.prototype.digest = function () {\n    var _this = this;\n    if (this.key) {\n      return this.key.then(function (key) {\n        return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_1_HMAC_ALGO, key, _this.toHash).then(function (data) {\n          return new Uint8Array(data);\n        });\n      });\n    }\n    if ((0, isEmptyData_1.isEmptyData)(this.toHash)) {\n      return Promise.resolve(constants_1.EMPTY_DATA_SHA_1);\n    }\n    return Promise.resolve().then(function () {\n      return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_1_HASH, _this.toHash);\n    }).then(function (data) {\n      return Promise.resolve(new Uint8Array(data));\n    });\n  };\n  Sha1.prototype.reset = function () {\n    this.toHash = new Uint8Array(0);\n  };\n  return Sha1;\n}();\nexports.Sha1 = Sha1;\nfunction convertToBuffer(data) {\n  if (typeof data === \"string\") {\n    return (0, util_utf8_browser_1.fromUtf8)(data);\n  }\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n  return new Uint8Array(data);\n}","map":{"version":3,"mappings":";;;;;;AACA;AACA;AACA;AACA;AAEA;EAIE,cAAYA,MAAmB;IAFvB,WAAM,GAAe,IAAIC,UAAU,CAAC,CAAC,CAAC;IAG5C,IAAID,MAAM,KAAK,KAAK,CAAC,EAAE;MACrB,IAAI,CAACE,GAAG,GAAG,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM;QACrC,qCAAY,GAAE,CACXC,MAAM,CAACC,MAAM,CAACC,SAAS,CACtB,KAAK,EACLC,eAAe,CAACT,MAAM,CAAC,EACvBU,2BAAe,EACf,KAAK,EACL,CAAC,MAAM,CAAC,CACT,CACAC,IAAI,CAACP,OAAO,EAAEC,MAAM,CAAC;MAC1B,CAAC,CAAC;MACF,IAAI,CAACH,GAAG,CAACU,KAAK,CAAC,aAAO,CAAC,CAAC;;EAE5B;EAEAC,qBAAM,GAAN,UAAOC,IAAgB;IACrB,IAAI,6BAAW,EAACA,IAAI,CAAC,EAAE;MACrB;;IAGF,IAAMC,MAAM,GAAGN,eAAe,CAACK,IAAI,CAAC;IACpC,IAAME,UAAU,GAAG,IAAIf,UAAU,CAC/B,IAAI,CAACgB,MAAM,CAACC,UAAU,GAAGH,MAAM,CAACG,UAAU,CAC3C;IACDF,UAAU,CAACG,GAAG,CAAC,IAAI,CAACF,MAAM,EAAE,CAAC,CAAC;IAC9BD,UAAU,CAACG,GAAG,CAACJ,MAAM,EAAE,IAAI,CAACE,MAAM,CAACC,UAAU,CAAC;IAC9C,IAAI,CAACD,MAAM,GAAGD,UAAU;EAC1B,CAAC;EAEDH,qBAAM,GAAN;IAAA;IACE,IAAI,IAAI,CAACX,GAAG,EAAE;MACZ,OAAO,IAAI,CAACA,GAAG,CAACS,IAAI,CAAC,UAACT,GAAG;QACvB,4CAAY,GAAE,CACXI,MAAM,CAACC,MAAM,CAACa,IAAI,CAACV,2BAAe,EAAER,GAAG,EAAEmB,KAAI,CAACJ,MAAM,CAAC,CACrDN,IAAI,CAAC,UAACG,IAAI;UAAK,WAAIb,UAAU,CAACa,IAAI,CAAC;QAApB,CAAoB,CAAC;MAFvC,CAEuC,CACxC;;IAGH,IAAI,6BAAW,EAAC,IAAI,CAACG,MAAM,CAAC,EAAE;MAC5B,OAAOd,OAAO,CAACC,OAAO,CAACM,4BAAgB,CAAC;;IAG1C,OAAOP,OAAO,CAACC,OAAO,EAAE,CACrBO,IAAI,CAAC;MAAM,4CAAY,GAAE,CAACL,MAAM,CAACC,MAAM,CAACe,MAAM,CAACZ,sBAAU,EAAEW,KAAI,CAACJ,MAAM,CAAC;IAA5D,CAA4D,CAAC,CACxEN,IAAI,CAAC,UAACG,IAAI;MAAK,cAAO,CAACV,OAAO,CAAC,IAAIH,UAAU,CAACa,IAAI,CAAC,CAAC;IAArC,CAAqC,CAAC;EAC1D,CAAC;EAEDD,oBAAK,GAAL;IACE,IAAI,CAACI,MAAM,GAAG,IAAIhB,UAAU,CAAC,CAAC,CAAC;EACjC,CAAC;EACH,WAAC;AAAD,CAAC,EAxDD;AAAasB;AA0Db,SAASd,eAAe,CAACK,IAAgB;EACvC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAO,gCAAQ,EAACA,IAAI,CAAC;;EAGvB,IAAIU,WAAW,CAACC,MAAM,CAACX,IAAI,CAAC,EAAE;IAC5B,OAAO,IAAIb,UAAU,CACnBa,IAAI,CAACY,MAAM,EACXZ,IAAI,CAACa,UAAU,EACfb,IAAI,CAACI,UAAU,GAAGjB,UAAU,CAAC2B,iBAAiB,CAC/C;;EAGH,OAAO,IAAI3B,UAAU,CAACa,IAAI,CAAC;AAC7B","names":["secret","Uint8Array","key","Promise","resolve","reject","crypto","subtle","importKey","convertToBuffer","constants_1","then","catch","Sha1","data","update","typedArray","toHash","byteLength","set","sign","_this","digest","exports","ArrayBuffer","isView","buffer","byteOffset","BYTES_PER_ELEMENT"],"sources":["/Users/luminosity/Desktop/Fovus/node_modules/@aws-crypto/sha1-browser/src/webCryptoSha1.ts"],"sourcesContent":["import { Checksum, SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8-browser\";\nimport { isEmptyData } from \"./isEmptyData\";\nimport { EMPTY_DATA_SHA_1, SHA_1_HASH, SHA_1_HMAC_ALGO } from \"./constants\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha1 implements Checksum {\n  private readonly key: Promise<CryptoKey> | undefined;\n  private toHash: Uint8Array = new Uint8Array(0);\n\n  constructor(secret?: SourceData) {\n    if (secret !== void 0) {\n      this.key = new Promise((resolve, reject) => {\n        locateWindow()\n          .crypto.subtle.importKey(\n            \"raw\",\n            convertToBuffer(secret),\n            SHA_1_HMAC_ALGO,\n            false,\n            [\"sign\"]\n          )\n          .then(resolve, reject);\n      });\n      this.key.catch(() => {});\n    }\n  }\n\n  update(data: SourceData): void {\n    if (isEmptyData(data)) {\n      return;\n    }\n\n    const update = convertToBuffer(data);\n    const typedArray = new Uint8Array(\n      this.toHash.byteLength + update.byteLength\n    );\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  }\n\n  digest(): Promise<Uint8Array> {\n    if (this.key) {\n      return this.key.then((key) =>\n        locateWindow()\n          .crypto.subtle.sign(SHA_1_HMAC_ALGO, key, this.toHash)\n          .then((data) => new Uint8Array(data))\n      );\n    }\n\n    if (isEmptyData(this.toHash)) {\n      return Promise.resolve(EMPTY_DATA_SHA_1);\n    }\n\n    return Promise.resolve()\n      .then(() => locateWindow().crypto.subtle.digest(SHA_1_HASH, this.toHash))\n      .then((data) => Promise.resolve(new Uint8Array(data)));\n  }\n\n  reset(): void {\n    this.toHash = new Uint8Array(0);\n  }\n}\n\nfunction convertToBuffer(data: SourceData): Uint8Array {\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}